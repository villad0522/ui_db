[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"プログラム起動","functionNameEN":"startUp","parametersName":["localUrl","isDebug"],"parametersDataType":["string_nullable","boolean"],"returnValue":"void","functionId":"01HN4KGWPV4T14H9AT0GMZYQJ0","beforeCode":"\n\n\n","innerCode":"\n  await startUp( localUrl, isDebug );   // 下層の関数を呼び出す\n  //\n  // テーブルを作成する\n  await reserveWord(\"input_group\"); // 予約語に登録\n  await runSqlWriteOnly(\n    `CREATE TABLE IF NOT EXISTS input_group (\n      input_group_id INTEGER PRIMARY KEY AUTOINCREMENT,\n      view_id INTEGER NOT NULL,\n      table_id TEXT NOT NULL,\n      next_group_id INTEGER,\n      next_column_id TEXT,\n      processing_order INTEGER NOT NULL,\n      UNIQUE (view_id, processing_order),\n      UNIQUE (next_group_id, next_column_id),\n      FOREIGN KEY (next_group_id) REFERENCES input_group(input_group_id)\n    );`,\n    {},\n  );\n  //\n  await reserveWord(\"input_elements\"); // 予約語に登録\n  await runSqlWriteOnly(\n    `CREATE TABLE IF NOT EXISTS input_elements (\n      view_column_id INTEGER PRIMARY KEY,\n      input_group_id INTEGER NOT NULL,\n      column_id TEXT NOT NULL,\n      input_type TEXT NOT NULL,\n      FOREIGN KEY (input_group_id) REFERENCES input_group(input_group_id)\n    );`,\n    {},\n  );\n  await _reload();    // メモリに再読み込み\n","afterCode":""},{"functionNameJP":"【サブ関数】自動入力","functionNameEN":"_autoFill","parametersName":["params"],"parametersDataType":[{"viewColumnIdList":["number"],"isClick":"boolean","inputTexts":{"string":"any"}}],"returnValue":{"inputTextsAndAutocorrection":{"string":"any"},"recordId":"number_nullable"},"functionId":"01HN58GMB2K87PNTFY13M1782A","beforeCode":"\n\n\n\nlet cacheData1 = {\n  // ビューカラムID: カラムID\n  //  34: \"c6\",\n};\n\n//【サブ関数】メモリに再読み込み\nasync function _reload() {\n  cacheData1 = {};\n  const inputElements = await runSqlReadOnly(\n    `SELECT\n      view_column_id AS viewColumnId,\n      column_id AS columnId\n      FROM input_elements;`,\n    {},\n  );\n  for( const { viewColumnId, columnId } of inputElements ){\n    cacheData1[viewColumnId] = columnId;\n  }\n}\n\n\n\n","innerCode":"\n  let { viewColumnIdList, isClick, inputTexts } = params;\n  //\n  const results = {\n    //  \"vc8\": \"a\",\n    //  \"vc8_autocorrection\": [ \"aaa\", \"aaaaaa\" ],\n  };\n  //\n  // 入力項目ごとに繰り返す（列ごとに繰り返す）\n  for(let viewColumnId of viewColumnIdList){\n    results[ \"vc\" + viewColumnId ] = inputText;  // 結果\n  }\n  //\n  // 絞り込み条件を生成する\n  const conditions = await _getConditions_core({ viewColumnIdList, inputTexts });\n  //\n  // 自動入力する？\n  let isAutoInput = true;\n  //\n  // 入力項目ごとに繰り返す（列ごとに繰り返す）\n  for(let viewColumnId of viewColumnIdList){\n    const columnId = cacheData1[viewColumnId];\n    const dataType = await getDataType( columnId );\n    const inputText = inputTexts[ \"vc\" + viewColumnId ];\n    if( dataType===\"FILE\" || dataType===\"BOOL\" || dataType===\"POINTER\" ){\n      continue; // 予測変換を生成しない\n    }\n    else if( dataType===\"INTEGER\" || dataType===\"REAL\" || dataType===\"TEXT\" ){\n      // 予測変換を生成する\n      const predictions = await _listPredictions_core({\n        inputText,\n        tableId,\n        columnId,\n        conditions\n      });\n      results[ \"vc\" + viewColumnId + \"_autocorrection\" ] = predictions;  // 結果\n    }\n    else{\n      throw `サポートされていないデータ型です。`;\n    }\n    //\n    // キーボード入力 かつ 予測が２件以上 の場合、自動入力しない\n    if( !isClick && predictions.length>=2 ){\n      isAutoInput = false;\n    }\n  }\n  if(isAutoInput===false){\n    return {\n      inputTextsAndAutocorrection: results,\n      recordId: null,\n    };\n  }\n  //\n  const records = await _listRecords_core( tableId, conditions );\n  if( records.length === 1 ){\n    // 合致するデータが１件ではない場合\n    return {\n      inputTextsAndAutocorrection: results,\n      recordId: null,\n    };\n  }\n  // 合致するデータが１件だけ存在する場合\n  //\n  const primaryKey = await getPrimaryKey( tableId );\n  const recordId = records[0][primaryKey];\n  if(!recordId){\n    throw `レコードIDを取得できませんでした`;\n  }\n  // 入力項目ごとに繰り返す（列ごとに繰り返す）\n  for(let viewColumnId of viewColumnIdList){\n    const columnId = cacheData1[viewColumnId];\n    // 自動入力を行う\n    results[ \"vc\" + viewColumnId ] = String(records[0][columnId]);  // 結果\n  }\n  return {\n    inputTextsAndAutocorrection: results,\n    recordId: recordId,\n  };\n","afterCode":""},{"functionNameJP":"【サブ関数】絞り込み条件を生成する","functionNameEN":"_getConditions","parametersName":["params"],"parametersDataType":[{"viewColumnIdList":["number"],"inputTexts":{"string":"any"}}],"returnValue":{"string":"any"},"functionId":"01HN4X78ZEAMMVMX5QGSBJP909","beforeCode":"\n\n\n\n\n\n\n\n","innerCode":"\n  let { viewColumnIdList, inputTexts } = params;\n  const conditions = {};\n  // 入力項目ごとに繰り返す（列ごとに繰り返す）\n  for(let viewColumnId of viewColumnIdList){\n    const columnId = cacheData1[viewColumnId];\n    const dataType = await getDataType( columnId );\n    const inputText = inputTexts[ \"vc\" + viewColumnId ];\n    if( dataType===\"FILE\" ){\n      continue; // 条件には含めない\n    }\n    else if( dataType===\"INTEGER\" || dataType===\"REAL\" || dataType===\"POINTER\" || dataType===\"BOOL\" || dataType===\"TEXT\" ){\n      if(!inputText && isNaN(inputText)) continue; // 空欄は条件には含めない\n      const data = await formatField( inputText, columnId, false );\n      if(!data) continue; // 空欄は条件には含めない\n      conditions[columnId] = data;  // 条件に加える\n    }\n    else{\n      throw `サポートされていないデータ型です。`;\n    }\n  }\n  return conditions;\n","afterCode":""},{"functionNameJP":"【サブ関数】予測変換を取得する","functionNameEN":"_listPredictions","parametersName":["params"],"parametersDataType":[{"inputText":"string","tableId":"string","columnId":"string","conditions":{"string":"any"}}],"returnValue":["string"],"functionId":"01HN4WR4VHQRKMHBB031QWTG6C","beforeCode":"\n\n\n\n\n\n","innerCode":"\n  let { inputText, tableId, columnId, conditions } = params;\n  //\n  const dataType = await getDataType( columnId );\n  if( dataType===\"FILE\" ){\n    return []; // 予測変換を取得しない\n  }\n  else if( dataType===\"BOOL\" ){\n    return [\"true\",\"false\"];\n  }\n  else if( dataType===\"INTEGER\" || dataType===\"REAL\" || dataType===\"POINTER\" || dataType===\"TEXT\" ){\n    inputText = String(inputText);\n  }\n  else{\n    throw `サポートされていないデータ型です。`;\n  }\n  //\n  const newConditions = structuredClone(conditions);\n  delete newConditions[columnId];\n  //\n  // 予測変換\n  return await autoCorrect( tableId, columnId, inputText, newConditions );\n","afterCode":""},{"functionNameJP":"【サブ関数】レコードを取得","functionNameEN":"_listRecords","parametersName":["tableId","conditions"],"parametersDataType":["string",{"string":"any"}],"returnValue":[{"string":"any"}],"functionId":"01HN4TGGX3CFP9ZB0GQN5WQ702","beforeCode":"\n\n\n\n","innerCode":"\n  let sql = `\n    SELECT * AS recordsCount\n      FROM ${tableId}`;\n  const whereTexts = [];\n  const statements = {};\n  for( const columnId in conditions ){\n    whereTexts.push( `${columnId} = :${columnId}`);\n    statements[`:${columnId}`] = conditions[columnId];\n  }\n  if(whereTexts.length>0){\n    sql += `\\n        WHERE ` + whereTexts.join(`\\n        AND `);\n  }\n  sql += `\n      LIMIT 10;`;\n  return await runSqlReadOnly( sql, statements );\n","afterCode":""},{"functionNameJP":"インメモリキャッシュを削除する","functionNameEN":"clearCache","parametersName":[],"parametersDataType":[],"returnValue":"void","functionId":"01HN5CW3NVNHWH3EJATQWYRSAA","beforeCode":"\n\n\n\n","innerCode":"\n    await _reload();    // メモリに再読み込み\n    return await clearCache();   // 下層の関数を呼び出す\n","afterCode":"\n"}]