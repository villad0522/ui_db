[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n  await startUp(\"http://localhost:3000/\", true);\n  //\n  const { tableId: tableId1 } = await createTable(\"学年\");\n  const { columnId: columnId1 } = await createColumn( tableId1, \"学年\", \"INTEGER\", null );\n  const { recordId: recordId } = await createRecord( tableId1, {\n    [columnId1]: 3,\n  });\n  //\n  const { tableId: tableId2 } = await createTable(\"名簿\");\n  const { columnId: columnId2  } = await createColumn( tableId2, \"学年\", \"POINTER\", tableId1 );\n  const { columnId: columnId3  } = await createColumn( tableId2, \"氏名\", \"TEXT\", null );\n  const { recordId: recordId2 } = await createRecord( tableId2, {\n    [columnId2]: recordId,\n    [columnId3]: \"田中太郎\",\n  });\n  const { recordId: recordId3 } = await createRecord( tableId2, {\n    [columnId2]: recordId,\n    [columnId3]: \"鈴木信也\",\n  });\n  //\n  const { tableId: tableId3 } = await createTable(\"成績表\");\n  const { columnId: columnId4  } = await createColumn( tableId3, \"学生\", \"POINTER\", tableId2 );\n  const { columnId: columnId5  } = await createColumn( tableId3, \"科目\", \"TEXT\", null );\n  const { columnId: columnId6  } = await createColumn( tableId3, \"得点\", \"INTEGER\", null );\n  const { recordId: recordId4 } = await createRecord( tableId3, {\n    [columnId4]: recordId2,\n    [columnId5]: \"国語\",\n    [columnId6]: 34,\n  });\n  //\n  // 入力グループを作成（成績表）\n  await createInputGroup(\n    \"group3\", // inputGroupId\n    89, // viewId\n    tableId3, // tableId\n    null, // nextGroupId\n    null, // nextColumnId\n    3 // processingOrder\n  );\n  //\n  // 入力要素を作成（科目）\n  await createInputElement(\n    \"d8\", // viewColumnId\n    \"group3\", // inputGroupId\n    columnId5, // columnId\n    \"TEXTBOX\", // inputType\n  );\n  //\n  // 入力要素を作成（得点）\n  await createInputElement(\n    \"d7\", // viewColumnId\n    \"group3\", // inputGroupId\n    columnId6, // columnId\n    \"TEXTBOX\", // inputType\n  );\n  //\n  //===================================\n  //\n  // 入力グループを作成（名簿）\n  await createInputGroup(\n    \"group1\", // inputGroupId\n    89, // viewId\n    tableId2, // tableId\n    \"group3\", // nextGroupId\n    columnId4, // nextColumnId\n    2 // processingOrder\n  );\n  //\n  // 入力要素を作成（氏名）\n  await createInputElement(\n    \"d9\", // viewColumnId\n    \"group1\", // inputGroupId\n    columnId3, // columnId\n    \"TEXTBOX\", // inputType\n  );\n  //\n  //===================================\n  //\n  // 入力グループを作成（学年）\n  await createInputGroup(\n    \"group2\", // inputGroupId\n    89, // viewId\n    tableId1, // tableId\n    \"group1\", // nextGroupId\n    columnId2, // nextColumnId\n    1 // processingOrder\n  );\n  //\n  // 入力要素を作成（学年）\n  await createInputElement(\n    \"d10\", // viewColumnId\n    \"group2\", // inputGroupId\n    columnId1, // columnId\n    \"TEXTBOX\", // inputType\n  );\n  //\n  const result1 = await _autoFill({ \n    viewColumnIdList: [\"d10\"],\n    isClick: true,\n    tableId: tableId1,\n    inputTexts: {\n      \"d10\": 3,\n    },\n    conditions:{},\n    isAutoFill: true,\n  });\n  if( result1.recordId !== recordId ){\n    throw new Error(`実行結果が想定外です。\\n${JSON.stringify(result1, null, 2)}`);\n  }\n  //\n  const result2 = await _autoFill({ \n    viewColumnIdList: [\"d9\"],\n    isClick: true,\n    tableId: tableId2,\n    inputTexts: {\n      \"d9\": \"田\",\n    },\n    conditions:{\n      [columnId2]: recordId,\n    },\n    isAutoFill: true,\n  });\n  const result3 = await autoFill(\n    89, // viewId\n    {\n      \"d9\": \"田\",\n      \"d10\": 3,\n    },\n    true,// isClick\n  );\n  /*\n  これが返ってくるはず。\n  {\n    d9: '田中太郎',\n    d10: 3,\n    d10_option: [ 3 ],\n    d9_option: [ '田中太郎' ],\n    d7: '',\n    d8: '',\n    d7_option: [ 34 ],\n    d8_option: [ '国語' ]\n  }  */\n  if( result3[\"d9\"]!==\"田中太郎\" ){\n    throw new Error(`実行結果が想定外です。\\n`+JSON.stringify(result1, null, 2));\n  }\n  if( result3[\"d10\"]!==3 ){\n    throw new Error(`実行結果が想定外です。\\n`+JSON.stringify(result1, null, 2));\n  }\n  if( result3[\"d10_option\"][0]!==3 ){\n    throw new Error(`実行結果が想定外です。\\n`+JSON.stringify(result1, null, 2));\n  }\n  if( result3[\"d9_option\"][0]!==\"田中太郎\" ){\n    throw new Error(`実行結果が想定外です。\\n`+JSON.stringify(result1, null, 2));\n  }\n  if( result3[\"d7\"]!==\"\" ){\n    throw new Error(`実行結果が想定外です。\\n`+JSON.stringify(result1, null, 2));\n  }\n  if( result3[\"d8\"]!==\"\" ){\n    throw new Error(`実行結果が想定外です。\\n`+JSON.stringify(result1, null, 2));\n  }\n  if( result3[\"d7_option\"][0]!==34 ){\n    throw new Error(`実行結果が想定外です。\\n`+JSON.stringify(result1, null, 2));\n  }\n  if( result3[\"d8_option\"][0]!==\"国語\" ){\n    throw new Error(`実行結果が想定外です。\\n`+JSON.stringify(result1, null, 2));\n  }\n  const { isSuccess: flag1, recordId: recordId5 } = await createRecordFromView(\n    89, // viewId\n    {\n      \"d7\": 99,\n      \"d8\": \"国語\",\n      \"d9\": \"鈴木信也\",\n      \"d10\": 3,\n    },\n  );\n  if( flag1!==true ){\n    throw new Error(`実行結果が想定外です。`);\n  }\n  const result5 = await updateRecordsFromView(\n    89, // viewId\n    [\n      {\n        \"id\": recordId5,\n        \"d7\": 9,\n        \"d8\": \"国語\",\n        \"d9\": \"鈴木信也\",\n        \"d10\": 3,\n      },\n    ]\n  );\n  if( result5.isSuccess!==true ){\n    throw new Error(`実行結果が想定外です。\\n`+JSON.stringify(result5, null, 2));\n  }\n  const { isSuccess: flag3 } = await updateRecordsFromView(\n    89, // viewId\n    [\n      {\n        \"id\": recordId4,\n        \"d7\": \"a\",\n        \"d8\": \"国語\",\n        \"d9\": \"鈴木信也2\",\n        \"d10\": 3,\n      },\n      {\n        \"id\": recordId5,\n        \"d7\": 99,\n        \"d8\": \"国語\",\n        \"d9\": \"鈴木信也2\",\n        \"d10\": 3,\n      },\n    ]\n  );\n  if( flag3!==false ){\n    throw new Error(`実行結果が想定外です。`);\n  }\n  //\n  // 入力要素を削除\n  await deleteViewInput( 89 );\n  await close();\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"プログラム起動","functionNameEN":"startUp","parametersName":["localUrl","isDebug"],"parametersDataType":["string_nullable","boolean"],"returnValue":"void","functionId":"01HN4KGWPV4T14H9AT0GMZYQJ0","beforeCode":"\n\n\n\n","innerCode":"\n  await startUp( localUrl, isDebug );   // 下層の関数を呼び出す\n  //\n  // テーブルを作成する\n  await reserveWord(\"input_group\"); // 予約語に登録\n  await runSqlWriteOnly(\n    `CREATE TABLE IF NOT EXISTS input_group (\n      input_group_id TEXT PRIMARY KEY,\n      view_id INTEGER NOT NULL,\n      table_id TEXT NOT NULL,\n      next_group_id TEXT,\n      next_column_id TEXT,\n      processing_order REAL NOT NULL,\n      UNIQUE (view_id, processing_order),\n      UNIQUE (next_group_id, next_column_id),\n      FOREIGN KEY (next_group_id) REFERENCES input_group(input_group_id)\n    );`,\n    {},\n  );\n  //\n  await reserveWord(\"input_elements\"); // 予約語に登録\n  await runSqlWriteOnly(\n    `CREATE TABLE IF NOT EXISTS input_elements (\n      view_column_id TEXT PRIMARY KEY,\n      input_group_id TEXT NOT NULL,\n      column_id TEXT NOT NULL,\n      input_type TEXT NOT NULL,\n      FOREIGN KEY (input_group_id) REFERENCES input_group(input_group_id)\n    );`,\n    {},\n  );\n  await _reload();    // メモリに再読み込み\n","afterCode":""},{"functionNameJP":"自動入力","functionNameEN":"autoFill","parametersName":["viewId","inputTexts","isAutoFill"],"parametersDataType":["number",{"string":"any"},"boolean"],"returnValue":{"string":"any"},"functionId":"01HN60TQ416N3PFR3RH8PH9ETF","beforeCode":"\n\n\n\nlet cacheData1 = {\n  // ビューカラムID: カラムID\n  //  34: \"c6\",\n};\n\nlet cacheData2 = {\n  //  viewId: [\n  //    { ... },\n  //  ],\n  //  32: [\n  //    {\n  //      inputGroupId: \"main.c8\",\n  //      viewColumnIdList: [ \"d5\", \"d2\", \"d83\", \"d66\" ],\n  //      tableId: \"t7\",\n  //      nextGroupId: \"main\",\n  //      nextColumnId: \"c8\"\n  //    }\n  //  ],\n};\n\n\nlet cacheData3 = {\n  // ビューカラムID: 入力方式\n  //  34: \"TEXTBOX\",\n};\n\n//【サブ関数】メモリに再読み込み\nasync function _reload() {\n  cacheData1 = {};\n  cacheData2 = {};\n  cacheData3 = {};\n  //------------------------------------------------------------\n  // cacheData1に代入する\n  const inputElements = await runSqlReadOnly(\n    `SELECT\n        view_column_id AS viewColumnId,\n        column_id AS columnId,\n        input_group_id AS inputGroupId,\n        input_type AS inputType\n      FROM input_elements;`,\n    {},\n  );\n  for( const { viewColumnId, columnId, inputType } of inputElements ){\n    cacheData1[viewColumnId] = columnId;\n    cacheData3[viewColumnId] = inputType;\n  }\n  //\n  //------------------------------------------------------------\n  // cacheData2に代入する\n  const viewColumnIds = {\n    // 入力例\n    //  inputGroupId: [ viewColumnId ],\n  };\n  for( const { viewColumnId, inputGroupId } of inputElements ){\n    if(!viewColumnIds[inputGroupId]){\n      viewColumnIds[inputGroupId] = [];\n    }\n    viewColumnIds[inputGroupId].push( viewColumnId );\n  }\n  const inputGroups = await runSqlReadOnly(\n    `SELECT\n        input_group_id AS inputGroupId,\n        view_id AS viewId,\n        table_id AS tableId,\n        next_group_id AS nextGroupId,\n        next_column_id AS nextColumnId\n      FROM input_group\n      ORDER BY view_id ASC, processing_order ASC;`,\n    {},\n  );\n  for( const { inputGroupId, viewId, tableId, nextGroupId, nextColumnId } of inputGroups ){\n    if(!cacheData2[viewId]){\n      cacheData2[viewId] = [];\n    }\n    let viewColumnIdList = viewColumnIds[inputGroupId];\n    if(!viewColumnIdList){\n      viewColumnIdList = [];\n    }\n    for( const viewColumnId of viewColumnIdList ){\n      const columnId = cacheData1[viewColumnId];\n      if( tableId !== await getTableId(columnId) ){\n        throw `指定されたテーブルIDとカラムIDの辻褄が合いません。\\nviewColumnId = ${viewColumnId}\\ntableId = ${tableId}\\ncolumnId = ${columnId}\\ninputGroups = ${JSON.stringify(inputGroups,null,2)}\\ninputElements = ${JSON.stringify(inputElements,null,2)}`;\n      }\n    }\n    cacheData2[viewId].push({\n      inputGroupId,\n      viewColumnIdList,\n      tableId,\n      nextGroupId,\n      nextColumnId\n    });\n  }\n  //------------------------------------------------------------\n}\n\n\n\n\n\n","innerCode":"\n  const conditions = {\n    // 代入例\n    // inputGroupId: {\n    //   columnId: マスターデータのレコードID\n    //   \"c7\": 87\n    // },\n    // \"main.c6\": {\n    //   \"c99\": 7\n    // }\n  };\n  if(!Array.isArray(cacheData2[viewId])){\n    throw `ビューの情報が見つかりません。`;\n  }\n  //\n  // 入力グループごとに繰り返す\n  for( let i=0; i<cacheData2[viewId].length; i++ ){\n    const {\n      inputGroupId,\n      viewColumnIdList,\n      tableId,\n      nextGroupId,\n      nextColumnId\n    } = cacheData2[viewId][i];\n    //\n    if( !conditions[inputGroupId] ){\n      conditions[inputGroupId] = {};\n    }\n    //\n    const result = await _autoFill_core({ \n      viewColumnIdList: viewColumnIdList,\n      tableId: tableId,\n      inputTexts: inputTexts,\n      conditions: conditions[inputGroupId],\n      isAutoFill: ( i < cacheData2[viewId].length-1 ), // 自動入力と予測変換の両方を行う または 予測変換のみ\n    });\n    inputTexts = {\n      ...structuredClone(inputTexts),\n      ...result.inputTextsAndAutocorrection,\n    };\n    if(!result.recordId) continue;\n    //\n    // マスターデータの入力欄を埋める\n    inputTexts = {\n      ...inputTexts,\n      ...await _fillMasterData_core( viewId, inputGroupId, result.recordData ),\n    };\n    //\n    // 子に情報を伝える\n    if(!nextGroupId || !nextColumnId) continue; \n    if( !conditions[nextGroupId] ){\n      conditions[nextGroupId] = {};\n    }\n    conditions[nextGroupId][nextColumnId] = result.recordId;\n  }\n  const result = structuredClone(inputTexts);\n  return result;\n","afterCode":""},{"functionNameJP":"【サブ関数】予測変換と自動入力","functionNameEN":"_autoFill","parametersName":["params"],"parametersDataType":[{"viewColumnIdList":["string"],"tableId":"string","inputTexts":{"string":"any"},"conditions":{"string":"any"},"isAutoFill":"boolean"}],"returnValue":{"inputTextsAndAutocorrection":{"string":"any"},"recordId":"number_nullable","recordData":"any"},"functionId":"01HN58GMB2K87PNTFY13M1782A","beforeCode":"\n\n\n\n\n","innerCode":"\n  let { viewColumnIdList, tableId, inputTexts, conditions, isAutoFill } = params;\n  //\n  const results = {\n    //  \"d8\": \"a\",\n    //  \"d8_option\": [ \"aaa\", \"aaaaaa\" ],\n  };\n  //\n  // 入力項目ごとに繰り返す（列ごとに繰り返す）\n  for(let viewColumnId of viewColumnIdList){\n    results[viewColumnId ] = inputTexts[viewColumnId ] ?? \"\";  // 結果\n  }\n  //\n  // 絞り込み条件を生成する\n  const newConditions = structuredClone({\n    ...conditions,  // 前の入力グループから引き継いだ条件\n    ...await _getConditions_core({ viewColumnIdList, inputTexts }), // 入力された文字列から生成した条件\n  });\n  // 別のテーブルの条件を除外する\n  for( const columnId in newConditions ){\n    if( tableId !== await getTableId(columnId) ){\n      delete newConditions[columnId];\n    }\n  }\n  //\n  // 入力項目ごとに繰り返す（列ごとに繰り返す）\n  for(let viewColumnId of viewColumnIdList){\n    const columnId = cacheData1[viewColumnId];\n    if(!columnId){\n      throw `columnIdがNULLです。`;\n    }\n    if( tableId !== await getTableId(columnId) ){\n      throw `指定されたテーブルIDとカラムIDの辻褄が合いません。\\nviewColumnId = ${viewColumnId}\\ntableId = ${tableId}\\ncolumnId = ${columnId}`;\n    }\n    const dataType = await getDataType( columnId );\n    const inputText = inputTexts[ viewColumnId ] ?? \"\";\n    if( dataType===\"FILE\" || dataType===\"BOOL\" || dataType===\"POINTER\" ){\n      results[ viewColumnId + \"_option\" ] = [];  // 予測変換を生成しない\n      continue; \n    }\n    else if( dataType===\"INTEGER\" || dataType===\"REAL\" || dataType===\"TEXT\" ){\n    }\n    else{\n      throw `サポートされていないデータ型です。`;\n    }\n    // 予測変換を生成する\n    const predictions = await _listPredictions_core({\n      inputText,\n      tableId,\n      columnId,\n      conditions: newConditions,\n    });\n    results[ viewColumnId + \"_option\" ] = predictions;  // 結果\n    //\n    if( predictions.length===1 ){\n      newConditions[columnId] = await formatField( predictions[0], columnId, false );\n    }\n    else if( predictions.length>=2 ){\n      // 予測が２件以上の場合、自動入力しない\n      isAutoFill = false;\n    }\n  }\n  if(isAutoFill===false){\n    return {\n      inputTextsAndAutocorrection: results,\n      recordId: null,\n      recordData: null,\n    };\n  }\n  //\n  const records = await _listRecords_core( tableId, newConditions, 10 );\n  if( records.length !== 1 ){\n    // 合致するデータが１件ではない場合\n    return {\n      inputTextsAndAutocorrection: results,\n      recordId: null,\n      recordData: null,\n    };\n  }\n  // 合致するデータが１件だけ存在する場合\n  //\n  const primaryKey = await getPrimaryKey( tableId );\n  const recordId = records[0][primaryKey];\n  if(!recordId){\n    throw `レコードIDを取得できませんでした`;\n  }\n  // 入力項目ごとに繰り返す（列ごとに繰り返す）\n  for(let viewColumnId of viewColumnIdList){\n    const columnId = cacheData1[viewColumnId];\n    // 自動入力を行う\n    // results[ viewColumnId ] = records[0][columnId];  // 結果\n  }\n  return {\n    inputTextsAndAutocorrection: results,\n    recordId: recordId,\n    recordData: records[0],\n  };\n","afterCode":""},{"functionNameJP":"【サブ関数】絞り込み条件を生成する","functionNameEN":"_getConditions","parametersName":["params"],"parametersDataType":[{"viewColumnIdList":["string"],"inputTexts":{"string":"any"}}],"returnValue":{"string":"any"},"functionId":"01HN4X78ZEAMMVMX5QGSBJP909","beforeCode":"\n\n\n\n\n\n\n\n","innerCode":"\n  let { viewColumnIdList, inputTexts } = params;\n  const conditions = {};\n  // 入力項目ごとに繰り返す（列ごとに繰り返す）\n  for(let viewColumnId of viewColumnIdList){\n    const columnId = cacheData1[viewColumnId];\n    const dataType = await getDataType( columnId );\n    const inputText = inputTexts[ viewColumnId ];\n    if( dataType===\"FILE\" ){\n      continue; // 条件には含めない\n    }\n    else if( dataType===\"INTEGER\" || dataType===\"REAL\" || dataType===\"POINTER\" || dataType===\"BOOL\" || dataType===\"TEXT\" ){\n      if(!inputText && isNaN(inputText)) continue; // 空欄は条件には含めない\n      try{\n        const data = await formatField( inputText, columnId, false );\n        if(!data) continue; // 空欄は条件には含めない\n        conditions[columnId] = data;  // 条件に加える\n      }\n      catch(err){}\n    }\n    else{\n      throw `サポートされていないデータ型です。`;\n    }\n  }\n  return conditions;\n","afterCode":""},{"functionNameJP":"【サブ関数】予測変換を取得する","functionNameEN":"_listPredictions","parametersName":["params"],"parametersDataType":[{"inputText":"string","tableId":"string","columnId":"string","conditions":{"string":"any"}}],"returnValue":["any"],"functionId":"01HN4WR4VHQRKMHBB031QWTG6C","beforeCode":"\n\n\n\n\n\n","innerCode":"\n  let { inputText, tableId, columnId, conditions } = params;\n  if( tableId !== await getTableId(columnId) ){\n    throw `指定されたテーブルIDとカラムIDの辻褄が合いません。`;\n  }\n  //\n  const dataType = await getDataType( columnId );\n  if( dataType===\"FILE\" ){\n    return []; // 予測変換を取得しない\n  }\n  else if( dataType===\"BOOL\" ){\n    return [\"true\",\"false\"];\n  }\n  else if( dataType===\"INTEGER\" || dataType===\"REAL\" || dataType===\"POINTER\" || dataType===\"TEXT\" ){\n    inputText = String( inputText ?? \"\" );\n  }\n  else{\n    throw `サポートされていないデータ型です。`;\n  }\n  //\n  const newConditions = structuredClone(conditions);\n  // 別のテーブルの条件を除外する\n  for( const columnId in newConditions ){\n    if( tableId !== await getTableId(columnId) ){\n      delete newConditions[columnId];\n    }\n  }\n  //\n  // 予測変換\n  let predictions = [];\n  if( inputText ){\n    delete newConditions[columnId];\n    predictions = await autoCorrect( tableId, columnId, inputText, newConditions );\n  }\n  else{\n    const records = await _listRecords_core( tableId, newConditions, 10 );\n    predictions = records.map( recordData => recordData[columnId] );\n  }\n  predictions = Array.from( new Set(predictions) );\n  //\n  // 配列の長さが20を超える場合に制限する\n  if (predictions.length >= 19) {\n    predictions = predictions.slice(0, 19);\n  }\n  return predictions;\n","afterCode":""},{"functionNameJP":"【サブ関数】レコードを取得","functionNameEN":"_listRecords","parametersName":["tableId","conditions","limitSize"],"parametersDataType":["string",{"string":"any"},"number"],"returnValue":[{"string":"any"}],"functionId":"01HN4TGGX3CFP9ZB0GQN5WQ702","beforeCode":"\n\n\n\n","innerCode":"\n  let sql = `\n    SELECT *\n      FROM ${tableId}`;\n  const whereTexts = [];\n  const statements = {};\n  for( const columnId in conditions ){\n    whereTexts.push( `${columnId} = :${columnId}`);\n    statements[`:${columnId}`] = conditions[columnId];\n  }\n  if(whereTexts.length>0){\n    sql += `\\n        WHERE ` + whereTexts.join(`\\n        AND `);\n  }\n  sql += `\n      ORDER BY sort_number DESC\n      LIMIT ${limitSize};`;\n  const result = await runSqlReadOnly( sql, statements );\n  return result;\n","afterCode":""},{"functionNameJP":"インメモリキャッシュを削除する","functionNameEN":"clearCache","parametersName":[],"parametersDataType":[],"returnValue":"void","functionId":"01HN5CW3NVNHWH3EJATQWYRSAA","beforeCode":"\n\n\n\n","innerCode":"\n    await _reload();    // メモリに再読み込み\n    return await clearCache();   // 下層の関数を呼び出す\n","afterCode":""},{"functionNameJP":"入力グループを作成","functionNameEN":"createInputGroup","parametersName":["inputGroupId","viewId","tableId","nextGroupId","nextColumnId","processingOrder"],"parametersDataType":["string","number","string","string_nullable","string_nullable","number"],"returnValue":"void","functionId":"01HN5K8W4EM5W13V65CWAPZFGC","beforeCode":"\n\n\n","innerCode":"\n  const inputGroups1 = await runSqlReadOnly(\n    `SELECT input_group_id AS inputGroupId\n      FROM input_group\n      WHERE input_group_id = :inputGroupId;`,\n    {\n      \":inputGroupId\": inputGroupId,\n    },\n  );\n  if( inputGroups1.length >= 1 ){\n    throw `入力グループを作成しようとしましたが失敗しました。入力グループIDが重複しています。`;\n  }\n  const inputGroups2 = await runSqlReadOnly(\n    `SELECT *\n      FROM input_group\n      WHERE view_id != :viewId\n      AND input_group_id = :nextGroupId;`,\n    {\n      \":viewId\": viewId,\n      \":nextGroupId\": nextGroupId,\n    },\n  );\n  if( inputGroups2.length >= 1 ){\n    throw `入力グループを作成しようとしましたが失敗しました。入力グループは、異なるビューに属する入力グループに情報を送ることはできません。`;\n  }\n  await runSqlWriteOnly(\n    `INSERT INTO input_group (\n      input_group_id,\n      view_id,\n      table_id,\n      next_group_id,\n      next_column_id,\n      processing_order\n    ) VALUES (\n      :inputGroupId,\n      :viewId,\n      :tableId,\n      :nextGroupId,\n      :nextColumnId,\n      :processingOrder\n    );`,\n    {\n      \":inputGroupId\": inputGroupId,\n      \":viewId\": viewId,\n      \":tableId\": tableId,\n      \":nextGroupId\": nextGroupId,\n      \":nextColumnId\": nextColumnId,\n      \":processingOrder\": processingOrder,\n    },\n  );\n  await _reload();    // メモリに再読み込み\n","afterCode":""},{"functionNameJP":"入力要素を作成","functionNameEN":"createInputElement","parametersName":["viewColumnId","inputGroupId","columnId"],"parametersDataType":["string","string","string"],"returnValue":"void","functionId":"01HN5Q36PJH1RKFA17Z2MS5C1Z","beforeCode":"\n\n\n\n","innerCode":"\n  const inputGroups = await runSqlReadOnly(\n    `SELECT\n        table_id AS tableId\n      FROM input_group\n      WHERE input_group_id = :inputGroupId\n      LIMIT 1;`,\n    {\n      \":inputGroupId\": inputGroupId,\n    },\n  );\n  if( inputGroups.length===0 ){\n    throw `入力要素を作り直そうとしましたが、所属している入力グループが見つかりません。\\ninputGroupId = ${inputGroupId}`;\n  }\n  const tableId = inputGroups[0].tableId;\n  if( tableId !== await getTableId(columnId) ){\n    throw `入力要素を作成しようとしましたが、指定されたテーブルIDとカラムIDの辻褄が合いません。\\nviewColumnId = ${viewColumnId}\\ntableId = ${tableId}\\ncolumnId = ${columnId}`;\n  }\n  const dataType = await getDataType( columnId );\n  let inputType = \"TEXTBOX\";\n  switch (dataType) {\n    case \"POINTER\":\n      throw \"POINTER型の入力要素を作ることはできません\";\n    case \"INTEGER\":\n      inputType = \"TEXTBOX_NUMBER\";\n      break;\n    case \"REAL\":\n      inputType = \"TEXTBOX_NUMBER\";\n      break;\n    case \"TEXT\":\n      inputType = \"TEXTBOX\";\n      break;\n    case \"BOOL\":\n      inputType = \"CHECKBOX\";\n      break;\n    default:\n      throw `サポートされていないデータ型です。detaType=\"${dataType}\"`;\n  }\n  await runSqlWriteOnly(\n    `INSERT INTO input_elements (\n      view_column_id,\n      input_group_id,\n      column_id,\n      input_type\n    ) VALUES (\n      :viewColumnId,\n      :inputGroupId,\n      :columnId,\n      :inputType\n    );`,\n    {\n      \":viewColumnId\": viewColumnId,\n      \":inputGroupId\": inputGroupId,\n      \":columnId\": columnId,\n      \":inputType\": inputType,\n    },\n  );\n  await _reload();    // メモリに再読み込み\n","afterCode":""},{"functionNameJP":"ビューを削除","functionNameEN":"deleteViewInput","parametersName":["viewId"],"parametersDataType":["number"],"returnValue":"void","functionId":"01HN5QKK4Q30KY4YY2P8H3T53D","beforeCode":"\n\n\n\n","innerCode":"\n  const inputGroups = await runSqlReadOnly(\n    `SELECT *\n      FROM input_group\n      WHERE view_id != :viewId\n      AND next_group_id IN (\n        SELECT input_group_id\n        FROM input_group\n        WHERE view_id = :viewId\n      );`,\n    {\n      \":viewId\": viewId,\n    },\n  );\n  if( inputGroups.length >= 1 ){\n    throw `ビューを削除しようとしましたが失敗しました。異なるビューの間で、入力グループが参照しています。このままビューを削除すると、外部キー制約違反が置きます。`;\n  }\n  await runSqlWriteOnly(\n    `DELETE FROM input_elements\n      WHERE input_group_id IN (\n        SELECT input_group_id\n        FROM input_group\n        WHERE view_id = :viewId\n      );`,\n    {\n      \":viewId\": viewId,\n    },\n  );\n  await runSqlWriteOnly(\n    `DELETE FROM input_group\n      WHERE view_id = :viewId;`,\n    {\n      \":viewId\": viewId,\n    },\n  );\n  await _reload();    // メモリに再読み込み\n","afterCode":""},{"functionNameJP":"入力方式を変更","functionNameEN":"changeInputType","parametersName":["viewColumnId","inputType"],"parametersDataType":["string","string"],"returnValue":"void","functionId":"01HN5RJEAQGDHR9SZYZK8CD7R1","beforeCode":"\n\n\n\n\n","innerCode":"\n  switch( inputType ){\n    case \"TEXTBOX\":\n      break;\n    case \"TEXTAREA\":\n      break;\n    case \"SELECT\":\n      break;\n    case \"NUMBER\":\n      break;\n    case \"DATE\":\n      break;\n    default:\n      throw `入力方式を変更しようとしましたが、サポートされていない入力方式が指定されました。\\ninputType = ${inputType}`;\n  }\n  await runSqlWriteOnly(\n    `UPDATE input_elements\n      SET input_type = :inputType\n      WHERE view_column_id = :viewColumnId;`,\n    {\n      \":inputType\": inputType,\n      \":viewColumnId\": viewColumnId,\n    },\n  );\n  await _reload();    // メモリに再読み込み\n","afterCode":""},{"functionNameJP":"【サブ関数】マスターデータの入力欄を埋める","functionNameEN":"_fillMasterData","parametersName":["viewId","childGroupId","childRecordData"],"parametersDataType":["number","string",{"string":"any"}],"returnValue":{"string":"any"},"functionId":"01HN6TKJTSA93ER4TQADKHYE4E","beforeCode":"\n\n\n\n\n","innerCode":"\n  return {};\n","afterCode":""},{"functionNameJP":"入力方式を取得","functionNameEN":"getInputType","parametersName":["viewColumnId"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HNHQJGCGNHHT0NX9F7JBBFP9","beforeCode":"\n\n","innerCode":"\n  return cacheData3[viewColumnId];\n","afterCode":""},{"functionNameJP":"レコードを上書き","functionNameEN":"updateRecordsFromView","parametersName":["viewId","inputTexts"],"parametersDataType":["number",[{"string":"any"}]],"returnValue":{"isSuccess":"boolean","userMessage":"string","outputTexts":[{"string":"any"}]},"functionId":"01HNMYH0RFT70BXKH9PV6CPZRN","beforeCode":"\n\n\n","innerCode":"\n  const recordDatas = [];\n  let tableId2;\n  let isSuccess = true;\n  const outputTexts = [];\n  // 行ごとに繰り返す\n  for( let i=0; i<inputTexts.length; i++ ){\n    outputTexts[i] = {};\n    if(!inputTexts[i][\"id\"]){\n      throw \"上書き対象のプライマリキー「id」が指定されていません\";\n    }\n    const {\n      isSuccess: flag,\n      tableId,\n      recordData,\n      outputTexts: messages\n    } = await _convertToRecord_core( viewId, inputTexts[i] );\n    if( flag===false ){\n      outputTexts[i] = messages;\n      isSuccess = false;\n      continue;\n    }\n    recordDatas.push({\n      ...recordData,\n      \"id\": inputTexts[i][\"id\"],\n    });\n    tableId2 = tableId;\n  }\n  if(isSuccess===true){\n    if( recordDatas.length===0 ){\n      throw \"上書きすべきレコードが０件です。\";\n    }\n    return {\n      \"isSuccess\": true,\n      \"outputTexts\": outputTexts,\n      \"userMessage\": await updateRecords( tableId2, recordDatas ),\n    };\n  }\n  else{\n    return {\n      \"isSuccess\": false,\n      \"outputTexts\": outputTexts,\n      \"userMessage\": \"登録に失敗しました。入力内容をご確認ください。\",\n    };\n  };\n","afterCode":""},{"functionNameJP":"レコードを追加","functionNameEN":"createRecordFromView","parametersName":["viewId","inputTexts"],"parametersDataType":["number",{"string":"any"}],"returnValue":{"userMessage":"string","isSuccess":"boolean","outputTexts":{"string":"any"}},"functionId":"01HNMYNN83WSKHC44TQVEZ5XP3","beforeCode":"\n\n\n","innerCode":"\n  const {\n    isSuccess,\n    tableId,\n    recordData,\n    outputTexts\n  } = await _convertToRecord_core( viewId, inputTexts );\n  if(isSuccess===true){\n    return {\n      ...await createRecord( tableId, recordData ),\n      \"isSuccess\": true,\n      \"outputTexts\": {},\n    };\n  }\n  else{\n    return {\n      \"isSuccess\": false,\n      \"outputTexts\": outputTexts,\n      \"userMessage\": \"登録に失敗しました。入力内容をご確認ください。\",\n    };\n  }\n","afterCode":""},{"functionNameJP":"【サブ関数】入力データをレコードに変換","functionNameEN":"_convertToRecord","parametersName":["viewId","inputTexts"],"parametersDataType":["number",{"string":"any"}],"returnValue":{"isSuccess":"boolean","tableId":"string","recordData":{"string":"any"},"outputTexts":{"string":"any"}},"functionId":"01HNMZ7DXP040NE7QWHAAF2QBB","beforeCode":"\n\n\n\n","innerCode":"\n  const conditions = {\n    // 代入例\n    // inputGroupId: {\n    //   columnId: マスターデータのレコードID\n    //   \"c7\": 87\n    // },\n    // \"main.c6\": {\n    //   \"c99\": 7\n    // }\n  };\n  const inputGroups = cacheData2[viewId];\n  if(!Array.isArray(inputGroups)){\n    throw `ビューの情報が見つかりません。`;\n  }\n  //\n  // 入力フォームに表示する値\n  const outputTexts = {};\n  let isSuccess = true;\n  //\n  // 入力グループごとに繰り返す（最後の一つ手前まで）\n  for( let j=0; j<inputGroups.length-1; j++ ){\n    const {\n      inputGroupId,\n      viewColumnIdList,\n      tableId,\n      nextGroupId,\n      nextColumnId\n    } = inputGroups[j];\n    //\n    if( !conditions[inputGroupId] ){\n      conditions[inputGroupId] = {};\n    }\n    //\n    // 絞り込み条件を生成する\n    const conditionThisGroup = structuredClone({\n      ...conditions[inputGroupId],  // 前の入力グループから引き継いだ条件\n      ...await _getConditions_core({ viewColumnIdList, inputTexts }), // 入力された文字列から生成した条件\n    });\n    //\n    const records = await _listRecords_core( tableId, conditionThisGroup, 1 );\n    if( records.length === 0 ){\n      // 合致するデータが見つからない場合\n      for(let viewColumnId of viewColumnIdList){\n        outputTexts[viewColumnId+\"_message\"] = \"該当なし\";\n      }\n      isSuccess = false;\n      continue;\n    }\n    // 合致するデータが１件以上存在する場合\n    const primaryKey = await getPrimaryKey( tableId );\n    const recordId = records[0][primaryKey];\n    //\n    // 子に情報を伝える\n    if(!nextGroupId || !nextColumnId) continue; \n    if( !conditions[nextGroupId] ){\n      conditions[nextGroupId] = {};\n    }\n    conditions[nextGroupId][nextColumnId] = recordId;\n  }\n  const {\n    inputGroupId,\n    viewColumnIdList,\n    tableId,\n  } = inputGroups[inputGroups.length-1];\n  if( !conditions[inputGroupId] ){\n    conditions[inputGroupId] = {};\n  }\n  //\n  // データベースに保存する値\n  const results = conditions[inputGroupId];\n  //\n  // 入力項目ごとに繰り返す（列ごとに繰り返す）\n  for(let viewColumnId of viewColumnIdList){\n    const columnId = cacheData1[viewColumnId];\n    if( tableId !== await getTableId( columnId ) ) continue;\n    const inputText = inputTexts[viewColumnId];\n    //\n    // 入力された文字を正規化する\n    let value;\n    try{\n      value = await formatField( inputText, columnId, false );\n    }\n    catch(err){\n      outputTexts[viewColumnId+\"_message\"] = String(err);\n      isSuccess = false;\n      continue;\n    }\n    results[columnId] = value;\n    //\n    // フィールドを検証する\n    const { isOK, message } = await checkField( columnId, value );\n    if( isOK===false ){\n      outputTexts[viewColumnId+\"_message\"] = message;\n      isSuccess = false;\n      continue;\n    }\n  }\n  return {\n    \"tableId\": tableId,\n    \"recordData\": results,\n    \"isSuccess\": isSuccess,\n    \"outputTexts\":outputTexts,\n  };\n","afterCode":""},{"functionNameJP":"不可逆的にテーブルを削除","functionNameEN":"deleteTable","parametersName":["tableId"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HP8JXK0AGJZ1GR3JY7BAQ055","beforeCode":"\n\n","innerCode":"\n    await runSqlWriteOnly(\n      `DELETE FROM input_elements\n        WHERE input_group_id IN (\n          SELECT input_group_id FROM input_group WHERE table_id = :tableId\n        );`,\n      {\n          \":tableId\": tableId,\n      },\n    );\n    await runSqlWriteOnly(\n      `DELETE FROM input_group WHERE table_id = :tableId;`,\n      {\n          \":tableId\": tableId,\n      },\n    );\n    await _reload();    // メモリに再読み込み\n    return await deleteTable( tableId );  // 下層の関数を実行する\n","afterCode":"\n"}]