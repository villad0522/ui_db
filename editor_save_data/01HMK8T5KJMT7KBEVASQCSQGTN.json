[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n  const sleep = msec => new Promise(resolve => setTimeout(resolve, msec));\n  await startUp(\"http://localhost:3000/\", false);\n  const customDirPath = await getPath(\"FRONTEND_CUSTOM\");\n  // フォルダを作成\n  if (  !fs.existsSync(path.join(customDirPath,\"qwert\"))  ) {\n    await fs.promises.mkdir(path.join(customDirPath,\"qwert\"));\n  }\n  // ファイルを作成\n  await fs.promises.writeFile(path.join(customDirPath,\"this_is_test.txt\"),\"ああああ\");\n  // ファイルを作成\n  await fs.promises.writeFile(path.join(customDirPath,\"./qwert/this_is_test.html\"),\"ああああ\");\n  // 監視イベントが反応するのを待つ\n  await sleep(1000);\n  // 再起動\n  await close();\n  await startUp(\"http://localhost:3000/\", false);\n  if (  !fs.existsSync(path.join(customDirPath,\"./qwert/this_is_test.html\"))  ) {\n    throw \"作ったはずのファイルが存在しません\";\n  }\n  // フォルダを削除\n  await fs.promises.rm(path.join(customDirPath,\"qwert\"),{recursive: true});\n  // ファイルを削除\n  await fs.promises.rm(path.join(customDirPath,\"this_is_test.txt\"));\n  // 監視イベントが反応するのを待つ\n  await sleep(1000);\n  //\n  await close();\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"プログラム起動","functionNameEN":"startUp","parametersName":["localUrl","isDebug"],"parametersDataType":["string_nullable","boolean"],"returnValue":"void","functionId":"01HMKJG97AQAD37DV74K6KXHS4","beforeCode":"\n\n\n\n\nimport fs from 'fs';\nimport path from 'path';\nimport chokidar from 'chokidar';\nimport { glob } from 'glob';\n\nlet watcher = null;\n\n","innerCode":"\n  await startUp( localUrl, isDebug ); // 下層の関数を呼び出す\n  //\n  const customDirPath = await getPath(\"FRONTEND_CUSTOM\");\n  //\n  // フォルダ「./src/frontend/custom」を削除する\n  await fs.promises.rm(customDirPath, { recursive: true });\n  //\n  // フォルダ「./src/frontend/custom」を作成する\n  if (!fs.existsSync(customDirPath)) {\n    fs.mkdirSync(customDirPath);   // フォルダが存在しなかったら、作成する\n  }\n  //\n  // テーブルを作成する\n  await reserveWord(\"frontend_files\"); // 予約語に登録\n  await runSqlWriteOnly(\n    `CREATE TABLE IF NOT EXISTS frontend_files (\n      \"file_path\" TEXT PRIMARY KEY,\n      \"file_data\" BLOB NOT NULL\n    );`, {},\n  );\n  if(!watcher){\n    //\n    // データベースからファイルデータを読み込んで、ローカルフォルダに書き出す\n    const files = await runSqlReadOnly(\n      `SELECT\n          file_path AS filePath,\n          file_data AS fileData\n        FROM frontend_files;`,\n      {},\n    );\n    for( const { filePath, fileData } of files ){\n      if( path.isAbsolute(filePath) ){\n        throw `フロントエンドファイルについて、データベースに絶対パスが保存されていました。本来は相対パスです。`;\n      }\n      await createDirectories_core( filePath );  // フォルダを作成\n      const fileFullPath = path.join( customDirPath, filePath );\n      try{\n        await fs.promises.writeFile( fileFullPath, fileData );\n      }\n      catch (error) {\n        console.error(`\\nフロントエンドファイルの書き出し中にエラーが発生しました`);\n        throw error;\n      }\n    }\n    //\n    // フォルダの中身を監視する\n    watcher = chokidar.watch(customDirPath, {\n        ignored: /(^|[\\/\\\\])\\~\\$/,  // エクセルの一時ファイルを無視（ 「~」から始まるファイル名）\n        persistent: true,\n    });\n    //\n    await new Promise((resolve, reject) => watcher.on('ready', resolve ));\n    watcher.on('add', function (filePath, stats) {\n      //console.log(`\\nフロントエンドにファイルが追加されました。\\n${filePath}`);\n      _handleEditFile( filePath );\n    });\n    watcher.on('change', function (filePath, stats) {\n      //console.log(`\\nフロントエンドのファイルが編集されました。\\n${filePath}`);\n      _handleEditFile( filePath );\n    });\n    watcher.on('unlink', function (filePath) {\n      //console.log(`\\nフロントエンドのファイルが削除されました。\\n${filePath}`);\n      _refleshFrontEndDB();\n    });\n    watcher.on('addDir', function (path) {\n      //console.log(`\\nフロントエンドにフォルダが追加されました。\\n${path}`);\n      // 何もしない\n    });\n    watcher.on('unlinkDir', function (path) {\n      //console.log(`\\nフロントエンドのフォルダが削除されました。\\n${path}`);\n      _refleshFrontEndDB();\n    });\n    watcher.on('error', function (path) {\n      //console.error(`\\nフロントエンドフォルダの監視中にエラーが発生しました。\\n${path}`);\n    });\n  }\n","afterCode":""},{"functionNameJP":"バックエンドプログラム終了","functionNameEN":"close","parametersName":[],"parametersDataType":[],"returnValue":"void","functionId":"01HMKJSMM4MEXX9R2VBZVYQ8ZV","beforeCode":"\n\n\n","innerCode":"\n  if(watcher){\n    await watcher.close();\n    watcher = null;\n  }\n  //\n  await close(); // 下層の関数を呼び出す\n  //\n  const customDirPath = await getPath(\"FRONTEND_CUSTOM\");\n  //\n  // フォルダ「./src/frontend/custom」を削除する\n  await fs.promises.rm(customDirPath, { recursive: true, force: true });\n","afterCode":""},{"functionNameJP":"フォルダを再帰的に作成","functionNameEN":"createDirectories","parametersName":["filePath"],"parametersDataType":["string"],"returnValue":"void","functionId":"01HMWHD0565DV1BRDQSPKARM3J","beforeCode":"\n\n\n\n","innerCode":"\n  const directories = path.dirname(filePath).split(path.sep);\n  let currentPath = await getPath(\"FRONTEND_CUSTOM\");\n  for (const directory of directories) {\n    currentPath = path.join(currentPath, directory);\n    if (fs.existsSync(currentPath)) continue; // フォルダが既に存在する場合\n    try {\n      await fs.promises.mkdir(currentPath);\n    }\n    catch (error) {\n      console.error(`\\nフォルダの作成中にエラーが発生しました`);\n      throw error;\n    }\n  }\n","afterCode":"\n\n\n// フォルダ構造を編集されたとき\n//  データベース上に存在するファイルデータを、全て書き換え\nasync function _refleshFrontEndDB(  ){\n  try{\n    await runSqlWriteOnly( `DELETE FROM frontend_files;`, {} );\n    const customDirPath = await getPath(\"FRONTEND_CUSTOM\");\n    const files = await glob( path.join(customDirPath,'/**/*') );\n    for( const filePath of files ){\n      await _handleEditFile( filePath );\n    }\n  }\n  catch( error ){\n    console.error(`\\nエラーが発生しました`);\n    console.error(`レイヤー : frontend_files`);\n    console.error(`関数 : refleshFrontEndDB`);\n    console.error(error);\n  }\n}\n\n\n\n// ファイルが編集されたとき\nasync function _handleEditFile( filePath ){\n  try{\n    const customDirPath = await getPath(\"FRONTEND_CUSTOM\");\n    await runSqlWriteOnly(\n      `INSERT OR REPLACE INTO frontend_files ( file_path, file_data )\n          VALUES ( :filePath, :fileData );`,\n      {\n          \":filePath\": path.relative( customDirPath, filePath ),\n          \":fileData\": await fs.promises.readFile(filePath),\n      },\n    );\n  }\n  catch( error ){\n    console.error(`\\nエラーが発生しました`);\n    console.error(`レイヤー : frontend_files`);\n    console.error(`関数 : handleEditFile`);\n    console.error(error);\n  }\n}\n"}]