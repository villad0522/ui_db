[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"データ移行","functionNameEN":"transferData","parametersName":["processName"],"parametersDataType":["TEXT"],"returnValue":"string","functionId":"01HP645KD6858XWT517DP8FP7Y","beforeCode":"\n\n\n","innerCode":"\n  switch( processName ){\n    case \"学部マスタ\":\n      return await masterFaculty_core();\n    case \"教室マスタ\":\n      return await masterLab_core();\n    case \"実験者マスタ\":\n      return await masterUser_core();\n    case \"動物種マスタ\":\n      return await masterSpecies_core();\n    case \"系統マスタ\":\n      return await masterPhylogeny_core();\n    case \"業者マスタ\":\n      return await masterCompany_core();\n    case \"由来マスタ\":\n      return await masterOrigin_core();\n    case \"購入規格マスタ\":\n      return await masterProductType_core();\n    case \"購入品マスタ\":\n      return await masterItem_core();\n    case \"支払マスタ\":\n      return await masterPayment_core();\n    case \"飼育室マスタ\":\n      return await masterRoom_core();\n    case \"管理費単価マスタ\":\n      return await masterPrice_core();\n    case \"飼育操作マスタ\":\n      return await masterAction_core();\n    case \"性別マスタ\":\n      return await masterSex_core();\n    case \"購入データ\":\n      return await buyData_core();\n    case \"飼育台帳データ\":\n      return await broodbookData_core();\n    case \"飼育履歴データ\":\n      return await historyData_core();\n    case \"動物増減データ\":\n      return await increaseAndDecreaseData_core();\n    case \"飼育数データ\":\n      return await numberOfAnimalData_core();\n    case \"予算実績データ\":\n      return await budgetData_core();\n    case \"請求データ\":\n      return await billData_core();\n    default:\n      throw \"データを移行しようとしましたが失敗しました。サポートされていない処理名です。\";\n  }\n","afterCode":""},{"functionNameJP":"学部マスタ","functionNameEN":"masterFaculty","parametersName":[],"parametersDataType":[],"returnValue":"string","functionId":"01HPDH715EK2XHF321BNYVJ03B","beforeCode":"\n\n\n","innerCode":"\n  // 処理に必要なテーブルが揃っているかをチェックする\n  await _checkSourceTable_core([ \"CSV_教室マスタ\" ]);\n  //\n  // 結果を書き込むテーブルとカラムを準備する\n  const t1 = await _clearTable_core(\"学部マスタ\");\n  await createColumn( t1, \"学部名\", \"TEXT\", null );\n  //\n  // データを移行する\n  await runSqlWriteOnly(\n    `INSERT INTO 学部マスタ (\n        学部名,\n        sort_number,\n        created_at,\n        updated_at\n      ) SELECT\n          列2,\n          IFNULL( 100 / CAST(列1 AS REAL), MAX(sort_number) / 1000 ) AS sort_number2,\n          MAX(created_at),\n          MAX(updated_at)\n        FROM CSV_教室マスタ\n        GROUP BY 列2;`,\n    {},\n  );\n  return \"データの移行が完了しました。\";\n","afterCode":""},{"functionNameJP":"教室マスタ","functionNameEN":"masterLab","parametersName":[],"parametersDataType":[],"returnValue":"string","functionId":"01HPDHCKKWTHK35GZG7S1KKWBY","beforeCode":"\n\n","innerCode":"\n  // 処理に必要なテーブルが揃っているかをチェックする\n  await _checkSourceTable_core([ \"CSV_教室マスタ\", \"学部マスタ\" ]);\n  //\n  // 結果を書き込むテーブルとカラムを準備する\n  const t1 = await _clearTable_core(\"教室マスタ\");\n  await createColumn( t1, \"教室名\", \"TEXT\", null );\n  await createColumn( t1, \"有効／無効\", \"BOOL\", null );\n  await createColumn( t1, \"所属学部\", \"POINTER\", await getTableIdFromName(\"学部マスタ\") );\n  await createColumn( t1, \"基礎/臨床\", \"TEXT\", null );\n  await createColumn( t1, \"教室コード\", \"TEXT\", null );\n  await createColumn( t1, \"教室略称\", \"TEXT\", null );\n  //\n  // データを移行する\n  await runSqlWriteOnly(\n    `INSERT INTO 教室マスタ (\n        教室コード,\n        有効／無効,\n        所属学部,\n        基礎/臨床,\n        教室略称,\n        教室名,\n        sort_number,\n        created_at,\n        updated_at\n      ) SELECT\n          列0,\n          1,\n          IFNULL( ${await getTableIdFromName(\"学部マスタ\")}_id, 列2 ),\n          列3,\n          列5,\n          列6,\n          IFNULL( 100 / CAST(列4 AS REAL), MAX(csv.sort_number) / 1000 ) AS sort_number2,\n          csv.created_at,\n          csv.updated_at\n        FROM CSV_教室マスタ AS csv\n        LEFT OUTER JOIN 学部マスタ\n          ON 列2 = 学部名\n        GROUP BY csv.sort_number;`,\n    {},\n  );\n  //\n  // 不要になったテーブルを削除する\n  await deleteTable(await getTableIdFromName(\"CSV_教室マスタ\"));\n  return \"データの移行が完了しました。\";\n","afterCode":""},{"functionNameJP":"実験者マスタ","functionNameEN":"masterUser","parametersName":[],"parametersDataType":[],"returnValue":"string","functionId":"01HPDHFAFK0654NF7W7TSTVPC2","beforeCode":"\n\n","innerCode":"\n  // 処理に必要なテーブルが揃っているかをチェックする\n  await _checkSourceTable_core([ \"CSV_実験者マスタ\", \"教室マスタ\" ]);\n  //\n  // 結果を書き込むテーブルとカラムを準備する\n  const t1 = await _clearTable_core(\"実験者マスタ\");\n  await createColumn( t1, \"氏名\", \"TEXT\", null );\n  await createColumn( t1, \"所属教室\", \"POINTER\", await getTableIdFromName(\"教室マスタ\") );\n  await createColumn( t1, \"有効／無効2\", \"BOOL\", null );\n  await createColumn( t1, \"実験者コード\", \"TEXT\", null );\n  //\n  // データを移行する\n  await runSqlWriteOnly(\n    `INSERT INTO 実験者マスタ (\n        所属教室,\n        実験者コード,\n        氏名,\n        有効／無効2,\n        sort_number,\n        created_at,\n        updated_at\n      ) SELECT\n          IFNULL( ${await getTableIdFromName(\"教室マスタ\")}_id, 列0 ),\n          列1,\n          列2,\n          1,\n          csv.sort_number,\n          csv.created_at,\n          csv.updated_at\n        FROM CSV_実験者マスタ AS csv\n        LEFT OUTER JOIN 教室マスタ\n          ON 列0 = 教室コード\n        GROUP BY csv.sort_number;`,\n    {},\n  );\n  //\n  // 不要になったテーブルを削除する\n  await deleteTable(await getTableIdFromName(\"CSV_実験者マスタ\"));\n  return \"データの移行が完了しました。\";\n","afterCode":""},{"functionNameJP":"動物種マスタ","functionNameEN":"masterSpecies","parametersName":[],"parametersDataType":[],"returnValue":"string","functionId":"01HPDHG2GY80152M4ZMK0ZTTMS","beforeCode":"\n\n","innerCode":"\n  // 処理に必要なテーブルが揃っているかをチェックする\n  await _checkSourceTable_core([ \"CSV_動物種マスタ\" ]);\n  //\n  // 結果を書き込むテーブルとカラムを準備する\n  const t1 = await _clearTable_core(\"動物種マスタ\");\n  await createColumn( t1, \"動物種名\", \"TEXT\", null );\n  await createColumn( t1, \"動物種番号\", \"INTEGER\", null );\n  //\n  // データを移行する\n  await runSqlWriteOnly(\n    `INSERT INTO 動物種マスタ (\n        動物種番号,\n        動物種名,\n        sort_number,\n        created_at,\n        updated_at\n      ) SELECT\n          列0,\n          列1,\n          csv.sort_number,\n          csv.created_at,\n          csv.updated_at\n        FROM CSV_動物種マスタ AS csv\n        GROUP BY csv.sort_number;`,\n    {},\n  );\n  //\n  // 不要になったテーブルを削除する\n  await deleteTable(await getTableIdFromName(\"CSV_動物種マスタ\"));\n  return \"データの移行が完了しました。\";\n","afterCode":""},{"functionNameJP":"系統マスタ","functionNameEN":"masterPhylogeny","parametersName":[],"parametersDataType":[],"returnValue":"string","functionId":"01HPDHHH0CYG31EJDYH8H76Q8G","beforeCode":"\n\n","innerCode":"\n  // 処理に必要なテーブルが揃っているかをチェックする\n  await _checkSourceTable_core([ \"CSV_系統マスタ\", \"動物種マスタ\" ]);\n  //\n  // 結果を書き込むテーブルとカラムを準備する\n  const t1 = await _clearTable_core(\"系統マスタ\");\n  await createColumn( t1, \"系統名\", \"TEXT\", null );\n  await createColumn( t1, \"動物種\", \"POINTER\", await getTableIdFromName(\"動物種マスタ\") );\n  await createColumn( t1, \"系統番号\", \"INTEGER\", null );\n  //\n  // データを移行する\n  await runSqlWriteOnly(\n    `INSERT INTO 系統マスタ (\n        系統番号,\n        系統名,\n        動物種,\n        sort_number,\n        created_at,\n        updated_at\n      ) SELECT\n          列0,\n          列1,\n          ${await getTableIdFromName(\"動物種マスタ\")}_id,\n          csv.sort_number,\n          csv.created_at,\n          csv.updated_at\n        FROM CSV_系統マスタ AS csv\n        LEFT OUTER JOIN 動物種マスタ\n          ON 列2 = 動物種番号\n        GROUP BY csv.sort_number;`,\n    {},\n  );\n  //\n  // 不要になったテーブルを削除する\n  await deleteTable(await getTableIdFromName(\"CSV_系統マスタ\"));\n  return \"データの移行が完了しました。\";\n","afterCode":""},{"functionNameJP":"業者マスタ","functionNameEN":"masterCompany","parametersName":[],"parametersDataType":[],"returnValue":"string","functionId":"01HPDJ053N5JDM11A7919VMZ7W","beforeCode":"\n\n","innerCode":"\n  // 処理に必要なテーブルが揃っているかをチェックする\n  await _checkSourceTable_core([ \"CSV_由来マスタ\" ]);\n  //\n  // 結果を書き込むテーブルとカラムを準備する\n  const t1 = await _clearTable_core(\"業者マスタ\");\n  await createColumn( t1, \"業者名\", \"TEXT\", null );\n  //\n  // データを移行する\n  await runSqlWriteOnly(\n    `INSERT INTO 業者マスタ (\n        業者名,\n        sort_number,\n        created_at,\n        updated_at\n      ) SELECT\n          列1,\n          MAX(sort_number),\n          MAX(created_at),\n          MAX(updated_at)\n        FROM CSV_由来マスタ\n        GROUP BY 列1;`,\n    {},\n  );\n  await runSqlWriteOnly(\n    `INSERT INTO 業者マスタ (\n        業者名,\n        sort_number,\n        created_at,\n        updated_at\n      ) SELECT\n          列11,\n          MAX(sort_number) * 100,\n          MAX(created_at),\n          MAX(updated_at)\n        FROM CSV_購入データ\n        GROUP BY 列11;`,\n    {},\n  );\n  return \"データの移行が完了しました。\";\n","afterCode":""},{"functionNameJP":"由来マスタ","functionNameEN":"masterOrigin","parametersName":[],"parametersDataType":[],"returnValue":"string","functionId":"01HPDHY9ZW5R3EPE6V9V8CXZSQ","beforeCode":"\n\n","innerCode":"\n  // 処理に必要なテーブルが揃っているかをチェックする\n  await _checkSourceTable_core([ \"CSV_由来マスタ\", \"動物種マスタ\", \"業者マスタ\" ]);\n  //\n  // 結果を書き込むテーブルとカラムを準備する\n  const t1 = await _clearTable_core(\"由来マスタ\");\n  await createColumn( t1, \"動物種\", \"POINTER\", await getTableIdFromName(\"動物種マスタ\") );\n  await createColumn( t1, \"仕入業者\", \"POINTER\", await getTableIdFromName(\"業者マスタ\") );\n  await createColumn( t1, \"由来番号\", \"INTEGER\", null );\n  //\n  // データを移行する\n  await runSqlWriteOnly(\n    `INSERT INTO 由来マスタ (\n        動物種,\n        仕入業者,\n        由来番号,\n        sort_number,\n        created_at,\n        updated_at\n      ) SELECT\n          ${await getTableIdFromName(\"動物種マスタ\")}_id,\n          ${await getTableIdFromName(\"業者マスタ\")}_id,\n          列0,\n          MAX(csv.sort_number),\n          MAX(csv.created_at),\n          MAX(csv.updated_at)\n        FROM CSV_由来マスタ AS csv\n        LEFT OUTER JOIN 動物種マスタ\n          ON 列2 = 動物種番号\n        LEFT OUTER JOIN 業者マスタ\n          ON 列1 = 業者名\n        GROUP BY csv.sort_number;`,\n    {},\n  );\n  await deleteTable(await getTableIdFromName(\"CSV_由来マスタ\"));\n  return \"データの移行が完了しました。\";\n","afterCode":""},{"functionNameJP":"購入規格マスタ","functionNameEN":"masterProductType","parametersName":[],"parametersDataType":[],"returnValue":"string","functionId":"01HPDHZDN5XSDEBH5X9GT424FA","beforeCode":"\n\n","innerCode":"\n  // 処理に必要なテーブルが揃っているかをチェックする\n  await _checkSourceTable_core([ \"CSV_購入規格マスタ\" ]);\n  //\n  // 結果を書き込むテーブルとカラムを準備する\n  const t1 = await _clearTable_core(\"購入規格マスタ\");\n  await createColumn( t1, \"規格名\", \"TEXT\", null );\n  //\n  // データを移行する\n  await runSqlWriteOnly(\n    `INSERT INTO 購入規格マスタ (\n        規格名,\n        sort_number,\n        created_at,\n        updated_at\n      ) SELECT\n          列0,\n          MAX(sort_number),\n          MAX(created_at),\n          MAX(updated_at)\n        FROM CSV_購入規格マスタ\n        GROUP BY sort_number;`,\n    {},\n  );\n  await deleteTable(await getTableIdFromName(\"CSV_購入規格マスタ\"));\n  return \"データの移行が完了しました。\";\n","afterCode":""},{"functionNameJP":"購入品マスタ","functionNameEN":"masterItem","parametersName":[],"parametersDataType":[],"returnValue":"string","functionId":"01HPDHZMVBHDM99PPA1YY90JRS","beforeCode":"\n\n","innerCode":"\n  // 処理に必要なテーブルが揃っているかをチェックする\n  await _checkSourceTable_core([ \"CSV_購入品マスタ\" ]);\n  //\n  // 結果を書き込むテーブルとカラムを準備する\n  const t1 = await _clearTable_core(\"購入品マスタ\");\n  await createColumn( t1, \"購入品名\", \"TEXT\", null );\n  await createColumn( t1, \"単価\", \"REAL\", null );\n  await createColumn( t1, \"消費税を自動計算する？\", \"BOOL\", null );\n  await createColumn( t1, \"購入品コード\", \"TEXT\", null );\n  //\n  // データを移行する\n  await runSqlWriteOnly(\n    `INSERT INTO 購入品マスタ (\n        購入品名,\n        単価,\n        消費税を自動計算する？,\n        購入品コード,\n        sort_number,\n        created_at,\n        updated_at\n      ) SELECT\n          列1,\n          列2,\n          列3,\n          列0,\n          MAX(sort_number),\n          MAX(created_at),\n          MAX(updated_at)\n        FROM CSV_購入品マスタ\n        GROUP BY sort_number;`,\n    {},\n  );\n  await deleteTable(await getTableIdFromName(\"CSV_購入品マスタ\"));\n  return \"データの移行が完了しました。\";\n","afterCode":""},{"functionNameJP":"支払マスタ","functionNameEN":"masterPayment","parametersName":[],"parametersDataType":[],"returnValue":"string","functionId":"01HPDJ0T177EYNZAYKD0M6RT4K","beforeCode":"\n\n","innerCode":"\n  // 処理に必要なテーブルが揃っているかをチェックする\n  await _checkSourceTable_core([ \"CSV_支払マスタ\" ]);\n  //\n  // 結果を書き込むテーブルとカラムを準備する\n  const t1 = await _clearTable_core(\"支払マスタ\");\n  await createColumn( t1, \"支払い方法\", \"TEXT\", null );\n  await createColumn( t1, \"オンオフ？\", \"BOOL\", null );\n  await createColumn( t1, \"支払い方法ID\", \"INTEGER\", null );\n  //\n  // データを移行する\n  await runSqlWriteOnly(\n    `INSERT INTO 支払マスタ (\n        支払い方法,\n        オンオフ？,\n        支払い方法ID,\n        sort_number,\n        created_at,\n        updated_at\n      ) SELECT\n          列1,\n          列2,\n          列0,\n          MAX(sort_number),\n          MAX(created_at),\n          MAX(updated_at)\n        FROM CSV_支払マスタ\n        GROUP BY sort_number;`,\n    {},\n  );\n  await deleteTable(await getTableIdFromName(\"CSV_支払マスタ\"));\n  return \"データの移行が完了しました。\";\n","afterCode":""},{"functionNameJP":"飼育室マスタ","functionNameEN":"masterRoom","parametersName":[],"parametersDataType":[],"returnValue":"string","functionId":"01HPDJ177WKK2N4B8MD3CRXN3Q","beforeCode":"\n\n","innerCode":"\n  // 処理に必要なテーブルが揃っているかをチェックする\n  await _checkSourceTable_core([ \"CSV_Roomマスタ\" ]);\n  //\n  // 結果を書き込むテーブルとカラムを準備する\n  const t1 = await _clearTable_core(\"フロアマスタ\");\n  await createColumn( t1, \"フロア（１階～４階）\", \"INTEGER\", null );\n  const t2 = await _clearTable_core(\"飼育室マスタ\");\n  await createColumn( t2, \"飼育室名\", \"TEXT\", null );\n  await createColumn( t2, \"フロア\", \"POINTER\", t1 );\n  await createColumn( t2, \"有効／無効\", \"BOOL\", null );\n  //\n  // データを移行する\n  await runSqlWriteOnly(\n    `INSERT INTO 飼育室マスタ (\n        飼育室名,\n        有効／無効,\n        sort_number,\n        created_at,\n        updated_at\n      ) SELECT\n          列0,\n          1,\n          MAX(sort_number),\n          MAX(created_at),\n          MAX(updated_at)\n        FROM CSV_Roomマスタ\n        GROUP BY sort_number;`,\n    {},\n  );\n  await deleteTable(await getTableIdFromName(\"CSV_Roomマスタ\"));\n  return \"データの移行が完了しました。\";\n","afterCode":""},{"functionNameJP":"管理費単価マスタ","functionNameEN":"masterPrice","parametersName":[],"parametersDataType":[],"returnValue":"string","functionId":"01HPDJ1SVKZ134P58GKMZ3BEP5","beforeCode":"\n\n","innerCode":"\n  // 処理に必要なテーブルが揃っているかをチェックする\n  await _checkSourceTable_core([ \"CSV_管理費単価マスタ\", \"動物種マスタ\" ]);\n  //\n  // 結果を書き込むテーブルとカラムを準備する\n  const t1 = await _clearTable_core(\"管理費単価マスタ\");\n  await createColumn( t1, \"飼料規格名\", \"TEXT\", null );\n  await createColumn( t1, \"単価\", \"REAL\", null );\n  await createColumn( t1, \"動物種\", \"POINTER\", await getTableIdFromName(\"動物種マスタ\") );\n  await createColumn( t1, \"飼料コード\", \"TEXT\", null );\n  //\n  // データを移行する\n  await runSqlWriteOnly(\n    `INSERT INTO 管理費単価マスタ (\n        飼料規格名,\n        単価,\n        動物種,\n        飼料コード,\n        sort_number,\n        created_at,\n        updated_at\n      ) SELECT\n          列2,\n          列3,\n          ${await getTableIdFromName(\"動物種マスタ\")}_id,\n          列0,\n          MAX(csv.sort_number),\n          MAX(csv.created_at),\n          MAX(csv.updated_at)\n        FROM CSV_管理費単価マスタ AS csv\n        LEFT OUTER JOIN 動物種マスタ\n          ON 列4 = 動物種番号\n        GROUP BY csv.sort_number;`,\n    {},\n  );\n  await deleteTable(await getTableIdFromName(\"CSV_管理費単価マスタ\"));\n  return \"データの移行が完了しました。\";\n","afterCode":""},{"functionNameJP":"飼育操作マスタ","functionNameEN":"masterAction","parametersName":[],"parametersDataType":[],"returnValue":"string","functionId":"01HPES44QCDCQXPBA5ZQS6KKFX","beforeCode":"\n\n\n\n","innerCode":"\n  // 処理に必要なテーブルが揃っているかをチェックする\n  await _checkSourceTable_core([ \"CSV_コンスタントマスタ\", \"CSV_飼育台帳データ\" ]);\n  //\n  // 結果を書き込むテーブルとカラムを準備する\n  const t1 = await _clearTable_core(\"飼育操作マスタ\");\n  await createColumn( t1, \"操作名\", \"TEXT\", null );\n  await createColumn( t1, \"操作番号（1～10）\", \"INTEGER\", null );\n  await createColumn( t1, \"操作番号（1～A）\", \"TEXT\", null );\n  //\n  // データを移行する\n  await runSqlWriteOnly(\n    `INSERT INTO 飼育操作マスタ (\n        操作名,\n        操作番号（1～10）,\n        操作番号（1～A）,\n        sort_number,\n        created_at,\n        updated_at\n      ) SELECT\n          列6,\n          列2,\n          列5,\n          MAX(sort_number),\n          MAX(created_at),\n          MAX(updated_at)\n        FROM CSV_コンスタントマスタ\n        GROUP BY sort_number;`,\n    {},\n  );\n  await runSqlWriteOnly(\n    `INSERT INTO 飼育操作マスタ (\n        操作名,\n        sort_number,\n        created_at,\n        updated_at\n      ) SELECT\n          列27,\n          MAX(sort_number),\n          MAX(created_at),\n          MAX(updated_at)\n        FROM CSV_飼育台帳データ\n        GROUP BY 列27;`,\n    {},\n  );\n  await deleteTable(await getTableIdFromName(\"CSV_コンスタントマスタ\"));\n  return \"データの移行が完了しました。\";\n","afterCode":""},{"functionNameJP":"性別マスタ","functionNameEN":"masterSex","parametersName":[],"parametersDataType":[],"returnValue":"string","functionId":"01HPEX1N6712JBFYXMWG1JTVJR","beforeCode":"\n\n\n","innerCode":"\n  // 処理に必要なテーブルが揃っているかをチェックする\n  await _checkSourceTable_core([ \"CSV_飼育台帳データ\" ]);\n  //\n  // 結果を書き込むテーブルとカラムを準備する\n  const t1 = await _clearTable_core(\"性別マスタ\");\n  await createColumn( t1, \"性別\", \"TEXT\", null );\n  //\n  // データを移行する\n  await runSqlWriteOnly(\n    `INSERT INTO 性別マスタ (\n        性別,\n        sort_number,\n        created_at,\n        updated_at\n      ) SELECT\n          列7,\n          MAX(sort_number),\n          MAX(created_at),\n          MAX(updated_at)\n        FROM CSV_飼育台帳データ\n        GROUP BY 列7;`,\n    {},\n  );\n  return \"データの移行が完了しました。\";\n","afterCode":""},{"functionNameJP":"購入データ","functionNameEN":"buyData","parametersName":[],"parametersDataType":[],"returnValue":"string","functionId":"01HPDJK8PC3GVN4AD31GQYJ17M","beforeCode":"\n\n\n\n\n\n\n","innerCode":"\n  // 処理に必要なテーブルが揃っているかをチェックする\n  await _checkSourceTable_core([\n    \"CSV_購入データ\",\n    \"支払マスタ\",\n    \"教室マスタ\",\n    \"実験者マスタ\",\n    \"購入品マスタ\",\n    \"系統マスタ\",\n    \"購入規格マスタ\",\n    \"性別マスタ\",\n    \"業者マスタ\",\n  ]);\n  //\n  // 結果を書き込むテーブルとカラムを準備する\n  const t1 = await _clearTable_core(\"購入データ\");\n  await createColumn( t1, \"発注番号\", \"INTEGER\", null );\n  await createColumn( t1, \"請求年度\", \"INTEGER\", null );\n  await createColumn( t1, \"請求月\", \"INTEGER\", null );\n  await createColumn( t1, \"請求日時\", \"INTEGER\", null );\n  await createColumn( t1, \"支払区分\", \"POINTER\", await getTableIdFromName(\"支払マスタ\") );\n  await createColumn( t1, \"教室\", \"POINTER\", await getTableIdFromName(\"教室マスタ\") );\n  await createColumn( t1, \"実験者\", \"POINTER\", await getTableIdFromName(\"実験者マスタ\") );\n  await createColumn( t1, \"入荷日時\", \"INTEGER\", null );\n  await createColumn( t1, \"購入品\", \"POINTER\", await getTableIdFromName(\"購入品マスタ\") );\n  await createColumn( t1, \"系統\", \"POINTER\", await getTableIdFromName(\"系統マスタ\") );\n  await createColumn( t1, \"購入規格\", \"POINTER\", await getTableIdFromName(\"購入規格マスタ\") );\n  await createColumn( t1, \"性別2\", \"POINTER\", await getTableIdFromName(\"性別マスタ\") );\n  await createColumn( t1, \"業者\", \"POINTER\", await getTableIdFromName(\"業者マスタ\") );\n  await createColumn( t1, \"数量\", \"REAL\", null );\n  await createColumn( t1, \"単価2\", \"REAL\", null );\n  await createColumn( t1, \"金額\", \"REAL\", null );\n  await createColumn( t1, \"消費税\", \"REAL\", null );\n  await createColumn( t1, \"税込額\", \"REAL\", null );\n  //\n  // データを移行する\n  await runSqlWriteOnly(\n    `INSERT INTO 購入データ (\n        支払区分,\n        教室,\n        実験者,\n        請求年度,\n        請求月,\n        請求日時,\n        入荷日時,\n        発注番号,\n        購入品,\n        系統,\n        購入規格,\n        性別2,\n        業者,\n        数量,\n        単価2,\n        金額,\n        消費税,\n        税込額,\n        sort_number,\n        created_at,\n        updated_at\n      ) SELECT\n          IFNULL( ${await getTableIdFromName(\"支払マスタ\")}_id, 列0 ),\n          IFNULL( ${await getTableIdFromName(\"教室マスタ\")}_id, 列1 ),\n          IFNULL( ${await getTableIdFromName(\"実験者マスタ\")}_id, 列2 ),\n          CAST( STRFTIME( '%Y', 列3 / 1000, 'UNIXEPOCH', 'LOCALTIME', '-3 MONTHS', 'START OF YEAR' ) AS INTEGER ) AS '請求年度',\n          CAST( STRFTIME('%m', 列3 / 1000, 'UNIXEPOCH', 'LOCALTIME' ) AS INTEGER ) AS '請求月',\n          列3,\n          列4,\n          CAST( 列5 AS INTEGER ),\n          IFNULL( ${await getTableIdFromName(\"購入品マスタ\")}_id, 列6 ),\n          IFNULL( ${await getTableIdFromName(\"系統マスタ\")}_id, 列8 ),\n          IFNULL( ${await getTableIdFromName(\"購入規格マスタ\")}_id, 列9 ),\n          IFNULL( ${await getTableIdFromName(\"性別マスタ\")}_id, 列10 ),\n          IFNULL( ${await getTableIdFromName(\"業者マスタ\")}_id, 列11 ),\n          CAST( 列14 AS INTEGER ),\n          CAST( LTRIM( 列15, '\\\\' ) AS REAL ),\n          CAST( LTRIM( 列16, '\\\\' ) AS REAL ),\n          CAST( LTRIM( 列17, '\\\\' ) AS REAL ),\n          CAST( LTRIM( 列18, '\\\\' ) AS REAL ),\n          csv.sort_number,\n          csv.created_at,\n          csv.updated_at\n        FROM CSV_購入データ AS csv\n        LEFT OUTER JOIN 支払マスタ\n          ON 列0 = 支払い方法ID\n        LEFT OUTER JOIN 教室マスタ\n          ON 列1 = 教室コード\n        LEFT OUTER JOIN 実験者マスタ\n          ON 列2 = 実験者コード\n        LEFT OUTER JOIN 購入品マスタ\n          ON 列6 = 購入品コード\n        LEFT OUTER JOIN 系統マスタ\n          ON 列8 = 系統名\n        LEFT OUTER JOIN 購入規格マスタ\n          ON 列9 = 規格名\n        LEFT OUTER JOIN 性別マスタ\n          ON 列10 = 性別\n        LEFT OUTER JOIN 業者マスタ\n          ON 列11 = 業者名\n        GROUP BY csv.sort_number;`,\n    {},\n  );\n  return \"データの移行が完了しました。\";\n","afterCode":""},{"functionNameJP":"飼育台帳データ","functionNameEN":"broodbookData","parametersName":[],"parametersDataType":[],"returnValue":"string","functionId":"01HPDJ4602NY3VV8N9AWF36F1A","beforeCode":"\n\n\n\n\n\n\n\n\n","innerCode":"\n  // 処理に必要なテーブルが揃っているかをチェックする\n  await _checkSourceTable_core([\n    \"CSV_飼育台帳データ\",\n    \"支払マスタ\",\n    \"教室マスタ\",\n    \"実験者マスタ\",\n    \"動物種マスタ\",\n    \"系統マスタ\",\n    \"性別マスタ\",\n    \"管理費単価マスタ\",\n    \"飼育室マスタ\",\n    \"購入規格マスタ\",\n    \"業者マスタ\",\n    \"購入データ\",\n  ]);\n  //\n  // 結果を書き込むテーブルとカラムを準備する\n  const t1 = await _clearTable_core(\"飼育台帳データ\");\n  await createColumn( t1, \"入舎年度\", \"INTEGER\", null );\n  await createColumn( t1, \"入舎月\", \"INTEGER\", null );\n  await createColumn( t1, \"入舎日時\", \"INTEGER\", null );\n  await createColumn( t1, \"支払区分\", \"POINTER\", await getTableIdFromName(\"支払マスタ\") );\n  await createColumn( t1, \"教室\", \"POINTER\", await getTableIdFromName(\"教室マスタ\") );\n  await createColumn( t1, \"実験者\", \"POINTER\", await getTableIdFromName(\"実験者マスタ\") );\n  await createColumn( t1, \"動物種2\", \"POINTER\", await getTableIdFromName(\"動物種マスタ\") );\n  await createColumn( t1, \"系統\", \"POINTER\", await getTableIdFromName(\"系統マスタ\") );\n  await createColumn( t1, \"ケージ番号\", \"TEXT\", null );\n  await createColumn( t1, \"ケージサブ番号\", \"TEXT\", null );\n  await createColumn( t1, \"性別2\", \"POINTER\", await getTableIdFromName(\"性別マスタ\") );\n  await createColumn( t1, \"飼料\", \"POINTER\", await getTableIdFromName(\"管理費単価マスタ\") );\n  await createColumn( t1, \"飼育室\", \"POINTER\", await getTableIdFromName(\"飼育室マスタ\") );\n  await createColumn( t1, \"床（C）\", \"TEXT\", null );\n  await createColumn( t1, \"退舎年度\", \"INTEGER\", null );\n  await createColumn( t1, \"退舎月\", \"INTEGER\", null );\n  await createColumn( t1, \"退舎日時\", \"INTEGER\", null );\n  await createColumn( t1, \"餌期\", \"INTEGER\", null );\n  await createColumn( t1, \"退舎予定日\", \"INTEGER\", null );\n  await createColumn( t1, \"出生日\", \"INTEGER\", null );\n  await createColumn( t1, \"購入規格\", \"POINTER\", await getTableIdFromName(\"購入規格マスタ\") );\n  await createColumn( t1, \"業者\", \"POINTER\", await getTableIdFromName(\"業者マスタ\") );\n  await createColumn( t1, \"コメント\", \"TEXT\", null );\n  await createColumn( t1, \"アニマルセンター備考欄\", \"TEXT\", null );\n  await createColumn( t1, \"発注番号2\", \"POINTER\", await getTableIdFromName(\"購入データ\") );\n  //\n  // データを移行する\n  await runSqlWriteOnly(\n    `INSERT INTO 飼育台帳データ (\n        支払区分,\n        教室,\n        実験者,\n        動物種2,\n        系統,\n        ケージ番号,\n        ケージサブ番号,\n        性別2,\n        飼料,\n        飼育室,\n        床（C）,\n        入舎日時,\n        入舎年度,\n        入舎月,\n        退舎日時,\n        退舎年度,\n        退舎月,\n        餌期,\n        退舎予定日,\n        出生日,\n        購入規格,\n        業者,\n        発注番号2,\n        コメント,\n        アニマルセンター備考欄,\n        sort_number,\n        created_at,\n        updated_at\n      ) SELECT\n          IFNULL( ${await getTableIdFromName(\"支払マスタ\")}_id, 列0 ),\n          IFNULL( ${await getTableIdFromName(\"教室マスタ\")}_id, 列1 ),\n          IFNULL( ${await getTableIdFromName(\"実験者マスタ\")}_id, 列2 ),\n          IFNULL( ${await getTableIdFromName(\"動物種マスタ\")}_id, 列3 ),\n          IFNULL( ${await getTableIdFromName(\"系統マスタ\")}_id, 列4 ),\n          列5,\n          列6,\n          IFNULL( ${await getTableIdFromName(\"性別マスタ\")}_id, 列7 ),\n          IFNULL( ${await getTableIdFromName(\"管理費単価マスタ\")}_id, 列8 ),\n          IFNULL( ${await getTableIdFromName(\"飼育室マスタ\")}_id, 列9 ),\n          列11,\n          列14,\n          CAST( STRFTIME( '%Y', 列14 / 1000, 'UNIXEPOCH', 'LOCALTIME', '-3 MONTHS', 'START OF YEAR' ) AS INTEGER ),\n          CAST( STRFTIME( '%m', 列14 / 1000, 'UNIXEPOCH', 'LOCALTIME' ) AS INTEGER ),\n          列15,\n          CAST( STRFTIME( '%Y', 列15 / 1000, 'UNIXEPOCH', 'LOCALTIME', '-3 MONTHS', 'START OF YEAR' ) AS INTEGER ),\n          CAST( STRFTIME( '%m', 列15 / 1000, 'UNIXEPOCH', 'LOCALTIME' ) AS INTEGER ),\n          列16,\n          列17,\n          列18,\n          IFNULL( ${await getTableIdFromName(\"購入規格マスタ\")}_id, 列20 ),\n          IFNULL( ${await getTableIdFromName(\"業者マスタ\")}_id, 列21 ),\n          IFNULL( ${await getTableIdFromName(\"購入データ\")}_id, 列25 ),\n          列23,\n          列24,\n          csv.sort_number,\n          csv.created_at,\n          csv.updated_at\n        FROM CSV_飼育台帳データ AS csv\n        LEFT OUTER JOIN 支払マスタ\n          ON 列0 = 支払い方法ID\n        LEFT OUTER JOIN 教室マスタ\n          ON 列1 = 教室コード\n        LEFT OUTER JOIN 実験者マスタ\n          ON 列2 = 実験者コード\n        LEFT OUTER JOIN 動物種マスタ\n          ON 列3 = 動物種番号\n        LEFT OUTER JOIN 系統マスタ\n          ON 列4 = 系統番号\n        LEFT OUTER JOIN 性別マスタ\n          ON 列7 = 性別\n        LEFT OUTER JOIN 管理費単価マスタ\n          ON 列8 = 飼料コード\n        LEFT OUTER JOIN 飼育室マスタ\n          ON 列9 = 飼育室名\n        LEFT OUTER JOIN 購入規格マスタ\n          ON 列20 = 規格名\n        LEFT OUTER JOIN 業者マスタ\n          ON 列21 = 業者名\n        LEFT OUTER JOIN 購入データ\n          ON 列25 = 発注番号\n        GROUP BY csv.sort_number;`,\n    {},\n  );\n  return \"データの移行が完了しました。\";\n","afterCode":""},{"functionNameJP":"飼育履歴データ","functionNameEN":"historyData","parametersName":[],"parametersDataType":[],"returnValue":"string","functionId":"01HPDJ57NAC2AD9786E2R0MGQT","beforeCode":"\n\n","innerCode":"\n  return \"データの移行が完了しました。\";\n","afterCode":""},{"functionNameJP":"動物増減データ","functionNameEN":"increaseAndDecreaseData","parametersName":[],"parametersDataType":[],"returnValue":"string","functionId":"01HPDJAJPY4YBWRJMGJGJMBDKP","beforeCode":"\n\n","innerCode":"\n  return \"データの移行が完了しました。\";\n","afterCode":""},{"functionNameJP":"飼育数データ","functionNameEN":"numberOfAnimalData","parametersName":[],"parametersDataType":[],"returnValue":"string","functionId":"01HPDJEMNXTA5Y1JK601MNJ16M","beforeCode":"\n\n","innerCode":"\n  return \"データの移行が完了しました。\";\n","afterCode":""},{"functionNameJP":"予算実績データ","functionNameEN":"budgetData","parametersName":[],"parametersDataType":[],"returnValue":"string","functionId":"01HPDJFPNCBWJYP941MN7J22W8","beforeCode":"\n\n","innerCode":"\n  return \"データの移行が完了しました。\";\n","afterCode":""},{"functionNameJP":"請求データ","functionNameEN":"billData","parametersName":[],"parametersDataType":[],"returnValue":"string","functionId":"01HPDJJA3G1EGFS6Q5P55T9EY4","beforeCode":"\n\n","innerCode":"\n  return \"データの移行が完了しました。\";\n","afterCode":""},{"functionNameJP":"【サブ】テーブルを作り直す","functionNameEN":"_clearTable","parametersName":["tableName"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HPDYBDNB3QHQ6D1M11HK9GYB","beforeCode":"\n\n","innerCode":"\n  const oldTableId = await getTableIdFromName(tableName);\n  if( oldTableId ){\n    await deleteTable(oldTableId);\n  }\n  const { tableId: newTableId } = await createTable(tableName);\n  return newTableId;\n","afterCode":""},{"functionNameJP":"【サブ】テーブルの存在をチェックする","functionNameEN":"_checkSourceTable","parametersName":["tableNames"],"parametersDataType":[["string"]],"returnValue":"void","functionId":"01HPDZ7KZCS2P4KBJZPV7HN5HE","beforeCode":"\n\n","innerCode":"\n  for( const tableName of tableNames ){\n    if(!await getTableIdFromName(tableName)){\n      if(String(tableName).startsWith(\"CSV_\")){\n        throw `テーブル「${tableName}」が存在しません。先にCSVファイルをアップロードしてください。`;\n      }\n      else{\n        throw `テーブル「${tableName}」が存在しません。先にマスターデータを構築してください。`;\n      }\n    }\n  }\n","afterCode":""}]