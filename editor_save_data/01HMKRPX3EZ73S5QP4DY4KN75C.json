[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n  await getEndpointInfo( \"/default/tables\", true, true );\n  await runApi(\"GET\",\"/default/tables\",{},{},true,true);\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"APIを実行する関数","functionNameEN":"runApi","parametersName":["httpMethod","endpointPath","queryParameters","requestBody","isRequestFormData","isResponseFormData"],"parametersDataType":["string","string",{"string":"any"},{"string":"any"},"boolean","boolean"],"returnValue":{"string":"any"},"functionId":"01HMKRS40THRB7KM805J5JHD3A","beforeCode":"\n\n\n","innerCode":"\n    if (!isResponseFormData) {\n        // レスポンスデータをFormDataの形式に変換する必要がなければ\n        // （HTML側にすり合わせる必要がなければ）\n        //  何もしない（下層の機能をそのまま上層に提供する）\n        return await runApi( httpMethod, endpointPath, queryParameters, requestBody, isRequestFormData, isResponseFormData );\n    }\n    //\n    // エンドポイントの情報を取得する\n    const endpointInfo = await getEndpointInfo( endpointPath, isRequestFormData, isResponseFormData );\n    //\n    // APIのメイン処理を実行する\n    let response = await runApi( httpMethod, endpointPath, queryParameters, requestBody, isRequestFormData, isResponseFormData );\n    //\n    // レスポンスデータに、ページネーションの情報を加える\n    response = _convertResponseData({ endpointPath, endpointInfo, response, queryParameters });\n    //\n    return response;\n","afterCode":""},{"functionNameJP":"エンドポイントの情報を取得","functionNameEN":"getEndpointInfo","parametersName":["endpointPath","isRequestFormData","isResponseFormData"],"parametersDataType":["string","boolean","boolean"],"returnValue":{"httpMethod":"string","description":"string","queryParameters":{"string":{"dataType":"string","description":"string","isRequired":"boolean","example":"any"}},"requestBody":{},"response":{"string":{"title":"string_nullable","isArray":"boolean_nullable","onePageMaxSize":"number_nullable","children":"any","dataType":"string_nullable","description":"string_nullable","example":"any"}}},"endpointPath":"string","functionId":"01HMKRT547NXQBWRM3D0K47P7R","beforeCode":"\n\n\n//【サブ関数】レスポンスデータに、ページネーションの情報を加える関数\nfunction _convertResponseData({ endpointPath, endpointInfo, response, queryParameters }) {\n    // response を response2 に変換する\n    const response2 = {\n        ...response,\n    };\n    for (const parentKey in endpointInfo.response) {\n        // レスポンスの規格\n        const parentRule = endpointInfo.response[parentKey];\n        if (!parentRule || typeof parentRule !== 'object') {\n            throw `レスポンスの仕様が未定義です。endpointPath=\"${endpointPath}\", key=\"${parentKey}\"`;\n        }\n        //\n        const parentValue = response[parentKey];\n        //\n        // 配列ではない場合、何もしない\n        if (!parentRule.isArray) continue;\n        if (!Array.isArray(parentValue)) {\n            console.error(\"\\n\");\n            console.error(JSON.stringify(response, null, 2));\n            console.error(\"\\n\");\n            throw `想定外のレスポンスデータを返そうとしました。本来は配列です。endpointPath=${endpointPath} key=${parentKey}`;\n        }\n        if (parentRule.onePageMaxSize < parentValue.length) {\n            throw `配列がサイズオーバーです。endpointPath=${endpointPath} key=${parentKey} 現在の長さ=${parentValue.length} 上限=${rule.onePageMaxSize}`;\n        }\n        //\n        // 仮に全件を取得していた場合の、配列の長さ\n        const totalKey = String(parentKey) + \"_total\";\n        let totalArrayLength = response[totalKey];\n        if (isNaN(totalArrayLength)) {\n            throw `レスポンスデータが不足しています。仮に配列「${parentKey}」を全件を取得していた場合の件数を${totalKey}に返却してください。 endpointPath=${endpointPath}`;\n        }\n        totalArrayLength = Number(totalArrayLength);\n        //\n        // １ページあたり表示できる件数\n        const onePageMaxSize = parentRule.onePageMaxSize;\n        //\n        // 全部で何ページあるのか\n        const maxPageNumber = Math.ceil(totalArrayLength / onePageMaxSize);\n        //\n        // 現在のページ番号\n        const queryParameterKey = \"page_\" + String(parentKey);\n        let pageNumber = queryParameters[queryParameterKey];\n        if (isNaN(pageNumber)) {\n            pageNumber = 1;\n        }\n        else {\n            pageNumber = Number(pageNumber);\n            if (pageNumber <= 0) {\n                pageNumber = 1;\n            }\n            if (pageNumber > maxPageNumber) {\n                pageNumber = maxPageNumber;\n            }\n        }\n        //\n        response2[String(parentKey) + \"_pageFirst_flag\"] = (pageNumber >= 3) ? true : false;\n        //\n        response2[String(parentKey) + \"_pagePrev_flag\"] = (pageNumber >= 2) ? true : false;\n        response2[String(parentKey) + \"_pagePrev\"] = pageNumber - 1;\n        //\n        response2[String(parentKey) + \"_pageNow_flag\"] = (maxPageNumber >= 2) ? true : false;\n        response2[String(parentKey) + \"_pageNow\"] = pageNumber;\n        //\n        response2[String(parentKey) + \"_pageNext_flag\"] = (pageNumber < maxPageNumber) ? true : false;\n        response2[String(parentKey) + \"_pageNext\"] = pageNumber + 1;\n        //\n        response2[String(parentKey) + \"_pageLast_flag\"] = (pageNumber < maxPageNumber - 1) ? true : false;\n        response2[String(parentKey) + \"_pageLast\"] = maxPageNumber;\n    }\n    return response2;\n}\n\n\n","innerCode":"\n    if (!isResponseFormData) {\n        // レスポンスデータをFormDataの形式に変換する必要がなければ\n        // （HTML側にすり合わせる必要がなければ）\n        //  何もしない（下層の機能をそのまま上層に提供する）\n        return await getEndpointInfo( endpointPath, isRequestFormData, isResponseFormData );\n    }\n    const endpointInfo1 = await getEndpointInfo( endpointPath, isRequestFormData, isResponseFormData );\n    const endpointInfo = structuredClone(endpointInfo1);\n    //\n    for (const parentKey in endpointInfo.response) {\n        // レスポンスの規格\n        const parentRule = endpointInfo.response[parentKey];\n        if (!parentRule || typeof parentRule !== 'object') {\n            throw `[${LAYER_CODE}層] レスポンスの仕様が未定義です。endpointPath=\"${endpointPath}\", key=\"${parentKey}\"`;\n        }\n        //\n        // 配列ではない場合、何もしない\n        if (!parentRule.isArray) continue;\n        //\n        if (!parentRule.title) {\n            throw `[${LAYER_CODE}層] 配列のタイトル（日本語）が未定義です。endpointPath=\"${endpointPath}\", key=\"${parentKey}.title\"`;\n        }\n        endpointInfo.response[String(parentKey) + \"_pageFirst_flag\"] = {\n            \"dataType\": \"BOOL\",\n            \"isRequired\": true,\n            \"example\": true,\n            \"description\": `「${parentRule.title}」を表示する際に「先頭ページにジャンプする」ボタンを表示するか否か。（true...ボタンを表示する。false...ボタンを表示しない。）この変数は、ページをめくることで変動します。例えば、先頭ページを表示しているときにはfalseになります。`,\n        };\n        //\n        endpointInfo.response[String(parentKey) + \"_pagePrev_flag\"] = {\n            \"dataType\": \"BOOL\",\n            \"isRequired\": true,\n            \"example\": true,\n            \"description\": `「${parentRule.title}」を表示する際に「１つ前のページに戻る」ボタンを表示するか否か。（true...ボタンを表示する。false...ボタンを表示しない。）この変数は、ページをめくることで変動します。例えば、先頭ページを表示しているときにはfalseになります。`,\n        };\n        endpointInfo.response[String(parentKey) + \"_pagePrev\"] = {\n            \"dataType\": \"INTEGER\",\n            \"isRequired\": true,\n            \"example\": 2,\n            \"description\": `「${parentRule.title}」を表示する際の、１つ前のページのページ番号。例えば、５ページめを表示しているときは「4」です。`,\n        };\n        //\n        endpointInfo.response[String(parentKey) + \"_pageNow_flag\"] = {\n            \"dataType\": \"BOOL\",\n            \"isRequired\": true,\n            \"example\": true,\n            \"description\": `「${parentRule.title}」を表示する際に、現在のページ番号を表示するか否か。（true...表示する。false...表示しない。）全部で１ページしか存在しない場合はfalseになります。`,\n        };\n        endpointInfo.response[String(parentKey) + \"_pageNow\"] = {\n            \"dataType\": \"INTEGER\",\n            \"isRequired\": true,\n            \"example\": 3,\n            \"description\": `「${parentRule.title}」を表示する際の、現在のページ番号。`,\n        };\n        //\n        endpointInfo.response[String(parentKey) + \"_pageNext_flag\"] = {\n            \"dataType\": \"BOOL\",\n            \"isRequired\": true,\n            \"example\": true,\n            \"description\": `「${parentRule.title}」を表示する際に「次のページに進む」ボタンを表示するか否か。（true...ボタンを表示する。false...ボタンを表示しない。）この変数は、ページをめくることで変動します。例えば、最終ページを表示しているときにはfalseになります。`,\n        };\n        endpointInfo.response[String(parentKey) + \"_pageNext\"] = {\n            \"dataType\": \"INTEGER\",\n            \"isRequired\": true,\n            \"example\": 4,\n            \"description\": `「${parentRule.title}」を表示する際の、次のページのページ番号。例えば、５ページめを表示しているときは「6」です。`,\n        };\n        //\n        endpointInfo.response[String(parentKey) + \"_pageLast_flag\"] = {\n            \"dataType\": \"BOOL\",\n            \"isRequired\": true,\n            \"example\": false,\n            \"description\": `「${parentRule.title}」を表示する際に「最終ページにジャンプする」ボタンを表示するか否か。（true...ボタンを表示する。false...ボタンを表示しない。）この変数は、ページをめくることで変動します。例えば、最終ページを表示しているときにはfalseになります。`,\n        };\n        endpointInfo.response[String(parentKey) + \"_pageLast\"] = {\n            \"dataType\": \"INTEGER\",\n            \"isRequired\": true,\n            \"example\": 4,\n            \"description\": `「${parentRule.title}」を表示する際の、最後のページのページ番号。`,\n        };\n    }\n    return endpointInfo;\n","afterCode":"\n\n\n"}]