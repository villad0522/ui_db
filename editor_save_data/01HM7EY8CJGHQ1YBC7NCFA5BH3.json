[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n  await startUp(\"http://localhost:3000/\", true);\n  await createTable(\"クラス一覧\");\n  await listTables( 1, 35, false );\n  await close();\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"プログラム起動","functionNameEN":"startUp","parametersName":["localUrl","isDebug"],"parametersDataType":["string_nullable","boolean"],"returnValue":"void","functionId":"01HM7FQ083RSS684W5XGB8R40N","beforeCode":"\n\n\n","innerCode":"\n  await startUp( localUrl, isDebug );   // 下層の関数を呼び出す\n  //\n  // テーブルを作成する（見出しの役割を果たすカラムを登録するため）\n  await reserveWord(\"title_columns\"); // 予約語に登録\n  await runSqlWriteOnly(\n    `CREATE TABLE IF NOT EXISTS title_columns (\n      table_id TEXT PRIMARY KEY,\n      title_column_id TEXT NOT NULL\n    );`,\n    {},\n  );\n  await _reload();    // メモリに再読み込み\n","afterCode":""},{"functionNameJP":"【サブ】見出しの役割を果たすカラムを登録する","functionNameEN":"setTitleColumn","parametersName":["columnId"],"parametersDataType":["string"],"returnValue":"void","functionId":"01HM7M00KTFH23Z4RECAY2AMBC","beforeCode":"\n\nlet cacheData = {};\n\n//【サブ関数】メモリに再読み込み\nasync function _reload() {\n  const matrix = await runSqlReadOnly(\n    `SELECT\n      table_id AS tableId,\n      title_column_id AS titleColumnId\n    FROM title_columns;`,\n    {},\n  );\n  cacheData = {};\n  for( const { tableId, titleColumnId } of matrix ){\n    cacheData[tableId] = titleColumnId;\n  }\n}\n\n","innerCode":"\n  const tableId = await getTableId( columnId );\n  if( cacheData[tableId]===columnId ){\n    // 既に登録済みなら処理を続行する必要がない\n    return;\n  }\n  await runSqlWriteOnly(\n    `INSERT OR REPLACE INTO title_columns ( table_id, title_column_id )\n        VALUES ( :tableId, :titleColumnId );`,\n    {\n        \":tableId\": tableId,\n        \":titleColumnId\": columnId,   // 見出しの役割を果たすカラム\n    },\n  );\n  await _reload();    // メモリに再読み込み\n","afterCode":""},{"functionNameJP":"【サブ】見出しの役割を果たすカラムを取得する","functionNameEN":"getTitleColumnId","parametersName":["tableId"],"parametersDataType":["string"],"returnValue":"string_nullable","functionId":"01HM7M34J2KAE6H940PW4GA1AC","beforeCode":"\n\n","innerCode":"\n  return cacheData[tableId];\n","afterCode":""},{"functionNameJP":"テーブルの一覧を取得(重)","functionNameEN":"listTables","parametersName":["pageNumber","onePageMaxSize","isTrash"],"parametersDataType":["number_nullable","number","boolean"],"returnValue":{"tables":[{"id":"string","name":"string","titleColumnId":"string_nullable"}],"total":"number"},"functionId":"01HM7N3XJQ87DAQCG0P7C5SGFH","beforeCode":"\n\n","innerCode":"\n  // 下層の関数を実行する\n  const { tables, total } = await listTables( pageNumber, onePageMaxSize, isTrash );\n  // 下層から得たテーブルの一覧に、「titleColumnId」を付け加えて上層に提供する\n  for( let i=0; i<tables.length; i++ ){\n    const tableId = tables[i].id;\n    tables[i].titleColumnId = cacheData[tableId];\n  }\n  return {\n    \"tables\": tables,\n    \"total\": total,\n  }\n","afterCode":""},{"functionNameJP":"不可逆的にテーブルを削除","functionNameEN":"deleteTable","parametersName":["tableId"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HM7S0XSJJQHMF5SNQBG82WZF","beforeCode":"\n\n\n\n","innerCode":"\n    await runSqlWriteOnly(\n        `DELETE FROM title_columns\n            WHERE table_id = :tableId;`,\n        {\n            \":tableId\": tableId,\n        },\n    );\n    await _reload();    // メモリに再読み込み\n    return await deleteTable( tableId );  // 下層の関数を実行する\n","afterCode":""},{"functionNameJP":"インメモリキャッシュを削除する","functionNameEN":"clearCache","parametersName":[],"parametersDataType":[],"returnValue":"void","functionId":"01HM821CE6BNJ31KCEBND5WKMA","beforeCode":"\n\n\n\n","innerCode":"\n    await _reload();    // メモリに再読み込み\n    return await clearCache();   // 下層の関数を呼び出す\n","afterCode":""},{"functionNameJP":"【サブ】文字列からレコードIDを取得","functionNameEN":"_getRecordIdFromTitle","parametersName":["tableId","titleText"],"parametersDataType":["string","string"],"returnValue":"number_nullable","functionId":"01HMMSW6H7HJ4RA5258QBE57PJ","beforeCode":"\n\n\n","innerCode":"\n  const titleColumnId = cacheData[tableId];\n  if(!titleColumnId){\n    throw `文字列からマスターデータのIDを取得しようとしましたが、見出しの役割を果たすカラムが未設定です。\\nテーブルID = ${tableId}`;\n  }\n  const primaryKey = await getPrimaryKey( tableId );\n  const value = await formatField(titleText, titleColumnId, true);\n  const matrix = await runSqlReadOnly(\n    `SELECT ${primaryKey}\n    FROM ${tableId}\n    WHERE ${titleColumnId} = :value\n    ORDER BY sort_number DESC\n    LIMIT 1;`,\n    {\n      \":value\" : value,\n    },\n  );\n  if(matrix.length===0){\n    return null;\n  }\n  return matrix[0][primaryKey];\n","afterCode":""},{"functionNameJP":"カラムを作成","functionNameEN":"createColumn","parametersName":["tableId","columnName","dataType","parentTableId"],"parametersDataType":["string","string","string","string_nullable"],"returnValue":{"message":"string","columnId":"string"},"functionId":"01HMTT8QAEPX2NXVZAXC2NKY6X","beforeCode":"\n\n\n\n","innerCode":"\n  const result = await createColumn( tableId, columnName, dataType, parentTableId ); // 下層の関数を呼び出す\n  if( dataType !== \"TEXT\" ){\n    // データ型が文字列ではない場合\n    return result;\n  }\n  // データ型が文字列の場合\n  const titleColumn = await runSqlReadOnly(\n    `SELECT * FROM title_columns\n      WHERE table_id = :tableId;`,\n    {\n      \":tableId\": tableId,\n    },\n  );\n  if( titleColumn.length > 0 ){\n    // 既にタイトルが設定されている場合\n    return result;\n  }\n  // まだタイトルが設定されていない場合\n  // このカラムをタイトルに設定する\n  await setTitleColumn_core( result.columnId );\n  //\n  return result;\n","afterCode":""},{"functionNameJP":"見出しの役割を果たすカラムを登録する","functionNameEN":"setTitleColumnsFromUI","parametersName":["columns"],"parametersDataType":[[{"id":"string","titleColumn":"string"}]],"returnValue":"void","functionId":"01HP9747VXP734CEEQNCBR2DE9","beforeCode":"\n\n","innerCode":"\n    for( let i=0; i<columns.length; i++ ){\n        const childColumnId = columns[i][\"id\"];\n        const parentTableId = await getParentTableId( childColumnId );\n        if(!parentTableId){\n          continue; // 外部キーではない場合\n        }\n        const titleColumn = columns[i][\"titleColumn\"];\n        if(titleColumn===\"指定なし\"){\n          await _deleteTitleColumn_core( parentTableId );\n        }\n        else{\n          const columnId = await getColumnIdFromName( titleColumn );\n          if(!columnId){\n            throw `指定されたカラムは存在しません。\\ntitleColumn = ${titleColumn}`;\n          }\n          await setTitleColumn_core( columnId );\n        }\n    }\n","afterCode":""},{"functionNameJP":"【サブ】見出しを登録解除する","functionNameEN":"_deleteTitleColumn","parametersName":["tableId"],"parametersDataType":["string"],"returnValue":"void","functionId":"01HP97YYA24YDWKEEADSY00X0X","beforeCode":"\n\n","innerCode":"\n  if( !cacheData[tableId] ){\n    // 既に登録が解除されていたら処理を行う必要が無い\n    return;\n  }\n  await runSqlWriteOnly(\n    `DELETE FROM title_columns WHERE table_id = :tableId;`,\n    {\n        \":tableId\": tableId,\n    },\n  );\n  await _reload();    // メモリに再読み込み\n","afterCode":""},{"functionNameJP":"レコードの一覧を取得(GUI)","functionNameEN":"listRecords","parametersName":["tableId","pageNumber","onePageMaxSize"],"parametersDataType":["string","number_nullable","number"],"returnValue":{"columns":[{"id":"string","name":"string","titleColumn":"string_nullable","titleColumn_flag":"boolean","titleColumn_option":["string"],"dataType":"string","parentTableId":"string_nullable"}],"records":[{"string":"string"}],"recordsTotal":"number"},"functionId":"01HP98QVDY26KMRNND610E40KH","beforeCode":"\n\n","innerCode":"\n  const { columns, records, recordsTotal } = await listRecords( tableId, pageNumber, onePageMaxSize );\n  const newColumns = [];\n  const newRecords = [];\n  for( const columnInfo of columns ){\n    const childColumnId = columnInfo.id;\n    const parentTableId = await getParentTableId( childColumnId );\n    if(!parentTableId){\n      newColumns.push({\n        ...columnInfo,\n        \"titleColumn_flag\": false,\n        \"titleColumn_option\": [],\n      });\n      continue;\n    }\n    const parentColumns = await listColumnsAll( parentTableId );\n    const titleColumn = await getColumnName( cacheData[parentTableId] );\n    newColumns.push({\n      ...columnInfo,\n      \"titleColumn_flag\": true,\n      \"titleColumn\": titleColumn,\n      \"titleColumn_option\": [\n        \"指定なし\",\n        ...parentColumns.map( ({name})=>name ),\n      ],\n    });\n  }\n  for( const oldRecord of records ){\n      const newRecord = {\n        \"id\": oldRecord[\"id\"],\n      };\n      for( let i=0; i<columns.length; i++ ){\n        const value = oldRecord[\"field\" + i ];\n        const childColumnId = columns[i][\"id\"];\n        const parentTableId = await getParentTableId( childColumnId );\n        if(!parentTableId){\n          // 外部キーではない場合\n          newRecord[ \"field\" + i ] = String( value ?? \"\" );\n          continue;\n        }\n        if(!value){\n          // 空欄の場合\n          newRecord[ \"field\" + i ] = \"\";\n          continue;\n        }\n        const recordId = Number(value);\n        const parentText = await _getParentValue_core( parentTableId, recordId );\n        const url = `/default/records/index.html?table=${tableId}&record=${recordId}`;\n        newRecord[ \"field\" + i ] = `<a href=\"${url}\">${String(parentText)}</a>`;\n      }\n      newRecords.push(newRecord);\n  }\n  return { \n    columns: newColumns,\n    records: newRecords, \n    recordsTotal\n  };\n","afterCode":""},{"functionNameJP":"【サブ】親テーブルの値を取得","functionNameEN":"_getParentValue","parametersName":["tableId","recordId","nestLevel"],"parametersDataType":["string","number","number_nullable"],"returnValue":"string","functionId":"01HP9M273T3H7JJE0XP5HZ01YV","beforeCode":"\n\n","innerCode":"\n  const titleColumnId = cacheData[tableId];\n  if(!titleColumnId){\n    // 見出しが設定されていない場合\n    return `<i class=\"bi bi-box-arrow-up-right\"></i>`;\n  }\n  const primaryKey = await getPrimaryKey( tableId );\n  const records = await runSqlReadOnly(\n    `SELECT ${titleColumnId}\n    FROM ${tableId}\n    WHERE ${primaryKey} = :recordId\n    LIMIT 1;`,\n    {\n      \":recordId\" : recordId,\n    },\n  );\n  if( records.length===0 ){\n    return \"参照先が存在しません\";\n  }\n  const fieldData = records[0][titleColumnId];\n  if(!fieldData){\n    return `<i class=\"bi bi-box-arrow-up-right\"></i>`;\n  }\n  const parentTableId = await getParentTableId( titleColumnId );\n  if(!parentTableId){\n    // 外部キーではない場合\n    return String(fieldData);\n  }\n  // 外部キーの場合、再帰呼び出し\n  if(nestLevel>3){\n    return `<i class=\"bi bi-box-arrow-up-right\"></i>`;\n  }\n  return await _getParentValue_core( parentTableId, fieldData, (nestLevel??0)+1 );\n","afterCode":""},{"functionNameJP":"レコードを追加","functionNameEN":"createRecordFromUI","parametersName":["tableId","columns"],"parametersDataType":["string",[{"id":"string","newField":"string"}]],"returnValue":{"recordId":"number","userMessage":"string"},"functionId":"01HP9NANXK5RYQNF02798YQXMT","beforeCode":"\n\n","innerCode":"\n  const newColumns = [];\n  for( const { id, newField } of columns ){\n    const parentTableId = await getParentTableId( id );\n    if(!parentTableId){\n      // 外部キーではない場合\n      newColumns.push({\n        id: id,\n        newField: newField,\n      });\n      continue;\n    }\n    // 外部キーの場合\n    const recordId = await _getRecordIdFromTitle_core( parentTableId, newField );\n    newColumns.push({\n      id: id,\n      newField: recordId ?? \"\",\n    });\n  }\n  return await createRecordFromUI( tableId, newColumns );\n","afterCode":"\n"}]