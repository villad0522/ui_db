[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n  await startUp(\"http://localhost:3000/\", true);\n  await createTable(\"クラス一覧\");\n  await listTables( 1, 35, false );\n  await close();\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"プログラム起動","functionNameEN":"startUp","parametersName":["localUrl","isDebug"],"parametersDataType":["string_nullable","boolean"],"returnValue":"void","functionId":"01HM7FQ083RSS684W5XGB8R40N","beforeCode":"\n\n\n","innerCode":"\n  await startUp( localUrl, isDebug );   // 下層の関数を呼び出す\n  //\n  // テーブルを作成する（見出しの役割を果たすカラムを登録するため）\n  await reserveWord(\"title_columns\"); // 予約語に登録\n  await runSqlWriteOnly(\n    `CREATE TABLE IF NOT EXISTS title_columns (\n      table_id TEXT PRIMARY KEY,\n      title_column_id TEXT NOT NULL\n    );`,\n    {},\n  );\n  await _reload();    // メモリに再読み込み\n","afterCode":""},{"functionNameJP":"見出しの役割を果たすカラムを登録する","functionNameEN":"setTitleColumn","parametersName":["columnId"],"parametersDataType":["string"],"returnValue":"void","functionId":"01HM7M00KTFH23Z4RECAY2AMBC","beforeCode":"\n\nlet cacheData = {};\n\n//【サブ関数】メモリに再読み込み\nasync function _reload() {\n  const matrix = await runSqlReadOnly(\n    `SELECT\n      table_id AS tableId,\n      title_column_id AS titleColumnId\n    FROM title_columns;`,\n    {},\n  );\n  cacheData = {};\n  for( const { tableId, titleColumnId } of matrix ){\n    cacheData[tableId] = titleColumnId;\n  }\n}\n\n","innerCode":"\n  const tableId = await getTableId( columnId );\n  await runSqlWriteOnly(\n    `INSERT OR REPLACE INTO title_columns ( table_id, title_column_id )\n        VALUES ( :tableId, :titleColumnId );`,\n    {\n        \":tableId\": tableId,\n        \":titleColumnId\": columnId,   // 見出しの役割を果たすカラム\n    },\n  );\n  await _reload();    // メモリに再読み込み\n","afterCode":""},{"functionNameJP":"見出しの役割を果たすカラムを取得する","functionNameEN":"getTitleColumnId","parametersName":["tableId"],"parametersDataType":["string"],"returnValue":"string_nullable","functionId":"01HM7M34J2KAE6H940PW4GA1AC","beforeCode":"\n\n","innerCode":"\n  return cacheData[tableId];\n","afterCode":""},{"functionNameJP":"テーブルの一覧を取得(重)","functionNameEN":"listTables","parametersName":["pageNumber","onePageMaxSize","isTrash"],"parametersDataType":["number_nullable","number","boolean"],"returnValue":{"tables":[{"id":"string","name":"string","titleColumnId":"string_nullable"}],"total":"number"},"functionId":"01HM7N3XJQ87DAQCG0P7C5SGFH","beforeCode":"\n\n","innerCode":"\n  // 下層の関数を実行する\n  const { tables, total } = await listTables( pageNumber, onePageMaxSize, isTrash );\n  // 下層から得たテーブルの一覧に、「titleColumnId」を付け加えて上層に提供する\n  for( let i=0; i<tables.length; i++ ){\n    const tableId = tables[i].id;\n    tables[i].titleColumnId = cacheData[tableId];\n  }\n  return {\n    \"tables\": tables,\n    \"total\": total,\n  }\n","afterCode":""},{"functionNameJP":"不可逆的にテーブルを削除","functionNameEN":"deleteTable","parametersName":["tableId"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HM7S0XSJJQHMF5SNQBG82WZF","beforeCode":"\n\n\n\n","innerCode":"\n    await runSqlWriteOnly(\n        `DELETE FROM title_columns\n            WHERE table_id = :tableId;`,\n        {\n            \":tableId\": tableId,\n        },\n    );\n    await _reload();    // メモリに再読み込み\n    return await deleteTable( tableId );  // 下層の関数を実行する\n","afterCode":""},{"functionNameJP":"インメモリキャッシュを削除する","functionNameEN":"clearCache","parametersName":[],"parametersDataType":[],"returnValue":"void","functionId":"01HM821CE6BNJ31KCEBND5WKMA","beforeCode":"\n\n\n\n","innerCode":"\n    await _reload();    // メモリに再読み込み\n    return await clearCache();   // 下層の関数を呼び出す\n","afterCode":""},{"functionNameJP":"文字列からレコードIDを取得","functionNameEN":"getRecordIdFromTitle","parametersName":["tableId","titleText"],"parametersDataType":["string","string"],"returnValue":"number_nullable","functionId":"01HMMSW6H7HJ4RA5258QBE57PJ","beforeCode":"\n\n\n","innerCode":"\n  const titleColumnId = cacheData[tableId];\n  if(!titleColumnId){\n    throw `文字列からマスターデータのIDを取得しようとしましたが、見出しの役割を果たすカラムが未設定です。\\nテーブルID = ${tableId}`;\n  }\n  const primaryKey = await getPrimaryKey( tableId );\n  const matrix = await runSqlReadOnly(\n    `SELECT ${primaryKey} AS \"recordId\"\n    FROM ${tableId}\n    WHERE ${titleColumnId} = :title\n    LIMIT 2;`,\n    {\n      \":title\" : titleText,\n    },\n  );\n  if(matrix.length===0){\n    return null;\n  }\n  else if(matrix.length===1){\n    return matrix[0][\"recordId\"];\n  }\n  else{\n    throw `文字列からマスターデータのIDを取得しようとしましたが、複数のマスターデータが見つかりました。\\nテーブルID = ${tableId}\\n文字列=\"${titleText}\"`;\n  }\n","afterCode":""},{"functionNameJP":"カラムを作成","functionNameEN":"createColumn","parametersName":["tableId","columnName","dataType"],"parametersDataType":["string","string","string"],"returnValue":{"message":"string","columnId":"string"},"functionId":"01HMTT8QAEPX2NXVZAXC2NKY6X","beforeCode":"\n\n\n\n","innerCode":"\n  const result = await createColumn( tableId, columnName, dataType ); // 下層の関数を呼び出す\n  if( dataType !== \"TEXT\" ){\n    // データ型が文字列ではない場合\n    return result;\n  }\n  // データ型が文字列の場合\n  const titleColumn = await runSqlReadOnly(\n    `SELECT * FROM title_columns\n      WHERE table_id = :tableId;`,\n    {\n      \":tableId\": tableId,\n    },\n  );\n  if( titleColumn.length > 0 ){\n    // 既にタイトルが設定されている場合\n    return result;\n  }\n  // まだタイトルが設定されていない場合\n  // このカラムをタイトルに設定する\n  await setTitleColumn_core( result.columnId );\n  //\n  return result;\n","afterCode":"\n"}]