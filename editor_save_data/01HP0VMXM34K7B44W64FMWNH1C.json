[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n  await startUp(\"http://localhost:3000/\", true);\n  //\n  const { tableId: tableId1 } = await createTable(\"学年\");\n  const { columnId: columnId1 } = await createColumn( tableId1, \"学年\", \"INTEGER\", null );\n  const { recordId: recordId } = await createRecord( tableId1, {\n    [columnId1]: 3,\n  });\n  //\n  const { tableId: tableId2 } = await createTable(\"名簿\");\n  const { columnId: columnId2  } = await createColumn( tableId2, \"学年\", \"POINTER\", tableId1 );\n  const { columnId: columnId3  } = await createColumn( tableId2, \"氏名\", \"TEXT\", null );\n  const { recordId: recordId2 } = await createRecord( tableId2, {\n    [columnId2]: recordId,\n    [columnId3]: \"田中太郎\",\n  });\n  const { recordId: recordId3 } = await createRecord( tableId2, {\n    [columnId2]: recordId,\n    [columnId3]: \"鈴木信也\",\n  });\n  //\n  const { tableId: tableId3 } = await createTable(\"成績表\");\n  const { columnId: columnId4  } = await createColumn( tableId3, \"学生\", \"POINTER\", tableId2 );\n  const { columnId: columnId5  } = await createColumn( tableId3, \"科目\", \"TEXT\", null );\n  const { columnId: columnId6  } = await createColumn( tableId3, \"得点\", \"INTEGER\", null );\n  const { recordId: recordId4 } = await createRecord( tableId3, {\n    [columnId4]: recordId2,\n    [columnId5]: \"国語\",\n    [columnId6]: 34,\n  });\n  //\n  await close();\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"レコードの一覧を取得(GUI)","functionNameEN":"listRecords","parametersName":["tableId","pageNumber","onePageMaxSize"],"parametersDataType":["string","number_nullable","number"],"returnValue":{"columns":[{"id":"string","name":"string","dataType":"string","parentTableId":"string_nullable"}],"records":[{"string":"string"}],"recordsTotal":"number"},"functionId":"01HP0W13ST49GMC3QHE74AH904","beforeCode":"\n\n\n\n","innerCode":"\n    const primaryKey = await getPrimaryKey( tableId );\n    const columns = await listColumnsAll( tableId );\n    if ( !pageNumber ) {\n        pageNumber = 1;\n    }\n    if (!(pageNumber >= 1)) {\n        pageNumber = 1;\n    }\n    const [{ \"COUNT(*)\": recordsTotal }] = await runSqlReadOnly(\n        `SELECT COUNT(*) FROM ${tableId};`,\n        {},\n    );\n    let offset = onePageMaxSize * (pageNumber - 1);\n    if( offset >= recordsTotal ){\n        offset = recordsTotal;\n    }\n    // 「sqlite_master」と結合させることで、実際に存在するテーブルのみに絞り込む\n    const oldRecords = await runSqlReadOnly(\n        `SELECT *\n            FROM ${tableId}\n            ORDER BY sort_number DESC\n            LIMIT :limit OFFSET :offset;`,\n        {\n            \":limit\": onePageMaxSize,\n            \":offset\": offset,\n        },\n    );\n    const newRecords = [];\n    for( const oldRecord of oldRecords ){\n        const newRecord = {\n            \"id\": String(oldRecord[primaryKey]),\n        };\n        for( let i=0; i<columns.length; i++ ){\n            const columnId = columns[i][\"id\"];\n            let value = oldRecord[columnId];\n            newRecord[ \"field\" + i ] = String( value ?? \"\" );\n        }\n        newRecords.push(newRecord);\n    }\n    return {\n        \"columns\": columns,\n        \"records\": newRecords,\n        \"recordsTotal\": recordsTotal\n    };\n","afterCode":""},{"functionNameJP":"レコードを追加","functionNameEN":"createRecordFromUI","parametersName":["tableId","columns"],"parametersDataType":["string",[{"id":"string","newField":"string"}]],"returnValue":{"recordId":"number","userMessage":"string"},"functionId":"01HP11P4WE2JMVJ8PQ0ECVX6NG","beforeCode":"\n\n\n\n","innerCode":"\n    const newFields = {};\n    for( let i=0; i<columns.length; i++ ){\n        const columnId = columns[i][\"id\"];\n        const inputText = columns[i][\"newField\"];\n        newFields[columnId] = await formatField( inputText, columnId, false );\n    }\n    return await createRecord( tableId, newFields );\n","afterCode":"\n"}]