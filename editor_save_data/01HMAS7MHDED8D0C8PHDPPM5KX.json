[{"functionNameJP":"SQLクエリを生成","functionNameEN":"generateSQLwithDuplication","parametersName":["tableId","selectData","joinData","whereData","orderData"],"parametersDataType":["string",[{"type":"string","joinId":"string","columnName":"string","as":"string"}],[{"fromJoinId":"string","fromColumnName":"string","toJoinId":"string","toTableName":"string","toColumnName":"string"}],[{"displayColumnId":"string","type":"string","joinId":"string","columnName":"string","as":"string"}],[{"type":"string","joinId":"string","columnName":"string","as":"string"}]],"returnValue":{"sql":"string","parameters":"any"},"functionId":"01HMASWX3SBTVHY8V4VC7PT7S5","beforeCode":"\n","innerCode":"\n  const primaryKey = await getPrimaryKey( tableId );\n  //\n  let sql = \"\";\n  //===================================================================================\n  sql += `SELECT\\n`;\n  for( const { type, joinId, columnName, as } of selectData ){\n    switch(type){\n      case \"RAW\":\n        sql += `  ${joinId}.${columnName} AS '${as}'\\n`;\n        break;\n      case \"SUM\":\n        sql += `  SUM(${joinId}.${columnName}) AS '${as}'\\n`;\n        break;\n      case \"MAX\":\n        sql += `  MAX(${joinId}.${columnName}) AS '${as}'\\n`;\n        break;\n      case \"MIN\":\n        sql += `  MIN(${joinId}.${columnName}) AS '${as}'\\n`;\n        break;\n      case \"AVG\":\n        sql += `  AVG(${joinId}.${columnName}) AS '${as}'\\n`;\n        break;\n      case \"COUNT\":\n        sql += `  COUNT(${joinId}.${columnName}) AS '${as}'\\n`;\n        break;\n      default:\n        throw `サポートされていない集合関数が指定されました。type=${type}`;\n    }\n  }\n  sql += `\\n`;\n  //===================================================================================\n  sql += `FROM ${tableId} AS main\\n`;\n  sql += `  LEFT OUTER JOIN sort_numbers AS sort_main\\n`;\n  sql += `    ON ( main.${primaryKey} = sort_main.record_id ) AND ( sort_main.table_id = '${tableId}' )\\n`;\n  //\n  for( const { fromJoinId, fromColumnName, toJoinId, toTableName, toColumnName } of joinData ){\n    sql += `  \\n`;\n    sql += `  LEFT OUTER JOIN ${toTableName} AS ${toJoinId}\\n`;\n    sql += `    ON ${fromJoinId}.${fromColumnName} = ${toJoinId}.${toColumnName}\\n`;\n    //\n    sql += `  LEFT OUTER JOIN sort_numbers AS sort_${toJoinId}\\n`;\n    sql += `    ON ( ${toJoinId}.${toColumnName} = sort_${toJoinId}.record_id ) AND ( sort_${toJoinId}.table_id = '${toTableName}' )\\n`;\n  }\n  sql += `\\n`;\n  //===================================================================================\n  const parameters = {};\n  const whereList = [];\n  for( const { displayColumnId, type, joinId, columnName, value } of whereData ){\n    parameters[\":\"+displayColumnId] = value;\n    switch(type.trim()){\n      case \"=\":\n        whereList.push(`( ${joinId}.${columnName} = :${displayColumnId} )`);\n        break;\n      case \"!=\":\n        whereList.push(`( ${joinId}.${columnName} != :${displayColumnId} )`);\n        break;\n      case \">\":\n        whereList.push(`( ${joinId}.${columnName} > :${displayColumnId} )`);\n        break;\n      case \"<\":\n        whereList.push(`( ${joinId}.${columnName} < :${displayColumnId} )`);\n        break;\n      case \">=\":\n        whereList.push(`( ${joinId}.${columnName} >= :${displayColumnId} )`);\n        break;\n      case \"<=\":\n        whereList.push(`( ${joinId}.${columnName} <= :${displayColumnId} )`);\n        break;\n      default:\n        throw `サポートされていない条件演算子が指定されました。type=${type}`;\n    }\n    parameterCount++;\n  }\n  sql += `WHERE ${whereList.join(\"\\n  AND \")}\\n`;\n  sql += `\\n`;\n  //===================================================================================\n  sql += `GROUP BY main.${primaryKey}\\n`;\n  sql += `\\n`;\n  //===================================================================================\n  const orderByList = [];\n  for( const { joinId, columnName, isAscending } of orderData ){\n    if(isAscending){\n      orderByList.push(`${joinId}.${columnName} ASC`);\n    }\n    else{\n      orderByList.push(`${joinId}.${columnName} DESC`);\n    }\n  }\n  for( const { fromJoinId, fromColumnName, toJoinId, toTableName, toColumnName } of joinData ){\n    orderByList.push(`sort_${toJoinId}.sort_number ASC`);\n  }\n  sql += `ORDER BY ${orderByList.join(\",\\n  \")}\\n`;\n  sql += `\\n`;\n  //===================================================================================\n  //\n  return {\n    sql: sql,\n    parameters: {},\n  };\n","afterCode":"\n"}]