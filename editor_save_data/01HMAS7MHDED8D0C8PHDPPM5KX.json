[{"functionNameJP":"SQLクエリを生成","functionNameEN":"generateSQLwithDuplication","parametersName":["tableId","parentColumnLists","childColumnLists","conditions"],"parametersDataType":["string",{"string":[]},{"string":[]},{"string":{"type":"string","value":"number"}}],"returnValue":{"sql":"string","parameters":"any"},"functionId":"01HMASWX3SBTVHY8V4VC7PT7S5","beforeCode":"\n","innerCode":"\n\n\n\n\n  //\n  let sql = \"\";\n  sql += `SELECT\\n`;\n  sql += await _selectCommand({ columns });\n  sql += `  sort_numbers.sort_number AS sort_number\\n`;\n  sql += `FROM ${tableId} AS main_table\\n`;\n  sql += `  LEFT OUTER JOIN sort_numbers\\n`;\n  sql += `    ON ( main_table.record_id = sort_numbers.record_id\\n`;\n  sql += `          AND sort_numbers.table_id = '${tableId}' )\\n`;\n  sql += await _joinCommand({ columns });\n  sql += `  WHERE ${await _whereCommand({ columns })}\\n`\n  sql += `  LIMIT ${limit};\\n`;\n  //\n  // ダブルクォーテーションを、バッククォートに置き換える\n  sql = sql.replace(/\"/g, '`');\n  //\n  console.log( sql );\n","afterCode":"\n\n\nasync function _selectCommand({ columns }){\n  // 重複しているテーブルを結合する場合\n  //   「テーブルの別名.カラム名」と記入する必要がある。\n  let sql = \"\";\n  for( const { id, name, dataType, parentTableId } of columns ){\n    sql += `  main_table.${name} AS ${name},\\n`;\n    if( !parentTableId ){\n      // 通常のカラムの場合\n      sql += `  main_table.${name} AS ${name}_text,\\n`;\n      continue;\n    }\n    // 外部キーの場合\n    //\n    const parentTitleColumnId = await getTitleColumn( parentTableId );\n    if( !parentTitleColumnId ){\n      // 親テーブルにタイトルキーが設定されていない場合\n      sql += `  main_table.${name} AS ${name}_text,\\n`;\n      continue;\n    }\n    const parentTitleColumnName = getColumnName( parentTitleColumnId );\n    const columnNumber = id.replace(\"c\",\"\");\n    sql += `  v${columnNumber}.${parentTitleColumnName} AS ${name}_text,\\n`;\n  }\n  return sql;\n}\n\n\nasync function _joinCommand({ columns }){\n  let sql = \"\";\n  for( const { id, name, parentTableId } of columns ){\n    if( !parentTableId ){\n      // 通常のカラムの場合\n      continue;\n    }\n    // 外部キーの場合\n    const parentTableName = await getTableName( parentTableId );\n    const parentPrimaryKey = await getPrimaryKey( parentTableId );\n    const columnNumber = id.replace(\"c\",\"\");\n    sql += `  LEFT OUTER JOIN ${parentTableName} AS v${columnNumber}\\n`;\n    sql += `    ON ( main_table.${name} = v${columnNumber}.${parentPrimaryKey} )\\n`;\n  }\n  return sql;\n}\n\n\nasync function _whereCommand({ columns }){\n\n}\n\n"}]