[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n    await startUp(\"http://localhost:3000/\", true);\n    await listEndpoints();\n    await getEndpointInfo( \"/default/tables\", true, true );\n    await getEndpointInfo( \"/default/page_editor\", true, true );\n    await runApi(\"GET\",\"/default/tables\",{},{},true,true);\n    await runApi(\"GET\",\"/default/page_editor\",{\"page_id\":1 },{},true,true);\n    await close();\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"APIを実行する関数","functionNameEN":"runApi","parametersName":["httpMethod","endpointPath","queryParameters","requestBody","isRequestFormData","isResponseFormData"],"parametersDataType":["string","string",{"string":"any"},{"string":"any"},"boolean","boolean"],"returnValue":{"string":"any"},"functionId":"01HN7F6T1TTJQHH71YJQBGV1NX","beforeCode":"\n\n\n\n","innerCode":"\n    //\n    // エンドポイントの情報を取得する\n    const endpointInfo = await getEndpointInfo( endpointPath, isRequestFormData, isResponseFormData );\n    //\n    // APIのメイン処理を実行する\n    let response = await runApi( httpMethod, endpointPath, queryParameters, requestBody, isRequestFormData, isResponseFormData );\n    //\n    if (isResponseFormData) {\n        // レスポンスデータに、予測変換のデータを付け加える\n        response = _convertResponseData({ endpointPath, endpointInfo, response });\n    }\n    //\n    return response;\n","afterCode":""},{"functionNameJP":"エンドポイントの情報を取得","functionNameEN":"getEndpointInfo","parametersName":["endpointPath","isRequestFormData","isResponseFormData"],"parametersDataType":["string","boolean","boolean"],"returnValue":{"httpMethod":"string","description":"string","queryParameters":{"string":{"dataType":"string","description":"string","isRequired":"boolean","example":"any"}},"requestBody":{},"response":{"string":{"title":"string_nullable","isArray":"boolean_nullable","onePageMaxSize":"number_nullable","children":"any","dataType":"string_nullable","description":"string_nullable","example":"any"}}},"endpointPath":"string","functionId":"01HN7F75GG02SPJG9RFMPEF20A","beforeCode":"\n\n//【サブ関数】レスポンスデータを、配列からFormDataに変換する関数\nfunction _convertResponseData({ endpointPath, endpointInfo, response }) {\n    // response を response2 に変換する\n    const response2 = {};\n    for (const parentKey in endpointInfo.response) {\n        const parentInfo = endpointInfo.response[parentKey];\n        if (!parentInfo || typeof parentInfo !== 'object') {\n            throw `レスポンスの仕様が未定義です。endpointPath=\"${endpointPath}\", key=\"${parentKey}\"`;\n        }\n        const parentValue = response[parentKey];\n        //\n        if( !parentKey.endsWith(\"_option\") ){\n            // 予測変換ではない場合\n            response2[parentKey] = parentValue;\n            continue;\n        }\n        // 予測変換の場合\n        if (!parentValue) {\n            throw `空のレスポンスデータを返そうとしました。本来は配列です。endpointPath=${endpointPath} key=${parentKey}`;\n        }\n        if (!Array.isArray(parentValue)) {\n            throw `想定外のレスポンスデータを返そうとしました。本来は配列です。endpointPath=${endpointPath} key=${parentKey}`;\n        }\n        for (let i = 0; i < parentValue.length; i++) {\n            const childValue = parentValue[i];\n            const newKey = parentKey.replace( \"_option\", i + \"_option\" );\n            response2[newKey] = childValue;\n        }\n    }\n    return response2;\n}\n\n\n","innerCode":"\n    const endpointInfo1 = await getEndpointInfo( endpointPath, isRequestFormData, isResponseFormData );\n    const endpointInfo2 = structuredClone(endpointInfo1);\n    if (isResponseFormData) {\n        // レスポンスデータをFormDataの形式に変換する必要がある場合\n        endpointInfo2.response = _convertResponseInfo({\n            endpointPath: endpointPath,\n            oldResponseInfo: endpointInfo1.response,\n        })\n    }\n    return endpointInfo2;\n","afterCode":"\n\nfunction _convertResponseInfo({ endpointPath, oldResponseInfo }) {\n    const newResponseInfo = {};\n    for (const parentKey in oldResponseInfo) {\n        const parentInfo = oldResponseInfo[parentKey];\n        if (!parentInfo || typeof parentInfo !== 'object') {\n            throw `レスポンスの仕様が未定義です。endpointPath=\"${endpointPath}\", key=\"${parentKey}\"`;\n        }\n        if( !parentKey.endsWith(\"_option\") ){\n            // 予測変換ではない場合\n            newResponseInfo[parentKey] = parentInfo;\n            continue;\n        }\n        // 予測変換の場合\n        for (let i = 0; i < 10; i++) {\n            const newKey = parentKey.replace( \"_option\", i + \"_option\" );\n            newResponseInfo[newKey] = parentInfo;\n        }\n    }\n    return newResponseInfo;\n}\n"}]