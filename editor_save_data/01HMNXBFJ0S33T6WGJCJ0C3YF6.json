[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n    \n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"エクセルファイルを更新する関数","functionNameEN":"updateExcel","parametersName":["fileData","sheetInfos","dataList"],"parametersDataType":["any",[{"sheetName":"string","excelStartRow":"number","isTableHeader":"boolean","viewColumns":[{"viewColumnId":"string","viewColumnName":"string","excelColumnText":"string"}]}],[{"string":[{"string":"any"}]}]],"returnValue":"any","functionId":"01HMNXBFJ6WFRVKRVZNCYY22H3","beforeCode":"\n\n\nimport XlsxPopulate from \"xlsx-populate\";\n\n","innerCode":"\n    // エクセルファイルを開く\n    const workbook = await XlsxPopulate.fromDataAsync(fileData);\n    await _updateExcelSheet_core( workbook, sheetInfos, dataList );\n    try {\n        return await workbook.outputAsync();\n    }\n    catch (e) {\n        throw `エクセルファイルの構築中にエラーが発生しました。`;\n    }\n","afterCode":""},{"functionNameJP":"【サブ】シート１個を編集する関数","functionNameEN":"_updateExcelSheet","parametersName":["workbook","sheetInfos","dataList"],"parametersDataType":["any",[{"sheetName":"string","excelStartRow":"number","isTableHeader":"boolean","viewColumns":[{"viewColumnId":"string","viewColumnName":"string","excelColumnText":"string"}]}],[{"string":[{"string":"any"}]}]],"returnValue":"void","functionId":"01HPQN2GC0VFXKR0CWKHEZF91Z","beforeCode":"\n\n\n","innerCode":"\n    //\n    // シート「日付とページ番号」を削除する\n    if (workbook.sheet(\"日付とページ番号\")) {\n        // シートが０枚になるとエラーを吐くので、使わないシートを生成する。\n        if (!workbook.sheet(\"Gw21b1re3e3T5\")) {\n            workbook.addSheet(\"Gw21b1re3e3T5\");\n        }\n        workbook.deleteSheet(\"日付とページ番号\");\n    }\n    //\n    //##############################################################################################\n    // 【事前準備】行数と、表の下端を調べる処理（以下の２つの変数を埋める）\n    let pageRowSize = 0;      // １ページあたりの行数（空白のテンプレートを印刷したときの行数）\n    const tableLastRows = {};   // 表の下端（シートごとに計算する）\n    const tableSizes = {};      // 表の行数（シートごとに計算する）\n    //\n    // Excelのシートごとに繰り返す\n    for( const sheetInfo of sheetInfos ){   \n        const sheetName = sheetInfo.sheetName;          // シート名\n        const tableStartRow = sheetInfo.excelStartRow;  // 表の上端\n        const isTableHeader = sheetInfo.isTableHeader;  // 表に見出しをつけるか（true:つける false:つけない）\n        const viewColumns = sheetInfo.viewColumns;      // 列の一覧\n        if (!workbook.sheet(sheetName)) {\n            // もしシートが存在していない場合\n            workbook.addSheet(sheetName);\n            tableSizes[sheetName] = 50;\n            if( isTableHeader ){\n                tableLastRows[sheetName] = tableStartRow + 50;\n            }\n            else{\n                tableLastRows[sheetName] = tableStartRow + 49;\n            }\n            if( pageRowSize < tableLastRows[sheetName] + 2 ){\n                pageRowSize = tableLastRows[sheetName] + 2;\n            }\n            continue;\n        }\n        const sheet = workbook.sheet(sheetName);        // 書き込み先のオブジェクト\n        const rowSize =  sheet?.usedRange()?.endCell()?.rowNumber() ?? 0;\n        //\n        // 表の下端を調べる\n        tableLastRows[sheetName] = tableStartRow + 50;\n        for(let k=tableStartRow; k<=rowSize; k++){   // Excelの行ごとに繰り返す\n            for( const { excelColumnText } of viewColumns ){  // 列ごとに繰り返す\n                if( ! /^[A-Z]+$/g.test(excelColumnText) ){\n                    throw `Excelの列番号が不正です。\\nexcelColumnText = ${excelColumnText}`;\n                }\n                const value = sheet.cell( k, excelColumnText ).value();\n                let text = \"\";\n                if( value instanceof XlsxPopulate.RichText ){\n                    text = value.text();\n                }\n                else{\n                    text = String(value);\n                }\n                if( text === \"<END_OF_TABLE>\" ){\n                    // 表の下端を見つけた！\n                    tableLastRows[sheetName] = k - 1;\n                    k = rowSize+1;\n                    break;\n                }\n            }\n        }\n        //\n        // 表の行数を調べる\n        if( isTableHeader ){\n            tableSizes[sheetName] = tableLastRows[sheetName] - tableStartRow;\n        }\n        else{\n            tableSizes[sheetName] = tableLastRows[sheetName] - tableStartRow + 1;\n        }\n        //\n        // 最低限の書き込むスペースを確保する\n        if( tableSizes[sheetName] === 0 ){\n            tableSizes[sheetName] = 1;\n            if( isTableHeader ){\n                tableLastRows[sheetName] = tableStartRow + 1;\n            }\n            else{\n                tableLastRows[sheetName] = tableStartRow;\n            }\n        }\n        //\n        // 印刷したときの１ページの行数を調べる\n        if( pageRowSize < tableLastRows[sheetName] + 2 ){\n            pageRowSize = tableLastRows[sheetName] + 2;\n        }\n        //\n        // ページの下端を調べる\n        for(let k=tableStartRow; k<=rowSize; k++){   // Excelの行ごとに繰り返す\n            for( const { excelColumnText } of viewColumns ){  // 列ごとに繰り返す\n                const value = sheet.cell( k, excelColumnText ).value();\n                let text = \"\";\n                if( value instanceof XlsxPopulate.RichText ){\n                    text = value.text();\n                }\n                else{\n                    text = String(value);\n                }\n                if( text === \"<END_OF_PAGE>\" ){\n                    // 表の下端を見つけた！\n                    if( pageRowSize < k ){\n                        pageRowSize = k;\n                    }\n                    k = rowSize+1;\n                    break;\n                }\n            }\n        }\n    }\n    if(pageRowSize===0){\n        pageRowSize = 1;\n    }\n    //\n    //##############################################################################################\n    // 【本処理】\n    let actualPageCount = 0;    // 実際のページ番号\n    //\n    for( const sheetDatas of dataList ){  // 冊子ごとに繰り返す\n        const inputIndexes = {          // 各シートにおいて、配列の何行目まで書き込んだのかを記録する\n            // \"シート名\": 320,\n        };\n        let completeCount = 0;          // 各シートで、全データを書き終わるとカウントアップする\n        const isComplete = {            // 各シートで、全データを書き終わるとフラグを立てる\n            // \"シート名\": true,\n        };\n        //\n        // ページごとに繰り返す（全てのシートで全データを書き終えると冊子が完成する。）\n        //                     （全シートのうち、何シートの書き込みが完了したのかをcompleteCountに保存している。）\n        let displayPageCount=0;\n        for( displayPageCount=0; (displayPageCount<100)&&(completeCount<sheetInfos.length); displayPageCount++){\n            //\n            // Excelのシートごとに繰り返す\n            for( const sheetInfo of sheetInfos ){   \n                const sheetName = sheetInfo.sheetName;          // シート名\n                const tableSize = tableSizes[sheetName];        // 表の行数\n                let tableStartRow = sheetInfo.excelStartRow;    // 表の上端\n                const tableLastRow = tableLastRows[sheetName];  // 表の下端\n                const isTableHeader = sheetInfo.isTableHeader;  // 表に見出しをつけるか（true:つける false:つけない）\n                const viewColumns = sheetInfo.viewColumns;      // 列の一覧\n                const rowDatas = sheetDatas[sheetName];            // 書き込みたい内容（行の一覧）\n                const sheet = workbook.sheet(sheetName);        // 書き込み先のオブジェクト\n                //\n                if(tableStartRow<=0 || pageRowSize<tableStartRow || tableLastRow<tableStartRow || isNaN(tableStartRow)){\n                    throw `Excelデータの開始行が、有効な数値ではありません。\\ntableStartRow = ${tableStartRow}\\npageRowSize = ${pageRowSize}\\ntableLastRow = ${tableLastRow}`;\n                }\n                if(tableLastRow<=0 || pageRowSize<tableLastRow || tableLastRow<tableStartRow || isNaN(tableLastRow)){\n                    throw `Excelデータの末尾の行が、有効な数値ではありません。\\ntableLastRow = ${tableLastRow}\\npageRowSize = ${pageRowSize}\\ntableStartRow = ${tableStartRow}`;\n                }\n                //\n                // Excelのテンプレートを貼り付ける\n                if( (actualPageCount+displayPageCount) >= 1 ){\n                    // もし１ページ目以外なら\n                    const maxColumn =  sheet?.usedRange()?.endCell()?.columnNumber() ?? 100;\n                    const excelIndex =  ( pageRowSize * (actualPageCount+displayPageCount) );    // Excelの何行目に書き込むのか\n                    //\n                    for( let i=1; i<=pageRowSize; i++){\n                        for( let j= 1; j<= maxColumn; j++){\n                            const srcCell = sheet.cell(i,j);\n                            const destCell = sheet.cell(excelIndex+i,j);\n                            destCell.value(srcCell.value());\n                            destCell.style(srcCell.style([]));\n                        }\n                    }\n                }\n                //\n                // 列名\n                if( isTableHeader ){\n                    const excelIndex = ( pageRowSize * (actualPageCount+displayPageCount) ) + tableStartRow;    // Excelの何行目に書き込むのか\n                    for( const { viewColumnName, excelColumnText } of viewColumns ){  // 列ごとに繰り返す\n                        if( ! /^[A-Z]+$/g.test(excelColumnText) ){\n                            throw `Excelの列番号が不正です。\\nexcelColumnText = ${excelColumnText}`;\n                        }\n                        const cell = sheet.cell( excelIndex, excelColumnText );\n                        cell.value( viewColumnName );\n                    }\n                    tableStartRow++;\n                }\n                //\n                if( !inputIndexes[sheetName] ){\n                    inputIndexes[sheetName] = 0;     // 配列の何行目のデータを書き込むのか\n                }\n                //\n                // Excelの行ごとに繰り返す\n                for(let k=tableStartRow; k<=tableLastRow; k++){\n                    const excelIndex =  ( pageRowSize * (actualPageCount+displayPageCount) ) + k;    // Excelの何行目に書き込むのか\n                    const inputIndex = inputIndexes[sheetName];                   // 配列の何行目のデータを書き込むのか\n                    const rowData = (inputIndex<rowDatas.length)? rowDatas[inputIndex] : {};    // 書き込みたいデータ\n                    for( const { viewColumnId, excelColumnText } of viewColumns ){  // 列ごとに繰り返す\n                        const cell = sheet.cell( excelIndex, excelColumnText );\n                        const text = String( rowData[viewColumnId] ?? \"\" );\n                        cell.value( text );                                      // Excelファイルのセルに書き込む\n                    }\n                    inputIndexes[sheetName]++;  // 「配列の何行目のデータを書き込むのか」を次に進める\n                }\n                //\n                // 終端文字を入れる\n                const lastTableRowIndex = pageRowSize * (actualPageCount+displayPageCount) + tableLastRow;  // Excelファイルにおける、表の最後の行\n                const richtext1 = new XlsxPopulate.RichText();\n                richtext1.add(\"<END_OF_TABLE>\", {fontSize: 8,  fontColor: \"ffffff\" });\n                for( const { excelColumnText } of viewColumns ){  // 列ごとに繰り返す\n                    sheet.cell(lastTableRowIndex+1, excelColumnText).value(richtext1);\n                }\n                //\n                // 改ページを入れる\n                const lastRowIndex = pageRowSize * (actualPageCount+displayPageCount+1);  // Excelファイルにおける、ページの最後の行\n                const lastRow = sheet.row( lastRowIndex );\n                lastRow.addPageBreak();\n                //\n                // 終端文字を入れる\n                const richtext2 = new XlsxPopulate.RichText();\n                richtext2.add(\"<END_OF_PAGE>\", {fontSize: 8,  fontColor: \"ffffff\" });\n                sheet.cell(lastRowIndex, 1).value(richtext2);\n                //\n                if( rowDatas.length <= inputIndexes[sheetName] ){\n                    // 全データを一通り書き込み終わったら\n                    if( rowDatas.length<=tableSize ){\n                        // データが１ページに収まった場合は、次のページにも書き込む\n                        inputIndexes[sheetName] = 0;\n                    }\n                    if( !isComplete[sheetName] ){\n                        completeCount++;   // 完了カウントを増やす\n                    }\n                    isComplete[sheetName] = true;   // 完了フラグを立てる\n                }\n            }\n        }\n        //=========================================================================\n        //\n        const pageLength = displayPageCount;  // 冊子全体のページ数\n        //\n        // シート「日付とページ番号」を追加する\n        if (!workbook.sheet(\"日付とページ番号\")) {\n            workbook.addSheet(\"日付とページ番号\");\n        }\n        if (workbook.sheet(\"Gw21b1re3e3T5\")) {\n            workbook.deleteSheet(\"Gw21b1re3e3T5\");\n        }\n        //\n        //=========================================================================\n        // 【シート「日付とページ番号」にページ番号を入れる処理】\n        //\n        // ページごとに繰り返す\n        for( let i=0; i<pageLength; i++){\n            //\n            // シート「日付とページ番号」を生成する\n            const excelIndex = ( pageRowSize * (actualPageCount+i) ) + 1;    // Excelの何行目に書き込むのか\n            const metaSheet = workbook.sheet(\"日付とページ番号\");\n            const today = new Date();\n            const year = today.getFullYear();\n            const month = today.getMonth() + 1;  // 月は0から始まるため、+1して実際の月に合わせます。\n            const day = today.getDate();\n            metaSheet.cell(excelIndex, 1).value(year);\n            metaSheet.cell(excelIndex, 2).value(\"年\");\n            metaSheet.cell(excelIndex, 3).value(month);\n            metaSheet.cell(excelIndex, 4).value(\"月\");\n            metaSheet.cell(excelIndex, 5).value(day);\n            metaSheet.cell(excelIndex, 6).value(\"日\");\n            metaSheet.cell(excelIndex, 7).value(\"更新\");\n            metaSheet.cell(excelIndex+1, 1).value(i+1);\n            metaSheet.cell(excelIndex+1, 2).value(\"/\");\n            metaSheet.cell(excelIndex+1, 3).value(pageLength);\n            metaSheet.cell(excelIndex+1, 4).value(\"ページ\");\n            //\n            // 改ページを入れる\n            const lastRowIndex = pageRowSize * (actualPageCount+i+1);  // Excelファイルにおける、ページの最後の行\n            const lastRow = metaSheet.row( lastRowIndex );\n            lastRow.addPageBreak();\n            lastRow.style(\"bottomBorderStyle\",'thin');\n            lastRow.style(\"bottomBorderColor\", \"000000\");\n            //\n            // 終端文字を入れる\n            metaSheet.cell(lastRowIndex, 1).value(\"<END_OF_PAGE>\");\n        }\n        //=========================================================================\n        actualPageCount += pageLength * pageRowSize;   // 実際のページ番号\n    }\n    //##############################################################################################\n","afterCode":""},{"functionNameJP":"テンプレートを抽出する関数","functionNameEN":"extractTemplate","parametersName":["fileData","sheetInfos"],"parametersDataType":["any",[{"sheetName":"string","excelStartRow":"number","isTableHeader":"boolean"}]],"returnValue":"any","functionId":"01HPTTATVKRPA90E082WPBZTE7","beforeCode":"\n\n\n\n","innerCode":"\n    // エクセルファイルを開く\n    const workbook = await XlsxPopulate.fromDataAsync(fileData);\n    //\n    // シート「日付とページ番号」を削除する\n    if (workbook.sheet(\"日付とページ番号\")) {\n        // シートが０枚になるとエラーを吐くので、使わないシートを生成する。\n        if (!workbook.sheet(\"Gw21b1re3e3T5\")) {\n            workbook.addSheet(\"Gw21b1re3e3T5\");\n        }\n        workbook.deleteSheet(\"日付とページ番号\");\n    }\n    //\n    const metaSheet = workbook.sheet(\"日付とページ番号\");\n    let metaLastRowIndex = 10;\n    if( metaSheet ){\n        // Excelの行ごとに繰り返す\n        for( let i=1; i<1000; i++ ){\n            const value = metaSheet.cell(i,1).value();\n            let text = \"\";\n            if( value instanceof XlsxPopulate.RichText ){\n                text = value.text();\n            }\n            else{\n                text = String(value);\n            }\n            if( text === \"<END_OF_PAGE>\" ){\n                metaLastRowIndex = i;\n                break;\n            }\n        }\n    }\n    //\n    // Excelのシートごとに繰り返す\n    for( const sheetInfo of sheetInfos ){   \n        const sheetName = sheetInfo.sheetName;          // シート名\n        const sheet = workbook.sheet(sheetName);\n        if (!sheet) {\n            // もしシートが存在していない場合\n            continue;\n        }\n        //\n        // Excelの行ごとに繰り返す\n        let lastRowIndex = metaLastRowIndex;\n        for( let i=1; i<1000; i++ ){\n            const value = sheet.cell(i,1).value();\n            let text = \"\";\n            if( value instanceof XlsxPopulate.RichText ){\n                text = value.text();\n            }\n            else{\n                text = String(value);\n            }\n            if( text === \"<END_OF_PAGE>\" ){\n                lastRowIndex = i;\n                break;\n            }\n        }\n        const sheetRowSize =  sheet?.usedRange()?.endCell()?.rowNumber() ?? 0;\n        const sheetColumnSize =  sheet?.usedRange()?.endCell()?.columnNumber() ?? 0;\n        const deleteRange = sheet.range( lastRowIndex+1, 1, sheetRowSize, sheetColumnSize );\n        deleteRange.clear();\n        //\n        // 終端文字を入れる\n        sheet.cell(lastRowIndex, 1).value(\"<END_OF_PAGE>\");\n    }\n    try {\n        return await workbook.outputAsync();\n    }\n    catch (e) {\n        throw `エクセルのテンプレートファイルの構築中にエラーが発生しました。`;\n    }\n","afterCode":"\n"}]