[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n    \n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"エクセルファイルを更新する関数","functionNameEN":"updateExcel","parametersName":["fileData","dataList"],"parametersDataType":["any",[[{"sheetName":"string","excelStartRow":"number","isTableHeader":"boolean","viewColumns":[{"viewColumnId":"string","viewColumnName":"string","excelColumnText":"string"}],"rowDatas":[{"string":"any"}]}]]],"returnValue":"any","functionId":"01HMNXBFJ6WFRVKRVZNCYY22H3","beforeCode":"\n\n\nimport XlsxPopulate from \"xlsx-populate\";\n\n","innerCode":"\n    //\n    // エクセルファイルを、上書き保存モードで開く\n    const workbook = await XlsxPopulate.fromDataAsync(fileData);\n    //\n    // シート「metadata」を白紙にする\n    if (workbook.sheet(\"metadata\")) {\n        // シートが０枚になるとエラーを吐くので、使わないシートを生成する。\n        if (!workbook.sheet(\"Gw21b1re3e3T5\")) {\n            workbook.addSheet(\"Gw21b1re3e3T5\");\n        }\n        workbook.deleteSheet(\"metadata\");\n    }\n    workbook.addSheet(\"metadata\");\n    if (workbook.sheet(\"Gw21b1re3e3T5\")) {\n        workbook.deleteSheet(\"Gw21b1re3e3T5\");\n    }\n    //\n    await _updateExcelSheet_core( workbook, dataList );\n    //\n    try {\n        return await workbook.outputAsync();\n    }\n    catch (e) {\n        throw `エクセルファイルの構築中にエラーが発生しました。`;\n    }\n","afterCode":""},{"functionNameJP":"Excelファイルを開く関数","functionNameEN":"openExcel","parametersName":["filePath"],"parametersDataType":["string"],"returnValue":"void","functionId":"01HMNYDZDDBZ094R0TTQPY71GP","beforeCode":"\n\n\n","innerCode":"\n","afterCode":""},{"functionNameJP":"【サブ】シート１個を編集する関数","functionNameEN":"_updateExcelSheet","parametersName":["workbook","dataList"],"parametersDataType":["any",[[{"sheetName":"string","excelStartRow":"number","isTableHeader":"boolean","viewColumns":[{"viewColumnId":"string","viewColumnName":"string","excelColumnText":"string"}],"rowDatas":[{"string":"any"}]}]]],"returnValue":"void","functionId":"01HPQN2GC0VFXKR0CWKHEZF91Z","beforeCode":"\n\n\n","innerCode":"\n    let actualPageCount = 0;    // 実際のページ番号\n    for( const sheetDatas of dataList ){  // 冊子ごとに繰り返す\n        //\n        //=========================================================================\n        // 【事前準備】行数と、表の下端を調べる処理（以下の２つの変数を埋める）\n        let pageRowSize = 0;      // １ページあたりの行数（空白のテンプレートを印刷したときの行数）\n        const tableLastRows = {};   // 表の下端（シートごとに計算する）\n        const tableSizes = {};      // 表の行数（シートごとに計算する）\n        //\n        // Excelのシートごとに繰り返す\n        for( const sheetData of sheetDatas ){   \n            const sheetName = sheetData.sheetName;          // シート名\n            const tableStartRow = sheetData.excelStartRow;  // 表の上端\n            const isTableHeader = sheetData.isTableHeader;  // 表に見出しをつけるか（true:つける false:つけない）\n            const viewColumns = sheetData.viewColumns;      // 列の一覧\n            if (!workbook.sheet(sheetName)) {\n                // もしシートが存在していない場合\n                workbook.addSheet(sheetName);\n                tableSizes[sheetName] = 50;\n                if( isTableHeader ){\n                    tableLastRows[sheetName] = tableStartRow + 50;\n                }\n                else{\n                    tableLastRows[sheetName] = tableStartRow + 49;\n                }\n                if( pageRowSize < tableLastRows[sheetName] ){\n                    pageRowSize = tableLastRows[sheetName];\n                }\n                continue;\n            }\n            const sheet = workbook.sheet(sheetName);        // 書き込み先のオブジェクト\n            const rowSize =  sheet?.usedRange()?.endCell()?.rowNumber() ?? 0;\n            //\n            // 印刷したときの１ページの行数を調べる\n            if( pageRowSize < rowSize ){\n                pageRowSize = rowSize;\n            }\n            if( pageRowSize < tableStartRow ){\n                pageRowSize = tableStartRow;\n            }\n            //\n            // 表の下端を調べる\n            tableLastRows[sheetName] = tableStartRow + 50;\n            for(let k=tableStartRow; k<=rowSize; k++){   // Excelの行ごとに繰り返す\n                for( const { excelColumnText } of viewColumns ){  // 列ごとに繰り返す\n                    if( ! /^[A-Z]+$/g.test(excelColumnText) ){\n                        throw `Excelの列番号が不正です。\\nexcelColumnText = ${excelColumnText}`;\n                    }\n                    const cell = sheet.cell( k, excelColumnText );\n                    if( String(cell.value())===\"[↓表ここまで]\" ){\n                        // 表の下端を見つけた！\n                        tableLastRows[sheetName] = k;\n                        k = rowSize+1;\n                        break;\n                    }\n                }\n            }\n            //\n            // 表の行数を調べる\n            if( isTableHeader ){\n                tableSizes[sheetName] = tableLastRows[sheetName] - tableStartRow;\n            }\n            else{\n                tableSizes[sheetName] = tableLastRows[sheetName] - tableStartRow + 1;\n            }\n            //\n            // 最低限の書き込むスペースを確保する\n            if( tableSizes[sheetName] === 0 ){\n                tableSizes[sheetName] = 1;\n                if( isTableHeader ){\n                    tableLastRows[sheetName] = tableStartRow + 1;\n                }\n                else{\n                    tableLastRows[sheetName] = tableStartRow;\n                }\n            }\n            //\n            // 印刷したときの１ページの行数を調べる\n            if( pageRowSize < tableLastRows[sheetName] ){\n                pageRowSize = tableLastRows[sheetName];\n            }\n        }\n        if(pageRowSize===0){\n            pageRowSize = 1;\n        }\n        //\n        //=========================================================================\n        // 【本処理】\n        const inputIndexes = {          // 各シートにおいて、配列の何行目まで書き込んだのかを記録する\n            // \"シート名\": 320,\n        };\n        let completeCount = 0;          // 各シートで、全データを書き終わるとカウントアップする\n        const isComplete = {            // 各シートで、全データを書き終わるとフラグを立てる\n            // \"シート名\": true,\n        };\n        //\n        // ページごとに繰り返す（全てのシートで全データを書き終えると冊子が完成する。）\n        //                     （全シートのうち、何シートの書き込みが完了したのかをcompleteCountに保存している。）\n        for(let displayPageCount=0; (displayPageCount<100)&&(completeCount<sheetDatas.length); displayPageCount++){\n            //\n            // シート「metadata」を生成する\n            const excelIndex =  ( pageRowSize * actualPageCount ) + 1;    // Excelの何行目に書き込むのか\n            const metaSheet = workbook.sheet(\"metadata\");\n            const today = new Date();\n            const year = today.getFullYear();\n            const month = today.getMonth() + 1;  // 月は0から始まるため、+1して実際の月に合わせます。\n            const day = today.getDate();\n            metaSheet.cell(excelIndex, 1).value(year);\n            metaSheet.cell(excelIndex, 2).value(\"年\");\n            metaSheet.cell(excelIndex, 3).value(month);\n            metaSheet.cell(excelIndex, 4).value(\"月\");\n            metaSheet.cell(excelIndex, 5).value(day);\n            metaSheet.cell(excelIndex, 6).value(\"日\");\n            metaSheet.cell(excelIndex, 7).value(\"更新\");\n            metaSheet.cell(excelIndex, 9).value(displayPageCount);\n            metaSheet.cell(excelIndex, 10).value(\"/\");\n            metaSheet.cell(excelIndex, 11).value(\"\");\n            //\n            // Excelのシートごとに繰り返す\n            for( const sheetData of sheetDatas ){   \n                const sheetName = sheetData.sheetName;          // シート名\n                const tableSize = tableSizes[sheetName];        // 表の行数\n                let tableStartRow = sheetData.excelStartRow;    // 表の上端\n                const tableLastRow = tableLastRows[sheetName];  // 表の下端\n                const isTableHeader = sheetData.isTableHeader;  // 表に見出しをつけるか（true:つける false:つけない）\n                const viewColumns = sheetData.viewColumns;      // 列の一覧\n                const rowDatas = sheetData.rowDatas;            // 書き込みたい内容（行の一覧）\n                const sheet = workbook.sheet(sheetName);        // 書き込み先のオブジェクト\n                //\n                if(tableStartRow<=0 || pageRowSize<tableStartRow || tableLastRow<tableStartRow || isNaN(tableStartRow)){\n                    throw `Excelデータの開始行が、有効な数値ではありません。\\ntableStartRow = ${tableStartRow}\\npageRowSize = ${pageRowSize}\\ntableLastRow = ${tableLastRow}`;\n                }\n                if(tableLastRow<=0 || pageRowSize<tableLastRow || tableLastRow<tableStartRow || isNaN(tableLastRow)){\n                    throw `Excelデータの末尾の行が、有効な数値ではありません。\\ntableLastRow = ${tableLastRow}\\npageRowSize = ${pageRowSize}\\ntableStartRow = ${tableStartRow}`;\n                }\n                //\n                // Excelのテンプレートを貼り付ける\n                //\n                // 列名\n                if( isTableHeader ){\n                    const excelIndex =  ( pageRowSize * actualPageCount ) + tableStartRow;    // Excelの何行目に書き込むのか\n                    for( const { viewColumnName, excelColumnText } of viewColumns ){  // 列ごとに繰り返す\n                        if( ! /^[A-Z]+$/g.test(excelColumnText) ){\n                            throw `Excelの列番号が不正です。\\nexcelColumnText = ${excelColumnText}`;\n                        }\n                        const cell = sheet.cell( excelIndex, excelColumnText );\n                        cell.value( viewColumnName );\n                    }\n                    tableStartRow++;\n                }\n                //\n                if( !inputIndexes[sheetName] ){\n                    inputIndexes[sheetName] = 0;     // 配列の何行目のデータを書き込むのか\n                }\n                //\n                // Excelの行ごとに繰り返す\n                for(let k=tableStartRow; k<=tableLastRow; k++){\n                    const excelIndex =  ( pageRowSize * actualPageCount ) + k;    // Excelの何行目に書き込むのか\n                    const inputIndex = inputIndexes[sheetName];                   // 配列の何行目のデータを書き込むのか\n                    const rowData = (inputIndex<rowDatas.length)? rowDatas[inputIndex] : {};    // 書き込みたいデータ\n                    for( const { viewColumnId, excelColumnText } of viewColumns ){  // 列ごとに繰り返す\n                        const cell = sheet.cell( excelIndex, excelColumnText );\n                        const text = String( rowData[viewColumnId] ?? \"\" );\n                        cell.value( text );                                      // Excelファイルのセルに書き込む\n                    }\n                    inputIndexes[sheetName]++;  // 「配列の何行目のデータを書き込むのか」を次に進める\n                }\n                console.log(`${inputIndexes[sheetName]}行目を書き込んでいます...`);\n                //\n                // 改ページを入れる\n                const rowIndex = pageRowSize * (actualPageCount+1);  // Excelファイルにおける、ページの最後の行\n                sheet.verticalPageBreaks().add( rowIndex );\n                //\n                if( rowDatas.length <= inputIndexes[sheetName] ){\n                    // 全データを一通り書き込み終わったら\n                    console.log(`シート「${sheetName}」の書き込みが完了しました`);\n                    if( rowDatas.length<=tableSize ){\n                        // データが１ページに収まった場合は、次のページにも書き込む\n                        inputIndexes[sheetName] = 0;\n                    }\n                    if( !isComplete[sheetName] ){\n                        completeCount++;   // 完了カウントを増やす\n                    }\n                    isComplete[sheetName] = true;   // 完了フラグを立てる\n                }\n            }\n            actualPageCount++;   // 実際のページ番号\n        }\n    }\n    //=========================================================================\n","afterCode":"\n"}]