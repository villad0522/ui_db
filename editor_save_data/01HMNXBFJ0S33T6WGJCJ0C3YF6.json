[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"エクセルファイルを更新する関数","functionNameEN":"updateExcel","parametersName":["filePath","sheetDatas","parameters"],"parametersDataType":["string",{"string":[["any"]]},{"string":"any"}],"returnValue":"void","functionId":"01HMNXBFJ6WFRVKRVZNCYY22H3","beforeCode":"\n\n\nimport XlsxPopulate from \"xlsx-populate\";\nimport fs from 'fs';\nimport path from 'path';\nimport util from 'util';\nimport childProcess from 'child_process';\nimport { PDFDocument } from 'pdf-lib'\n\nconst exec = util.promisify(childProcess.exec);\n\n","innerCode":"\n    //\n    // エクセルファイルを、上書き保存モードで開く\n    const workbook = await XlsxPopulate.fromFileAsync(filePath);\n    //\n    // シート「metadata」を白紙にする\n    if (workbook.sheet(\"metadata\")) {\n        // シートが０枚になるとエラーを吐くので、使わないシートを生成する。\n        if (!workbook.sheet(\"Gw21b1re3e3T5\")) {\n            workbook.addSheet(\"Gw21b1re3e3T5\");\n        }\n        workbook.deleteSheet(\"metadata\");\n    }\n    workbook.addSheet(\"metadata\");\n    if (workbook.sheet(\"Gw21b1re3e3T5\")) {\n        workbook.deleteSheet(\"Gw21b1re3e3T5\");\n    }\n    //\n    // データシートを生成する\n    for (const sheetName in sheetDatas) {\n        await _updateSqlSheet({\n            workbook,\n            sheetName: sheetName,\n            rows: sheetDatas[sheetName],\n        });\n    }\n    //\n    // シート「metadata」を生成する\n    const metaSheet = workbook.sheet(\"metadata\");\n    metaSheet.cell(1, 1).style(\"bold\", true);\n    metaSheet.cell(1, 1).value(`このシートは、ファイルを開くたびに初期化されます。`);\n    const today = new Date();\n    const year = today.getFullYear();\n    const month = today.getMonth() + 1;  // 月は0から始まるため、+1して実際の月に合わせます。\n    const day = today.getDate();\n    metaSheet.cell(2, 1).value(year);\n    metaSheet.cell(2, 2).value(\"年\");\n    metaSheet.cell(2, 3).value(month);\n    metaSheet.cell(2, 4).value(\"月\");\n    metaSheet.cell(2, 5).value(day);\n    metaSheet.cell(2, 6).value(\"日\");\n    metaSheet.cell(2, 7).value(\"更新\");\n    //\n    const questions = Object.keys(parameters);\n    for (let i = 0; i < questions.length; i++) {\n        metaSheet.cell(5 + i, 3).value(questions[i]);\n        metaSheet.cell(5 + i, 3).style(\"horizontalAlignment\", \"right\");\n        metaSheet.cell(5 + i, 4).value(parameters[questions[i]]);\n    }\n    //\n    if (!workbook.sheets()[0].usedRange()) {\n        // pdfに変換すると、白紙になる場合\n        workbook.sheets()[0].cell(1, 1).value(\" \");\n    }\n    try {\n        await workbook.toFileAsync(filePath);\n    }\n    catch (e) {\n        throw `エクセルファイル「${filePath}」の構築中にエラーが発生しました。`;\n    }\n","afterCode":""},{"functionNameJP":"Excelファイルを開く関数","functionNameEN":"openExcel","parametersName":["filePath"],"parametersDataType":["string"],"returnValue":"void","functionId":"01HMNYDZDDBZ094R0TTQPY71GP","beforeCode":"\n\n\nasync function _updateSqlSheet({ workbook, sheetName, rows }) {\n    //\n    // シートを白紙にする\n    if (workbook.sheet(sheetName)) {\n        // シートが０枚になるとエラーを吐くが、シート「metadata」があるので問題ないはず。\n        workbook.deleteSheet(sheetName);\n    }\n    workbook.addSheet(sheetName);\n    //\n    const sheet = workbook.sheet(sheetName);\n    //\n    sheet.cell(1, 1).style(\"bold\", true);\n    sheet.cell(1, 1).value(`このシートは、ファイルを開くたびに初期化されます。`);\n    //\n    if (!Array.isArray(rows) || (rows.length == 0)) {\n        throw \"[ERROR_108] rows[0]を読み取れません\";\n    }\n    const columns = Object.keys(rows[0]);\n    //\n    // 列名\n    for (let j = 0; j < columns.length; j++) {\n        const cell = sheet.cell(2, j + 1);\n        cell.value(columns[j]);\n        cell.style(\"fill\", \"e0e0e0\");\n    }\n    //\n    // SQLの実行結果\n    for (let i = 0; i < rows.length; i++) {\n        for (let j = 0; j < columns.length; j++) {\n            const columnName = columns[j];\n            if (!columnName) continue;\n            const value = rows[i][columnName];\n            sheet.cell(i + 3, j + 1).value(value);\n        }\n    }\n}\n\n\n\n","innerCode":"\n    if(!fs.existsSync(filePath)){\n        throw `ファイルが存在しません`;\n    }\n","afterCode":"\n\n\n\n\n// 変数「pageDatas」の内容をPDF形式の書類に変換する\nasync function _convertToPdf(params) {\n    const [\n        results0,\n        results1,\n        results2,\n    ] = await Promise.all([\n        _oneThread({\n            threadNumber: 0,\n            ...params,\n        }),\n        _oneThread({\n            threadNumber: 1,\n            ...params,\n        }),\n        _oneThread({\n            threadNumber: 2,\n            ...params,\n        }),\n    ]);\n    const results = {\n        ...results0,\n        ...results1,\n        ...results2,\n    };\n    //\n    // 結合後のPDFファイル\n    const mergedPdf = await PDFDocument.create();\n    //\n    for (let i = 0; i < params.pageDatas.length; i++) {\n        const pdfDoc = results[i];\n        //\n        // ページを結合する\n        const [firstPage] = await mergedPdf.copyPages(pdfDoc, [0]);\n        mergedPdf.addPage(firstPage);\n    }\n    return mergedPdf;\n}\n\n// 変数「pageDatas」の内容をPDF形式の書類に変換する\nasync function _oneThread({ db, threadNumber, pageDatas, questionAnswers, questionInfos, temp, instanceId, itemInfo }) {\n    const results = {};\n    for (let i = 0; i < pageDatas.length; i++) {\n        if ((i % 3) != threadNumber) continue;\n        //\n        // LibreOfficePortableのパス\n        let libreOfficePath = path.join(process.cwd(), myPath(`../LibreOfficePortable${threadNumber}/LibreOfficeCalcPortable.exe`));\n        libreOfficePath = libreOfficePath.replaceAll(\"\\\\\", \"/\");\n        //\n        // １ページだけPDFに変換する\n        results[i] = await _onePage({\n            db,\n            pageIndex: i,\n            pageLength: pageDatas.length,\n            pageData: pageDatas[i],\n            libreOfficePath,\n            questionAnswers,\n            questionInfos,\n            temp,\n            instanceId,\n            itemInfo,\n        });\n    }\n    return results;\n}\n\n// １ページだけPDFに変換する関数\nasync function _onePage({ db, pageIndex, pageLength, pageData, libreOfficePath, questionAnswers, questionInfos, temp, instanceId, itemInfo }) {\n    // エクセル２のパス\n    const xlsx2Path = path.join(temp, `${instanceId}_${pageIndex}.xlsm`);\n    //\n    // 「エクセル２」を生成する。\n    await fsPromises.writeFile(xlsx2Path, itemInfo[\"excel_file_data\"]);\n    //\n    // エクセル２を更新\n    await updateXlsx({\n        db,\n        filePath: xlsx2Path,\n        pageData: pageData,\n        pageIndex: pageIndex,\n        pageLength: pageLength,\n        questionAnswers: questionAnswers,\n        questionInfos: questionInfos,\n    });\n    //\n    // エクセル２をPDFに変換する\n    let srcFilePath = path.join(process.cwd(), xlsx2Path);\n    srcFilePath = srcFilePath.replaceAll(\"\\\\\", \"/\");\n    let outDirPath = path.join(process.cwd(), temp);\n    outDirPath = outDirPath.replaceAll(\"\\\\\", \"/\");\n    try {\n        const command = `${libreOfficePath} --headless --convert-to pdf --outdir \"${outDirPath}\" \"${srcFilePath}\"`;\n        await exec(command);\n    }\n    catch (e) {\n        throw `[ERROR_085]「${instanceId}」の${pageIndex}ページ目をpdfへ変換中にエラー発生しました。データベースに保存されているエクセルテンプレートが破損している恐れがあります。書類を作り直してください。\\n\\n${String(e)}`;\n    }\n    //\n    const pdfPath = path.join(process.cwd(), temp, `${instanceId}_${pageIndex}.pdf`);\n    //\n    try {\n        await _waitFile(pdfPath);   // ファイルが生成されるまで待機する\n    }\n    catch (err) {\n        throw `[ERROR_124] ファイルが生成されるまで待ちましたが、タイムアウトしました。\\n${pdfPath}\\n`;\n    }\n    //\n    // PDFファイルを読み込む\n    const bytes = fs.readFileSync(pdfPath);\n    const pdfDoc = await PDFDocument.load(bytes);\n    //\n    return pdfDoc;\n}\n\n// ファイルが生成されるまで待機する関数\nasync function _waitFile(path) {\n    for (let j = 0; j < 500; j++) {\n        if (fs.existsSync(path)) {\n            // フォルダが存在したら\n            return;\n        }\n        await sleep(100);\n    }\n    throw `[ERROR_119] ファイルが生成されるまで待ちましたが、タイムアウトしました。\\n${path}\\n`;\n}"}]