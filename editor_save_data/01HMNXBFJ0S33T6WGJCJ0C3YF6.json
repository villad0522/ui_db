[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n    \n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"エクセルファイルを更新する関数","functionNameEN":"updateExcel","parametersName":["fileData","sheetInfos","dataList"],"parametersDataType":["any",[{"sheetName":"string","excelStartRow":"number","isTableHeader":"boolean","viewColumns":[{"viewColumnId":"string","viewColumnName":"string","excelColumnText":"string"}]}],[{"string":[{"string":"any"}]}]],"returnValue":"any","functionId":"01HMNXBFJ6WFRVKRVZNCYY22H3","beforeCode":"\n\n\nimport ExcelJS from 'exceljs';\n\n","innerCode":"\n    // エクセルファイルを開く\n    const workbook = new ExcelJS.Workbook();\n    await workbook.xlsx.load(fileData);\n    await _updateExcelSheet_core( workbook, sheetInfos, dataList );\n    try {\n        return await workbook.xlsx.writeBuffer();\n    }\n    catch (e) {\n        throw `エクセルファイルの構築中にエラーが発生しました。`;\n    }\n","afterCode":""},{"functionNameJP":"【サブ】シート１個を編集する関数","functionNameEN":"_updateExcelSheet","parametersName":["workbook","sheetInfos","dataList"],"parametersDataType":["any",[{"sheetName":"string","excelStartRow":"number","isTableHeader":"boolean","viewColumns":[{"viewColumnId":"string","viewColumnName":"string","excelColumnText":"string"}]}],[{"string":[{"string":"any"}]}]],"returnValue":"void","functionId":"01HPQN2GC0VFXKR0CWKHEZF91Z","beforeCode":"\n\n\n","innerCode":"\n    //\n    // シート「日付とページ番号」を削除する\n    const metaSheet = workbook.getWorksheet(\"日付とページ番号\")\n    if (metaSheet ) {\n        // シートが０枚になるとエラーを吐くので、使わないシートを生成する。\n        if ( workbook.worksheets.length <= 1 ) {\n            workbook.addWorksheet(\"Gw21b1re3e3T5\");\n        }\n        workbook.removeWorksheet(metaSheet.id);\n    }\n    //\n    //##############################################################################################\n    // 【事前準備】行数と、表の下端を調べる処理（以下の２つの変数を埋める）\n    let pageRowSize = 0;      // １ページあたりの行数（空白のテンプレートを印刷したときの行数）\n    const tableLastRows = {};   // 表の下端（シートごとに計算する）\n    const tableSizes = {};      // 表の行数（シートごとに計算する）\n    //\n    // Excelのシートごとに繰り返す\n    for( const sheetInfo of sheetInfos ){   \n        const sheetName = sheetInfo.sheetName;          // シート名\n        const tableStartRow = sheetInfo.excelStartRow;  // 表の上端\n        const isTableHeader = sheetInfo.isTableHeader;  // 表に見出しをつけるか（true:つける false:つけない）\n        const viewColumns = sheetInfo.viewColumns;      // 列の一覧\n        let worksheet = workbook.getWorksheet(sheetName);   // 書き込み先のオブジェクト\n        if (!worksheet) {\n            // もしシートが存在していない場合\n            worksheet = workbook.addWorksheet(sheetName);\n            tableSizes[sheetName] = 50;\n            if( isTableHeader ){\n                tableLastRows[sheetName] = tableStartRow + 50;\n            }\n            else{\n                tableLastRows[sheetName] = tableStartRow + 49;\n            }\n            if( pageRowSize < tableLastRows[sheetName] + 2 ){\n                pageRowSize = tableLastRows[sheetName] + 2;\n            }\n            continue;\n        }\n        const rowSize = worksheet.rowCount;\n        //\n        // 表の下端を調べる\n        tableLastRows[sheetName] = tableStartRow + 50;\n        for(let k=tableStartRow; k<=rowSize; k++){   // Excelの行ごとに繰り返す\n            for( const { excelColumnText } of viewColumns ){  // 列ごとに繰り返す\n                if( ! /^[A-Z]+$/g.test(excelColumnText) ){\n                    throw `Excelの列番号が不正です。\\nexcelColumnText = ${excelColumnText}`;\n                }\n                const value = worksheet.getRow(k).getCell(excelColumnText).value;\n                if( value === \"<END_OF_TABLE>\" ){\n                    // 表の下端を見つけた！\n                    tableLastRows[sheetName] = k - 1;\n                    k = rowSize+1;\n                    break;\n                }\n            }\n        }\n        //\n        // 表の行数を調べる\n        if( isTableHeader ){\n            tableSizes[sheetName] = tableLastRows[sheetName] - tableStartRow;\n        }\n        else{\n            tableSizes[sheetName] = tableLastRows[sheetName] - tableStartRow + 1;\n        }\n        //\n        // 最低限の書き込むスペースを確保する\n        if( tableSizes[sheetName] === 0 ){\n            tableSizes[sheetName] = 1;\n            if( isTableHeader ){\n                tableLastRows[sheetName] = tableStartRow + 1;\n            }\n            else{\n                tableLastRows[sheetName] = tableStartRow;\n            }\n        }\n        //\n        // 印刷したときの１ページの行数を調べる\n        if( pageRowSize < tableLastRows[sheetName] + 2 ){\n            pageRowSize = tableLastRows[sheetName] + 2;\n        }\n        //\n        // ページの下端を調べる\n        for(let k=tableStartRow; k<=rowSize; k++){   // Excelの行ごとに繰り返す\n            for( const { excelColumnText } of viewColumns ){  // 列ごとに繰り返す\n                const value = worksheet.getRow(k).getCell(excelColumnText).value;\n                if( value === \"<END_OF_PAGE>\" ){\n                    // 表の下端を見つけた！\n                    if( pageRowSize < k ){\n                        pageRowSize = k;\n                    }\n                    k = rowSize+1;\n                    break;\n                }\n            }\n        }\n    }\n    if(pageRowSize===0){\n        pageRowSize = 1;\n    }\n    //\n    //##############################################################################################\n    // 【本処理】\n    let actualPageCount = 0;    // 実際のページ番号\n    //\n    for( const sheetDatas of dataList ){  // 冊子ごとに繰り返す\n        const inputIndexes = {          // 各シートにおいて、配列の何行目まで書き込んだのかを記録する\n            // \"シート名\": 320,\n        };\n        let completeCount = 0;          // 各シートで、全データを書き終わるとカウントアップする\n        const isComplete = {            // 各シートで、全データを書き終わるとフラグを立てる\n            // \"シート名\": true,\n        };\n        //\n        // ページごとに繰り返す（全てのシートで全データを書き終えると冊子が完成する。）\n        //                     （全シートのうち、何シートの書き込みが完了したのかをcompleteCountに保存している。）\n        let displayPageCount=0;\n        for( displayPageCount=0; (displayPageCount<100)&&(completeCount<sheetInfos.length); displayPageCount++){\n            //\n            // Excelのシートごとに繰り返す\n            for( const sheetInfo of sheetInfos ){   \n                const sheetName = sheetInfo.sheetName;          // シート名\n                const tableSize = tableSizes[sheetName];        // 表の行数\n                let tableStartRow = sheetInfo.excelStartRow;    // 表の上端\n                const tableLastRow = tableLastRows[sheetName];  // 表の下端\n                const isTableHeader = sheetInfo.isTableHeader;  // 表に見出しをつけるか（true:つける false:つけない）\n                const viewColumns = sheetInfo.viewColumns;      // 列の一覧\n                const rowDatas = sheetDatas[sheetName];         // 書き込みたい内容（行の一覧）\n                const worksheet = workbook.getWorksheet(sheetName);   // 書き込み先のオブジェクト\n                //\n                if(tableStartRow<=0 || pageRowSize<tableStartRow || tableLastRow<tableStartRow || isNaN(tableStartRow)){\n                    throw `Excelデータの開始行が、有効な数値ではありません。\\ntableStartRow = ${tableStartRow}\\npageRowSize = ${pageRowSize}\\ntableLastRow = ${tableLastRow}`;\n                }\n                if(tableLastRow<=0 || pageRowSize<tableLastRow || tableLastRow<tableStartRow || isNaN(tableLastRow)){\n                    throw `Excelデータの末尾の行が、有効な数値ではありません。\\ntableLastRow = ${tableLastRow}\\npageRowSize = ${pageRowSize}\\ntableStartRow = ${tableStartRow}`;\n                }\n                //\n                // Excelのテンプレートを貼り付ける\n                if( actualPageCount !== 1 ){\n                    // もし１ページ目以外なら\n                    for( let i=1; i<pageRowSize; i++ ){\n                        const excelIndex = pageRowSize * (actualPageCount+displayPageCount);    // Excelの何行目に書き込むのか\n                        for( const { excelColumnText } of viewColumns ){  // 列ごとに繰り返す\n                            const sourceCell = worksheet.getRow(i).getCell(excelColumnText);\n                            const targetCell = worksheet.getRow(excelIndex + i).getCell(excelColumnText);\n                            const formula = String(sourceCell.formula);\n                            if( /[A-Z]{1,2}[1-9][0-9]*$/g.test(formula) ){\n                                const match2 = formula.match(/[1-9][0-9]*$/g);\n                                const pastRowNumber = Number(match2[0]);\n                                const nextRowNumber = Number(match2[0]) + excelIndex;\n                                targetCell.value = { \n                                    formula: formula.replace( String(pastRowNumber), String(nextRowNumber) ),\n                                };\n                            }\n                            else{\n                                targetCell.value = sourceCell.value;\n                            }\n                            targetCell.style = sourceCell.style;\n                        }\n                    }\n                }\n                //\n                // 列名\n                if( isTableHeader ){\n                    const excelIndex = ( pageRowSize * (actualPageCount+displayPageCount) ) + tableStartRow;    // Excelの何行目に書き込むのか\n                    for( const { viewColumnName, excelColumnText } of viewColumns ){  // 列ごとに繰り返す\n                        if( ! /^[A-Z]+$/g.test(excelColumnText) ){\n                            throw `Excelの列番号が不正です。\\nexcelColumnText = ${excelColumnText}`;\n                        }\n                        // Excelファイルのセルに書き込む\n                        worksheet.getRow(excelIndex).getCell(excelColumnText).value = viewColumnName;\n                    }\n                    tableStartRow++;\n                }\n                //\n                if( !inputIndexes[sheetName] ){\n                    inputIndexes[sheetName] = 0;     // 配列の何行目のデータを書き込むのか\n                }\n                //\n                // Excelの行ごとに繰り返す\n                for(let k=tableStartRow; k<=tableLastRow; k++){\n                    const excelIndex =  ( pageRowSize * (actualPageCount+displayPageCount) ) + k;    // Excelの何行目に書き込むのか\n                    const inputIndex = inputIndexes[sheetName];                   // 配列の何行目のデータを書き込むのか\n                    const rowData = (inputIndex<rowDatas.length)? rowDatas[inputIndex] : {};    // 書き込みたいデータ\n                    for( const { viewColumnId, excelColumnText } of viewColumns ){  // 列ごとに繰り返す\n                        const text = String( rowData[viewColumnId] ?? \"\" );\n                        // Excelファイルのセルに書き込む\n                        worksheet.getRow(excelIndex).getCell(excelColumnText).value = text;\n                    }\n                    inputIndexes[sheetName]++;  // 「配列の何行目のデータを書き込むのか」を次に進める\n                }\n                //\n                // 終端文字を入れる\n                const lastTableRowIndex = pageRowSize * (actualPageCount+displayPageCount) + tableLastRow;  // Excelファイルにおける、表の最後の行\n                for( const { excelColumnText } of viewColumns ){  // 列ごとに繰り返す\n                    const cell = worksheet.getRow(lastTableRowIndex+1).getCell(excelColumnText);\n                    cell.value = \"<END_OF_TABLE>\";\n                    cell.font = {\n                        color: { argb: 'FFFFFFFF' },\n                        size: 8,\n                    };\n                }\n                //\n                // 改ページを入れる\n                const lastRowIndex = pageRowSize * (actualPageCount+displayPageCount+1);  // Excelファイルにおける、ページの最後の行\n                worksheet.getRow(lastRowIndex).addPageBreak();\n                //\n                // 終端文字を入れる\n                const cell = worksheet.getRow(lastRowIndex).getCell(1);\n                cell.value = \"<END_OF_PAGE>\";\n                cell.font = {\n                    color: { argb: 'FFFFFFFF' },\n                    size: 8,\n                };\n                //\n                if( rowDatas.length <= inputIndexes[sheetName] ){\n                    // 全データを一通り書き込み終わったら\n                    if( rowDatas.length<=tableSize ){\n                        // データが１ページに収まった場合は、次のページにも書き込む\n                        inputIndexes[sheetName] = 0;\n                    }\n                    if( !isComplete[sheetName] ){\n                        completeCount++;   // 完了カウントを増やす\n                    }\n                    isComplete[sheetName] = true;   // 完了フラグを立てる\n                }\n            }\n        }\n        //=========================================================================\n        //\n        const pageLength = displayPageCount;  // 冊子全体のページ数\n        //\n        // シート「日付とページ番号」を追加する\n        let metaSheet = workbook.getWorksheet(\"日付とページ番号\");\n        if (!metaSheet) {\n            metaSheet = workbook.addWorksheet(\"日付とページ番号\");\n        }\n        const bufSheet = workbook.getWorksheet(\"Gw21b1re3e3T5\");\n        if (bufSheet) {\n            workbook.removeWorksheet(bufSheet.id);\n        }\n        //\n        //=========================================================================\n        // 【シート「日付とページ番号」にページ番号を入れる処理】\n        //\n        // ページごとに繰り返す\n        for( let i=0; i<pageLength; i++){\n            //\n            // シート「日付とページ番号」を生成する\n            const excelIndex = ( pageRowSize * (actualPageCount+i) ) + 1;    // Excelの何行目に書き込むのか\n            const today = new Date();\n            const year = today.getFullYear();\n            const month = today.getMonth() + 1;  // 月は0から始まるため、+1して実際の月に合わせます。\n            const day = today.getDate();\n            metaSheet.getRow(excelIndex).getCell(1).value = year;\n            metaSheet.getRow(excelIndex).getCell(2).value = \"年\";\n            metaSheet.getRow(excelIndex).getCell(3).value = month;\n            metaSheet.getRow(excelIndex).getCell(4).value = \"月\";\n            metaSheet.getRow(excelIndex).getCell(5).value = day;\n            metaSheet.getRow(excelIndex).getCell(6).value = \"日\";\n            metaSheet.getRow(excelIndex).getCell(7).value = \"更新\";\n            metaSheet.getRow(excelIndex+1).getCell(1).value = i+1;\n            metaSheet.getRow(excelIndex+1).getCell(2).value = \"/\";\n            metaSheet.getRow(excelIndex+1).getCell(3).value = pageLength;\n            metaSheet.getRow(excelIndex+1).getCell(4).value = \"ページ\";\n            //\n            // 改ページを入れる\n            const lastRowIndex = pageRowSize * (actualPageCount+i+1);  // Excelファイルにおける、ページの最後の行\n            const lastRow = metaSheet.getRow( lastRowIndex );\n            lastRow.addPageBreak();\n            lastRow.border = {\n                bottom: {style:'double', color: {argb:'FF000000'}},\n            };\n            //\n            // 終端文字を入れる\n            metaSheet.getRow(lastRowIndex).getCell(1).value = \"<END_OF_PAGE>\";\n        }\n        //=========================================================================\n        actualPageCount += pageLength * pageRowSize;   // 実際のページ番号\n    }\n    //##############################################################################################\n","afterCode":""},{"functionNameJP":"テンプレートを抽出する関数","functionNameEN":"extractTemplate","parametersName":["fileData","sheetInfos"],"parametersDataType":["any",[{"sheetName":"string","excelStartRow":"number","isTableHeader":"boolean"}]],"returnValue":"any","functionId":"01HPTTATVKRPA90E082WPBZTE7","beforeCode":"\n\n\n\n","innerCode":"\n    // エクセルファイルを開く\n    const workbook = new ExcelJS.Workbook();\n    await workbook.xlsx.load(fileData);\n    //\n    const metaSheet = workbook.getWorksheet(\"日付とページ番号\");\n    //\n    let metaLastRowIndex = 10;\n    if( metaSheet ){\n        // Excelの行ごとに繰り返す\n        for( let i=1; i<1000; i++ ){\n            const value = metaSheet.getRow(i).getCell(1).value;\n            if( value === \"<END_OF_PAGE>\" ){\n                metaLastRowIndex = i;\n                break;\n            }\n        }\n    }\n    //\n    // Excelのシートごとに繰り返す\n    for( const sheetInfo of sheetInfos ){   \n        const sheetName = sheetInfo.sheetName;          // シート名\n        const worksheet = workbook.getWorksheet(sheetName);\n        if (!worksheet) {\n            // もしシートが存在していない場合\n            continue;\n        }\n        //\n        // Excelの行ごとに繰り返す\n        let lastRowIndex = metaLastRowIndex;\n        for( let i=1; i<1000; i++ ){\n            const value = worksheet.getRow(i).getCell(1).value;\n            if( value === \"<END_OF_PAGE>\" ){\n                lastRowIndex = i;\n                break;\n            }\n        }\n        const maxRow = worksheet.rowCount;\n        for( let i=maxRow; i>lastRowIndex; i--){\n            worksheet.spliceRows(i, 1);\n        }\n        //\n        // 終端文字を入れる\n        worksheet.getRow(lastRowIndex).getCell(1).value = \"<END_OF_PAGE>\";\n    }\n    //\n    // シート「日付とページ番号」を削除する\n    if ( metaSheet ) {\n        // シートが０枚になるとエラーを吐くので、使わないシートを生成する。\n        if ( workbook.worksheets.length <= 1 ) {\n            workbook.addWorksheet(\"Gw21b1re3e3T5\");\n        }\n        workbook.removeWorksheet(metaSheet.id);\n    }\n    //\n    try {\n        return await workbook.xlsx.writeBuffer();\n    }\n    catch (e) {\n        throw `エクセルファイルの構築中にエラーが発生しました。`;\n    }\n","afterCode":"\n"}]