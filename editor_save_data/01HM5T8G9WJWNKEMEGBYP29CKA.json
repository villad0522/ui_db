[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n  await startUp(\"http://localhost:3000/\", true);\n  //\n  const { tableId: tableId1 } = await createTable(\"学年\");\n  const { columnId: columnId1 } = await createColumn( tableId1, \"学年\", \"INTEGER\", null );\n  const { recordId: recordId } = await createRecord( tableId1, {\n    [columnId1]: 3,\n  });\n  //\n  const { tableId: tableId2 } = await createTable(\"名簿\");\n  const { columnId: columnId2  } = await createColumn( tableId2, \"学年\", \"POINTER\", tableId1 );\n  const { columnId: columnId3  } = await createColumn( tableId2, \"氏名\", \"TEXT\", null );\n  await createRecord( tableId2, {\n    [columnId2]: recordId,\n    [columnId3]: \"田中太郎\",\n  });\n  //\n  const { \"normalSQL\": sql1 } = await generateSQL(\n    tableId2,\n    [\n      {\n        viewColumnId: \"d1\",\n        viewColumnType: \"RAW\",\n        columnPath: `main.${columnId2} > ${columnId1}`,\n        viewColumnName: \"学年\",\n      },\n      {\n        viewColumnId: \"d2\",\n        viewColumnType: \"RAW\",\n        columnPath: `main.${columnId3}`,\n        viewColumnName: \"氏名\",\n      },\n    ],\n    [],\n    []\n  );\n  const matrix = await runSqlReadOnly(sql1,{});\n  if( matrix.length !== 1 ){\n    throw new Error(`テスト結果が想定とは異なります。\\n現状: matrix = ${JSON.stringify(matrix,null,2)}`);\n  }\n  if( matrix[0]['d1'] !== 3 ){\n    throw new Error(`テスト結果が想定とは異なります。\\n現状: matrix = ${JSON.stringify(matrix,null,2)}`);\n  }\n  if( matrix[0]['d2'] !== \"田中太郎\" ){\n    throw new Error(`テスト結果が想定とは異なります。\\n現状: matrix = ${JSON.stringify(matrix,null,2)}`);\n  }\n  const { \"normalSQL\": sql2 } = await generateSQL(\n    tableId1,\n    [\n      {\n        viewColumnId: \"d1\",\n        viewColumnType: \"RAW\",\n        columnPath: `main.${columnId1}`,\n        viewColumnName: \"学年\",\n      },\n      {\n        viewColumnId: \"d2\",\n        viewColumnType: \"COUNT\",\n        columnPath: `${columnId2} > main`,\n        viewColumnName: \"人数\",\n      },\n    ],\n    [],\n    []\n  );\n  const matrix2 = await runSqlReadOnly( sql2, {} );\n  await close();\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"SQLクエリを生成","functionNameEN":"generateSQL","parametersName":["tableId","viewColumns","conditionInfoList","sortOrder","onePageMaxSize"],"parametersDataType":["string",[{"viewColumnId":"string","viewColumnType":"string","columnPath":"string","viewColumnName":"string"}],[{"viewColumnId":"string","conditionalExpression":"string"}],[{"viewColumnId":"string","isAscending":"boolean"}],"number_nullable"],"returnValue":{"normalSQL":"string","countSQL":"string"},"functionId":"01HM5XB7TG9BDSEM6QQKMQ07P7","beforeCode":"\n\n","innerCode":"\n  // viewColumns の例\n  //   [\n  //     {\n  //       viewColumnId: \"d28\",\n  //       viewColumnType: \"RAW\",\n  //       columnPath: \"main.c2 > c53 > c1\",\n  //       viewColumnName: \"○○\",\n  //     },\n  //     {\n  //       viewColumnId: \"d66\",\n  //       viewColumnType: \"COUNT\",           // 集合関数。RAW, SUM、MAX、MIN、AVG、COUNT のいずれか。関数を使用しない場合はRAWを代入する。\n  //       columnPath: \"c89 > c67 > main\",\n  //       viewColumnName: \"○○の件数\",\n  //     },\n  //     {\n  //       viewColumnId: \"d43\",\n  //       viewColumnType: \"MAX\",\n  //       columnPath: \"c45 > c56 > main\",\n  //       viewColumnName: \"○○の最大値\",\n  //     }\n  //   ]\n  //\n  // conditionInfoList の例\n  //   [\n  //     {\n  //       viewColumnId: \"d66\",\n  //       conditionalExpression: \"=\",       // !=, =, >, <, <=, >= のいずれか\n  //     }\n  //   ]\n  //\n  // sortOrder の例\n  //   [\n  //     {\n  //       viewColumnId: \"d78\",\n  //       isAscending: true,\n  //     }\n  //   ]\n  for( const { columnPath } of viewColumns ){\n    // パスの文法をチェックする\n    await checkPath( columnPath );\n  }\n  //\n  // テーブルを結合するために、外部キーの一覧を作成する（重複しないように）\n  const joinIdMap = await getJoinIdMap( viewColumns );\n  //\n  // 結合しているテーブルが重複しているか（ true:重複あり、false:重複無し ）\n  const isDuplication = await checkTableDuplication( tableId, joinIdMap );\n  //\n  const selectData = await getSelectData( viewColumns, joinIdMap );\n  const joinData = await getJoinData( joinIdMap );\n  const whereData = await getWhereData( viewColumns, conditionInfoList, joinIdMap );\n  const orderData = await getOrderData( viewColumns, sortOrder, joinIdMap );\n  //\n  let normalSQL;\n  let countSQL;\n  if( isDuplication === true ){\n    // 重複しているテーブルを結合する場合、「テーブル名 AS 別名」と記入する必要がある。\n    normalSQL = await generateSQLwithDuplication( tableId, selectData, joinData, whereData, orderData, false, onePageMaxSize );\n    countSQL = await generateSQLwithDuplication( tableId, selectData, joinData, whereData, orderData, true, onePageMaxSize );\n  }\n  else{\n    // テーブルが重複していない場合\n    normalSQL = await generateSQLwithoutDuplication( tableId, selectData, joinData, whereData, orderData, false, onePageMaxSize );\n    countSQL = await generateSQLwithoutDuplication( tableId, selectData, joinData, whereData, orderData, true, onePageMaxSize );\n  }\n  return {\n    normalSQL,\n    countSQL\n  };\n","afterCode":"\n\n\n"}]