[{"functionNameJP":"SQLクエリを生成","functionNameEN":"generateSQL","parametersName":["tableId","parentColumnLists","childColumnLists","conditions"],"parametersDataType":["string",{"string":[]},{"string":{"type":"string","path":["string"]}},{"string":{"type":"string","value":"number"}}],"returnValue":{"sql":"string","parameters":"any"},"functionId":"01HM5XB7TG9BDSEM6QQKMQ07P7","beforeCode":"\n\n","innerCode":"\n  // parentColumnLists の例\n  //   {\n  //     \"ASで表示する文字列\" : [ c8 ],\n  //     \"○○○\" : [ c5 ],\n  //     \"○○○\" : [ c4 ],\n  //     \"○○○\" : [ c2 > c51 ],\n  //     \"○○○\" : [ c2 > c52 ],\n  //     \"○○○\" : [ c2 > c53 > c1 ]\n  //   }\n  //\n  // childColumnLists の例\n  //   {\n  //     \"○○の件数\" : {\n  //       type: \"COUNT\",\n  //       path: [ c89 > c67 > メインテーブル ],\n  //     },\n  //     \"○○の最大値\" : {\n  //       type: \"MAX\",\n  //       path: [ c45 > c56 > メインテーブル ],\n  //     }\n  //   }\n  //\n  // conditions の例\n  //   {\n  //     \"ASで表示する文字列\" : {\n  //       type: \"=\",\n  //       value: 0,\n  //     },\n  //   }\n  //\n  // テーブルを結合するために、外部キーの一覧を作成する（重複しないように）\n  const foreignKeys = new Set();\n  for( const parentColumnList of parentColumnLists ){\n    // 配列「parentColumnLists」の例  …  [ \"c2\", \"c53\", \"c1\" ]\n    //   テーブルを結合させるために、配列の最後から二番目まで繰り返す\n    for( let i=0; i<parentColumnList.length - 1; i++ ){\n      const pathText = parentColumnList.slice(0, i+1).join(\">\");\n      foreignKeys.add(pathText);\n    }\n  }\n  //\n  // 結合しているテーブルが重複しているか（ true:重複あり、false:重複無し ）\n  const isDuplication = _checkTableDuplication( tableId, foreignKeys );\n  //\n  for( const foreignKey of foreignKeys ){\n    const columns = foreignKey.slice(\">\");\n    const columnId = columns[columns.length-1];\n    const parentTableId = await getParentTableId( columnId );\n  }\n  //\n  // カラムの一覧を取得\n  const columns = await listColumnsAll( tableId );\n  //\n  if( isDuplication === true ){\n    // 重複しているテーブルを結合する場合、「テーブル名 AS 別名」と記入する必要がある。\n    return await generateSQLwithDuplication( tableId, countTableIdList );\n  }\n  else{\n    // テーブルが重複していない場合\n    return await generateSQLwithoutDuplication( tableId, countTableIdList );\n  }\n","afterCode":"\n\n\n// 結合しているテーブルが重複しているかチェックする関数\nfunction _checkTableDuplication( tableId, foreignKeys ){\n  const tables = new Set();\n  tables.add(tableId);\n  for( const foreignKey of foreignKeys ){\n    const columns = foreignKey.slice(\">\");\n    const columnId = columns[columns.length-1];\n    const parentTableId = await getParentTableId( columnId );\n    if( !parentTableId ){\n      // 通常のカラムの場合\n      continue;\n    }\n    // 外部キーの場合\n    if( tables.has(parentTableId) ){\n      // 重複あり\n      return true;\n    }\n    tables.add(parentTableId);\n  }\n  // 重複無し\n  return false;\n}"}]