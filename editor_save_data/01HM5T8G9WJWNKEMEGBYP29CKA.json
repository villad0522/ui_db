[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n  await startUp(\"http://localhost:3000/\", true);\n  //\n  const { tableId: tableId1 } = await createTable(\"学年\");\n  await createColumn( tableId1, \"学年\", \"INTEGER\", null );\n  //\n  const { tableId: tableId2 } = await createTable(\"名簿\");\n  await createColumn( tableId2, \"氏名\", \"TEXT\", null );\n  const { columnId } = await createColumn( tableId2, \"学年\", \"POINTER\", tableId1 );\n  //\n  const { sql } = await generateSQL(\n    tableId2,\n    [\n      {\n        displayColumnId: \"d1\",\n        type: \"RAW\",\n        path: `main.${columnId}`,\n        as: \"氏名\",\n      },\n    ],\n    [],\n    []\n  );\n  const matrix = await runSqlReadOnly(sql,{});\n  console.log(matrix);\n  await close();\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"SQLクエリを生成","functionNameEN":"generateSQL","parametersName":["tableId","displayColumns","conditions","sortOrder"],"parametersDataType":["string",[{"displayColumnId":"string","type":"string","path":"string","as":"string"}],[{"displayColumnId":"string","type":"string","value":"number"}],[{"displayColumnId":"string","isAscending":"boolean"}]],"returnValue":{"sql":"string","parameters":"any"},"functionId":"01HM5XB7TG9BDSEM6QQKMQ07P7","beforeCode":"\n\n","innerCode":"\n  // displayColumns の例\n  //   [\n  //     {\n  //       displayColumnId: \"d28\",\n  //       type: \"RAW\",\n  //       path: \"main.c2 > c53 > c1\",\n  //       as: \"○○\",\n  //     },\n  //     {\n  //       displayColumnId: \"d66\",\n  //       type: \"COUNT\",           // 集合関数。RAW, SUM、MAX、MIN、AVG、COUNT のいずれか。関数を使用しない場合はRAWを代入する。\n  //       path: \"c89 > c67 > main\",\n  //       as: \"○○の件数\",\n  //     },\n  //     {\n  //       displayColumnId: \"d43\",\n  //       type: \"MAX\",\n  //       path: \"c45 > c56 > main\",\n  //       as: \"○○の最大値\",\n  //     }\n  //   ]\n  //\n  // conditions の例\n  //   [\n  //     {\n  //       displayColumnId: \"d66\",\n  //       type: \"=\",       // !=, =, >, <, <=, >= のいずれか\n  //       value: 0,\n  //     }\n  //   ]\n  //\n  // sortOrder の例\n  //   [\n  //     {\n  //       displayColumnId: \"d78\",\n  //       isAscending: true,\n  //     }\n  //   ]\n  for( const { path } of displayColumns ){\n    // パスの文法をチェックする\n    await checkPath( path );\n  }\n  //\n  // テーブルを結合するために、外部キーの一覧を作成する（重複しないように）\n  const joinIdMap = await getJoinIdMap( displayColumns );\n  //\n  // 結合しているテーブルが重複しているか（ true:重複あり、false:重複無し ）\n  const isDuplication = await checkTableDuplication( tableId, joinIdMap );\n  //\n  const selectData = await getSelectData( displayColumns, joinIdMap );\n  const joinData = await getJoinData( joinIdMap );\n  const whereData = await getWhereData( displayColumns, conditions, joinIdMap );\n  const orderData = await getOrderData( displayColumns, sortOrder, joinIdMap );\n  //\n  if( isDuplication === true ){\n    // 重複しているテーブルを結合する場合、「テーブル名 AS 別名」と記入する必要がある。\n    return await generateSQLwithDuplication( tableId, selectData, joinData, whereData, orderData );\n  }\n  else{\n    // テーブルが重複していない場合\n    return await generateSQLwithDuplication( tableId, selectData, joinData, whereData, orderData );\n    //return await generateSQLwithoutDuplication( tableId, selectData, joinData, whereData, orderData );\n  }\n","afterCode":"\n\n\n"}]