[{"functionNameJP":"プログラム起動","functionNameEN":"startUp","parametersName":["localUrl","isDebug"],"parametersDataType":["string_nullable","boolean"],"returnValue":"void","functionId":"01HM5TB8F0D0224D3CKEDZC21H","beforeCode":"\n","innerCode":"\n  await startUp( localUrl, isDebug );   // 下層の関数を呼び出す\n  try {\n    // テーブルを作成する（ソート番号を保存するため）\n    await reserveWord(\"sort_numbers\"); // 予約語に登録\n    await runSqlWriteOnly(\n      `CREATE TABLE IF NOT EXISTS sort_numbers (\n        table_id TEXT NOT NULL,\n        record_id INTEGER NOT NULL,\n        sort_number REAL NOT NULL DEFAULT '1',\n        UNIQUE( table_id, record_id )\n      );`,\n      {},\n    );\n  }\n  catch (err) {\n    throw `システム管理用テーブルの作成に失敗しました。${String(err)}`;\n  }\n  await _reload();    // メモリに再読み込み\n","afterCode":""},{"functionNameJP":"レコードの一覧を取得","functionNameEN":"listRecords","parametersName":["tableId","pageNumber_records","onePageMaxSize","isTrash"],"parametersDataType":["string","number","number","boolean"],"returnValue":{"records":[{"string":"any"}],"records_total":"number"},"functionId":"01HM5XB7TG9BDSEM6QQKMQ07P7","beforeCode":"\n\n//【サブ関数】メモリに再読み込み\nasync function _reload() \n{ throw \"この関数は未実装です。\";\n}\n\n","innerCode":"\n     //\n    let sql = \"\";\n    sql += `SELECT\\n`;\n    sql += `  sort_numbers.sort_number AS sort_number\\n`;\n    sql += `FROM \"${tableId}\" AS main_table\\n`;\n    sql += `  LEFT OUTER JOIN sort_numbers\\n`;\n    sql += `    ON ( main_table.record_id = sort_numbers.record_id AND sort_numbers.table_id = '${tableId}' )\\n`;\n    sql += joinCommand;\n    sql += `  WHERE ${await _whereCommand()}\\n`\n    sql += `  LIMIT ${limit};\\n`;\n    //\n    // ダブルクォーテーションを、バッククォートに置き換える\n    sql = sql.replace(/\"/g, '`');\n    //\n    console.log( sql );\n","afterCode":"\n\nasync function _whereCommand(){\n\n}"}]