[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n    await startUp(\"http://localhost:3000/\", true);\n    await createTable(\"クラス一覧\");\n    const {tableId} = await createTable(\"名簿\");\n    await createColumn( tableId, \"c1\", \"INTEGER\" );\n    await createColumn( tableId, \"c2\", \"REAL\" );\n    await createColumn( tableId, \"c3\", \"TEXT\" );\n    await createColumn( tableId, \"c4\", \"BOOL\" );\n    await checkTableEnabled( tableId );\n    await disableTable( tableId );\n    await enableTable( tableId );\n    await checkTableEnabled( tableId );\n    await clearCache();\n    await updateTableName({\n        \"id\": tables,\n        \"name\": \"変更後のテーブル名\",\n    });\n    const { tables } = await listTables( 1, 100, false );\n    if(tables.length!==2){\n        throw \"テーブルの個数が想定外です\";\n    }\n    const matrix = await runSqlReadOnly(`SELECT * FROM 変更後のテーブル名`,{});\n    await runSqlWriteOnly(`SELECT * FROM 変更後のテーブル名`,{});\n    await listDataTypes( tableId );\n    const tableName = await getTableName( tableId );\n    if(tableName!==\"変更後のテーブル名\"){\n        throw \"想定外のテーブル名です\";\n    }\n    await deleteTable(tableId);\n    await close();\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"プログラム起動","functionNameEN":"startUp","parametersName":["localUrl","isDebug"],"parametersDataType":["string_nullable","boolean"],"returnValue":"void","functionId":"01HM3F8XKW1HFKGW5H7RFMYD0C","beforeCode":"\n\n\n\n\n","innerCode":"\n    await startUp( localUrl, isDebug );   // 下層の関数を呼び出す\n    //\n    // テーブルを作成する（テーブルの存在を保存するため）\n    await runSqlWriteOnly(\n        `CREATE TABLE IF NOT EXISTS table_names (\n            \"table_number\" INTEGER PRIMARY KEY AUTOINCREMENT,\n            \"table_name\" TEXT NOT NULL,\n            \"enable\" INTEGER NOT NULL DEFAULT 1,\n            \"created_at\" INTEGER NOT NULL\n        );`,\n        {},\n    );\n    await _reload();    // メモリに再読み込み\n","afterCode":""},{"functionNameJP":"インメモリキャッシュを削除する","functionNameEN":"clearCache","parametersName":[],"parametersDataType":[],"returnValue":"void","functionId":"01HM3F9PXH8EXRT7V7N9S28YGF","beforeCode":"\n\n//【グローバル変数】テーブル名を保存するキャッシュ\nlet cacheData1 = {\n    // データの例\n    // \"t2\": \"テーブル名１\",\n    // \"t8\": \"テーブル名２\"\n};\n\n//【サブ関数】メモリに再読み込み\nasync function _reload() {\n    const matrix = await runSqlReadOnly(\n        `SELECT\n            table_number AS tableNumber,\n            table_name AS tableName\n        FROM table_names\n        WHERE enable = 1;`,\n        {},\n    );\n    cacheData1 = {};\n    for (const { tableNumber, tableName } of matrix) {\n        const tableId = \"t\" + String(tableNumber);\n        cacheData1[tableId] = tableName;\n    }\n}\n\n","innerCode":"\n    await _reload();    // メモリに再読み込み\n    return await clearCache();   // 下層の関数を呼び出す\n","afterCode":""},{"functionNameJP":"テーブルを作成","functionNameEN":"createTable","parametersName":["tableName"],"parametersDataType":["string"],"returnValue":{"message":"string","tableId":"string"},"functionId":"01HM3FA7KYR69753F0SEZNV80C","beforeCode":"\n\n","innerCode":"\n    // テーブル名が重複していないかチェックする\n    const tables1 = await runSqlReadOnly(\n        `SELECT *\n        FROM table_names\n        WHERE enable = 1\n          AND table_name = :tableName;`,\n      {\n          \":tableName\": tableName,\n      },\n    );\n    if (tables1.length>0) {\n        throw `テーブル名「${tableName}」は重複しています。`;\n    }\n    const timestamp = new Date().getTime();\n    await runSqlWriteOnly(\n        `INSERT INTO table_names (table_name, created_at)\n            VALUES ( :tableName, :createdAt );`,\n        {\n            \":tableName\": tableName,\n            \":createdAt\": timestamp,\n        },\n    );\n    const tables2 = await runSqlReadOnly(\n        `SELECT table_number FROM table_names\n            WHERE table_name = :tableName\n                AND created_at = :createdAt\n            LIMIT 1;`,\n        {\n            \":tableName\": tableName,\n            \":createdAt\": timestamp,\n        },\n    );\n    if(tables2.length===0){\n        throw \"追加したはずのテーブルが見つかりません。\";\n    }\n    const tableNumber = tables2[0][\"table_number\"];\n    if(isNaN(tableNumber)){\n        throw \"新しく発行されたテーブルIDが見つかりません。\";\n    }\n    const tableId = \"t\" + tableNumber;\n    await createTable( tableId );   // 下層の関数を呼び出す\n    await _reload();    // メモリに再読み込み\n    return {\n        tableId: tableId,\n        message: `テーブル「${tableName}」を作成しました。`,\n    };\n","afterCode":""},{"functionNameJP":"不可逆的にテーブルを削除","functionNameEN":"deleteTable","parametersName":["tableId"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HM3FBB33TCXTHW0Y5B2A3T0H","beforeCode":"\n\n","innerCode":"\n    await runSqlWriteOnly(\n        `DELETE FROM table_names\n            WHERE table_number = :tableNumber;`,\n        {\n            \":tableNumber\": tableId.replace(\"t\",\"\"),\n        },\n    );\n    await _reload();    // メモリに再読み込み\n    return await deleteTable( tableId );  // 下層の関数を実行する\n","afterCode":""},{"functionNameJP":"テーブルを無効化","functionNameEN":"disableTable","parametersName":["tableId"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HM3FD3PHMXEXSWBE89DSQD17","beforeCode":"\n\n","innerCode":"\n    await runSqlWriteOnly(\n        `UPDATE table_names\n            SET enable = 0\n            WHERE table_number = :tableNumber;`,\n        {\n            \":tableNumber\": tableId.replace(\"t\",\"\"),\n        },\n    );\n    await _reload();    // メモリに再読み込み\n    return \"テーブルを無効化しました\";\n","afterCode":""},{"functionNameJP":"テーブルを再度有効化","functionNameEN":"enableTable","parametersName":["tableId"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HM3FDGEVNB6J7D839HA262KS","beforeCode":"\n\n","innerCode":"\n    const tables = await runSqlReadOnly(\n        `SELECT\n            t2.table_name AS tableName\n        FROM table_names AS t1\n        INNER JOIN table_names AS t2\n            ON t1.table_name = t2.table_name\n            AND t1.table_number <> t2.table_number\n        WHERE t1.table_number = :tableNumber\n            AND t2.enable = 1\n        LIMIT 1;`,\n        {\n            \":tableNumber\": tableId.replace(\"t\",\"\"),\n        },\n    );\n    if(tables.length>=1){\n        const tableName = tables[0][\"tableName\"];\n        throw `テーブル名「${tableName}」は重複しています。`;\n    }\n    await runSqlWriteOnly(\n        `UPDATE table_names\n            SET enable = 1\n            WHERE table_number = :tableNumber;`,\n        {\n            \":tableNumber\": tableId.replace(\"t\",\"\"),\n        },\n    );\n    await _reload();    // メモリに再読み込み\n    return \"テーブルを有効化しました\";\n","afterCode":""},{"functionNameJP":"テーブル名を変更","functionNameEN":"updateTableName","parametersName":["tables"],"parametersDataType":[[{"id":"string","name":"string"}]],"returnValue":"string","functionId":"01HM3JBPT13CTBB9DZYD7HQBFZ","beforeCode":"\n\n","innerCode":"\n    //==========================================================\n    // テーブル名が重複していないか確認する\n    await _reload();\n    const obj = structuredClone(cacheData1);    // ディープコピー\n    // データの例\n    // obj = {\n    //     \"t2\": \"テーブル名１\",\n    //     \"t8\": \"テーブル名２\"\n    // };\n    for (const { id, name } of tables) {\n        obj[id] = name;\n    }\n    // この時点で、連想配列「obj」には、全てのテーブル一覧が格納されている。\n    // データの例\n    // obj = {\n    //     \"t2\": \"変更後のテーブル名１\",\n    //     \"t8\": \"テーブル名２\"\n    // };\n    for (const { id, name } of tables) {\n        const newObj = structuredClone(obj);    // ディープコピー\n        //\n        // 自分自身を除いた、他のテーブルと名前が被っていないか確認する\n        delete newObj[id];    //自分自身を除く\n        const tableNameArray = Object.values(newObj);\n        if (tableNameArray.includes(name)) {\n            throw `テーブル名「${name}」は重複しています。`;\n        }\n    }\n    //\n    //==========================================================\n    // テーブル名を変更する\n    for (const { id, name } of tables) {\n        let tableNumber = id.replace(\"t\",\"\");\n        if(isNaN(tableNumber)){\n            throw \"指定されたテーブルIDは無効です。\";\n        }\n        tableNumber = Number(tableNumber);\n        await runSqlWriteOnly(\n            `UPDATE table_names\n                SET table_name = :tableName\n                WHERE table_number = :tableNumber;`,\n            {\n                \":tableName\": name,\n                \":tableNumber\": tableNumber,\n            },\n        );\n    }\n    //==========================================================\n    await _reload();    // メモリに再読み込み\n    return \"テーブル名を変更しました\";\n","afterCode":""},{"functionNameJP":"テーブルの一覧を取得(重)","functionNameEN":"listTables","parametersName":["pageNumber","onePageMaxSize","isTrash"],"parametersDataType":["number","number","boolean"],"returnValue":{"tables":[{"id":"string","name":"string"}],"total":"number"},"functionId":"01HM3JXCNA6V88MQG3FHAFSV92","beforeCode":"\n\n\n","innerCode":"\n    if (!(pageNumber >= 1)) {\n        pageNumber = 1;\n    }\n    const [{ \"COUNT(*)\": total }] = await runSqlReadOnly(\n        `SELECT COUNT(*)\n            FROM table_names\n            WHERE enable = :isEnable;`,\n        {\n            // 現存するテーブル一覧を取得する場合は１\n            // 削除済みのテーブル一覧を取得する場合は０\n            \":isEnable\": isTrash ? 0 : 1,\n        },\n    );\n    let offset = onePageMaxSize * (pageNumber - 1);\n    if( offset >= total ){\n        offset = total;\n    }\n    // 「sqlite_master」と結合させることで、実際に存在するテーブルのみに絞り込む\n    const matrix = await runSqlReadOnly(\n        `SELECT\n            ( \"t\" || table_names.table_number ) AS id,\n            table_names.table_name AS name\n        FROM table_names\n        INNER JOIN sqlite_master\n            ON ( \"t\" || table_names.table_number ) = sqlite_master.name\n        WHERE table_names.enable = :isEnable\n        ORDER BY table_names.created_at DESC\n        LIMIT :limit OFFSET :offset;`,\n        {\n            // 現存するテーブル一覧を取得する場合は１\n            // 削除済みのテーブル一覧を取得する場合は０\n            \":isEnable\": isTrash ? 0 : 1,\n            \":limit\": onePageMaxSize,\n            \":offset\": offset,\n        },\n    );\n    return {\n        \"tables\": matrix,\n        \"total\": total,\n    }\n","afterCode":""},{"functionNameJP":"SQLクエリ実行（読み取り専用）","functionNameEN":"runSqlReadOnly","parametersName":["sql","params"],"parametersDataType":["string",{"string":"any"}],"returnValue":[{"string":"any"}],"functionId":"01HM3KTENYGV4KKYJANASW5CQM","beforeCode":"\n\n\n","innerCode":"\n    //入力パラメータに含まれるテーブル名をIDに置き換える\n    for( const tableId in cacheData1 ){\n        const tableName = cacheData1[tableId];\n        sql = sql.replaceAll( tableName, tableId );\n    }\n    return await runSqlReadOnly( sql, params );  // 下層の関数を実行する\n","afterCode":""},{"functionNameJP":"SQLクエリ実行（書き込み専用）","functionNameEN":"runSqlWriteOnly","parametersName":["sql","params"],"parametersDataType":["string",{"string":"any"}],"returnValue":"void","functionId":"01HM3M06JC2EHAXJ77ZM0Q8E7N","beforeCode":"\n\n\n","innerCode":"\n    //入力パラメータに含まれるテーブル名をIDに置き換える\n    for( const tableId in cacheData1 ){\n        const tableName = cacheData1[tableId];\n        sql = sql.replaceAll( tableName, tableId );\n    }\n    return await runSqlWriteOnly( sql, params );  // 下層の関数を実行する\n","afterCode":""},{"functionNameJP":"テーブルが有効なのか判定","functionNameEN":"checkTableEnabled","parametersName":["tableId"],"parametersDataType":["string"],"returnValue":"boolean","functionId":"01HM84P7VEDTJJX2N0JC8P4VEA","beforeCode":"\n\n\n","innerCode":"\n    return cacheData1[tableId] ? true : false;\n","afterCode":""},{"functionNameJP":"IDからテーブル名を取得","functionNameEN":"getTableName","parametersName":["tableId"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HM922PPCJVX86SGF68VCBDDH","beforeCode":"\n\n","innerCode":"\n  return cacheData1[tableId];\n","afterCode":"\n"}]