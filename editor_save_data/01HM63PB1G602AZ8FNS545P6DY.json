[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n    await startUp(\"http://localhost:3000/\", true);\n    //\n    const { tableId: tableId1 } = await createTable(\"学年\");\n    const { columnId: columnId1 } = await createColumn( tableId1, \"学年\", \"INTEGER\", null );\n    const { recordId: recordId } = await createRecord( tableId1, {\n      [columnId1]: 3,\n    });\n    //\n    const { tableId: tableId2 } = await createTable(\"名簿\");\n    const { columnId: columnId2  } = await createColumn( tableId2, \"学年\", \"POINTER\", tableId1 );\n    const { columnId: columnId3  } = await createColumn( tableId2, \"氏名\", \"TEXT\", null );\n    await createRecord( tableId2, {\n      [columnId2]: recordId,\n      [columnId3]: \"田中太郎\",\n    });\n    //\n    if(await getParentTableId(columnId2)!==tableId1){\n      throw \"想定外のテスト結果です\";\n    }\n    //\n    await listColumnsAll( tableId2 );\n    await listColumnsForGUI( tableId2, 1, 100, false );\n    //\n    await disableTable( tableId2 );\n    await listColumnsForGUI( tableId2, 1, 100, false );\n    //\n    await disableColumn( columnId2 );\n    await listColumnsForGUI( tableId2, 1, 100, false );\n    //\n    await deleteTable(tableId2);\n    await close();\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"プログラム起動","functionNameEN":"startUp","parametersName":["localUrl","isDebug"],"parametersDataType":["string_nullable","boolean"],"returnValue":"void","functionId":"01HM63PB1RAAE32JJ8BF6H7EN9","beforeCode":"\n\n\n\n","innerCode":"\n  await startUp( localUrl, isDebug );   // 下層の関数を呼び出す\n  //\n  // テーブルを作成する（リレーションを保存するため）\n  await reserveWord(\"relations\"); // 予約語に登録\n  await runSqlWriteOnly(\n    `CREATE TABLE IF NOT EXISTS relations (\n      child_column_id TEXT PRIMARY KEY,\n      child_table_id TEXT NOT NULL,\n      parent_table_id TEXT NOT NULL\n    );`,\n    {},\n  );\n  await _reload();    // メモリに再読み込み\n","afterCode":""},{"functionNameJP":"カラムを作成","functionNameEN":"createColumn","parametersName":["tableId","columnName","dataType","parentTableId"],"parametersDataType":["string","string","string","string_nullable"],"returnValue":{"message":"string","columnId":"string"},"functionId":"01HM6455ZHTM4YA8SYX6PY2FTG","beforeCode":"\n\nlet cacheData1 = {\n  // 代入例\n  //  \"c23\": \"t4\",\n  //  \"c56\": \"t6\",\n  //  \"c98\": \"t6\",\n  // 参照元のカラム名 : 参照先のテーブル名\n  //    childColumnId : parentTableId\n};\n\nlet cacheData2 = {\n  // 代入例\n  //  \"t4\": [ \"c23\" ],\n  //  \"t6\": [ \"c56\", \"c98\" ]\n  // 参照先のテーブル名 : 参照元のカラム名の配列\n  //      parentTableId : [ childColumnId ]\n};\n\n\n//【サブ関数】メモリに再読み込み\nasync function _reload() {\n  const matrix = await runSqlReadOnly(\n    `SELECT\n      child_column_id AS childColumnId,\n      child_table_id AS childTableId,\n      parent_table_id AS parentTableId\n    FROM relations;`,\n    {},\n  );\n  cacheData1 = {};\n  cacheData2 = {};\n  for( const { childColumnId, childTableId, parentTableId } of matrix ){\n    if(!cacheData2[parentTableId]){\n      cacheData2[parentTableId] = [];\n    }\n    cacheData1[childColumnId] = parentTableId;\n    cacheData2[parentTableId].push( childColumnId );\n  }\n}\n\n\n","innerCode":"\n  if( dataType !== \"POINTER\" && !parentTableId ){\n    // 外部キーではない場合\n    return await createColumn( tableId, columnName, dataType );\n  }\n  // 外部キーの場合\n  if( dataType !== \"POINTER\" ){\n    throw `外部キーを作成する際は、dataTypeに\"POINTER\"を指定したうえで、parentTableIdも指定してください。`;\n  }\n  if( !parentTableId ){\n    throw `外部キーを作成する際は、dataTypeに\"POINTER\"を指定したうえで、parentTableIdも指定してください。`;\n  }\n  const result = await createColumn( tableId, columnName, \"INTEGER\" );\n  await runSqlWriteOnly(\n    `INSERT INTO relations( child_column_id, child_table_id, parent_table_id )\n        VALUES ( :childColumnId, :childTableId, :parentTableId );`,\n    {\n        \":childColumnId\": result.columnId,\n        \":childTableId\": tableId,\n        \":parentTableId\": parentTableId\n    },\n  );\n  await _reload();    // メモリに再読み込み\n  return result;\n","afterCode":""},{"functionNameJP":"カラムの一覧を取得(GUI)","functionNameEN":"listColumnsForGUI","parametersName":["tableId","pageNumber","onePageMaxSize","isTrash"],"parametersDataType":["string","number_nullable","number","boolean"],"returnValue":{"columns":[{"id":"string","name":"string","dataType":"string","parentTableId":"string_nullable"}],"total":"number"},"functionId":"01HM80XXA6WXJKF50TYC30QZZN","beforeCode":"\n\n\n","innerCode":"\n  // 下層の関数を実行する\n  const { columns, total } = await listColumnsForGUI( tableId, pageNumber, onePageMaxSize, isTrash );\n  //\n  // 参照先が有効なカラムだけに絞り込む\n  const columns2 = [];\n  for (const columnData of columns ) {\n    const parentTableId = cacheData1[columnData.id];\n    if(!parentTableId){ \n      // もし外部キーではなかったら、一覧に残す\n      columns2.push(columnData);\n      continue;\n    }\n    const isEnabled = await checkTableEnabled(parentTableId);\n    if( isEnabled === false ){\n      // もし参照先が無効なテーブルだったら、一覧から取り除く\n      continue;\n    }\n    // もし参照先が無効なテーブルだったら、一覧に残す\n    columns2.push(columnData);\n    continue;\n  }\n  //\n  // 下層から得たカラムの一覧に、「parentTableId」を付け加えて上層に提供する\n  for (let i = 0; i < columns2.length; i++ ) {\n    const columnId = columns2[i].id;\n    columns2[i].parentTableId = cacheData1[ columnId ] ?? null;\n    if(cacheData1[columnId]){\n      columns2[i].dataType = \"POINTER\";\n    }\n  }\n  return {\n    \"columns\": columns2,\n    \"total\": total,\n  }\n","afterCode":""},{"functionNameJP":"インメモリキャッシュを削除する","functionNameEN":"clearCache","parametersName":[],"parametersDataType":[],"returnValue":"void","functionId":"01HM821K3XXGS308J37QP2FB07","beforeCode":"\n\n\n","innerCode":"\n    await _reload();    // メモリに再読み込み\n    return await clearCache();   // 下層の関数を呼び出す\n","afterCode":""},{"functionNameJP":"不可逆的にテーブルを削除","functionNameEN":"deleteTable","parametersName":["tableId"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HM825DB2KVRGJSWPCD5PBNWK","beforeCode":"\n\n\n","innerCode":"\n  // 参照先を失った外部キーは、「relations」のデータを消すことで\n  // ただの整数型に変化する\n  await runSqlWriteOnly(\n    `DELETE FROM relations\n        WHERE child_table_id = :childTableId;`,\n    {\n      \":childTableId\": tableId,\n    },\n  );\n  await runSqlWriteOnly(\n    `DELETE FROM relations\n        WHERE parent_table_id = :parentTableId;`,\n    {\n      \":parentTableId\": tableId,\n    },\n  );\n  await _reload();    // メモリに再読み込み\n  return await deleteTable( tableId );  // 下層の関数を実行する\n","afterCode":""},{"functionNameJP":"カラムの一覧を取得","functionNameEN":"listColumnsAll","parametersName":["tableId"],"parametersDataType":["string"],"returnValue":[{"id":"string","name":"string","dataType":"string","parentTableId":"string_nullable"}],"functionId":"01HM8BDGCV9QYNT4B36DQP6GJ8","beforeCode":"\n\n\n","innerCode":"\n  // 下層の関数を実行する\n  const columns = structuredClone( await listColumnsAll( tableId ) );\n  //\n  // 参照先が有効なカラムだけに絞り込む\n  const columns2 = [];\n  for (const columnData of columns ) {\n    const parentTableId = cacheData1[columnData.id];\n    if(!parentTableId){ \n      // もし外部キーではなかったら、一覧に残す\n      columns2.push(columnData);\n      continue;\n    }\n    const isEnabled = await checkTableEnabled(parentTableId);\n    if( isEnabled === false ){\n      // もし参照先が無効なテーブルだったら、一覧から取り除く\n      continue;\n    }\n    // もし参照先が無効なテーブルだったら、一覧に残す\n    columns2.push(columnData);\n    continue;\n  }\n  //\n  // 下層から得たカラムの一覧に、「parentTableId」を付け加えて上層に提供する\n  for (let i = 0; i < columns2.length; i++ ) {\n    const columnId = columns2[i].id;\n    columns2[i].parentTableId = cacheData1[ columnId ] ?? null;\n    if(cacheData1[columnId]){\n      columns2[i].dataType = \"POINTER\";\n    }\n  }\n  return columns2;\n","afterCode":""},{"functionNameJP":"参照先のテーブルIDを取得する","functionNameEN":"getParentTableId","parametersName":["columnId"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HMBGYTAJTCPV6HMXMW9K7TQW","beforeCode":"\n\n","innerCode":"\n  return cacheData1[columnId];\n","afterCode":""},{"functionNameJP":"データ型を取得","functionNameEN":"getDataType","parametersName":["columnId"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HMFJNJJ5QK6VJC59FZFF90WH","beforeCode":"\n\n\n\n","innerCode":"\n  if(cacheData1[columnId]){\n    return \"POINTER\";\n  }\n  else{\n    return await getDataType( columnId );\n  }\n","afterCode":""},{"functionNameJP":"フィールドを検証","functionNameEN":"checkField","parametersName":["columnId","value"],"parametersDataType":["string","any"],"returnValue":{"isOK":"boolean","message":"string"},"functionId":"01HMK46CJQ4GBQ6BWM4GZR8G82","beforeCode":"\n\n\n","innerCode":"\n  const {isOK,message} =  await _checkField( columnId, value );\n  if(isOK===false){\n    return {\n      isOK: false,\n      message: message,\n    };\n  }\n  return await checkField( columnId, value ); // 下層の関数を呼び出す\n","afterCode":""},{"functionNameJP":"レコードを検証","functionNameEN":"checkRecord","parametersName":["tableId","recordData"],"parametersDataType":["string",{"string":"any"}],"returnValue":{"isOK":"boolean","message":"string"},"functionId":"01HMK491TGVH0EHNVDRNYNAEV4","beforeCode":"\n\n\n// フィールドを検証\nasync function _checkField( columnId, value ){\n  const parentTableId = cacheData1[columnId];\n  if( !parentTableId ){\n    return {\n      isOK: true,\n      message: \"外部キーではありません\",\n    };\n  }\n  // 外部キーの場合\n  if( typeof value !== \"number\" || isNaN(value) ){\n    return {\n      isOK: false,\n      message: \"数値ではありません。\",\n    };\n  }\n  const parentColumnId = await getPrimaryKey(parentTableId);\n  const matrix = await runSqlReadOnly(\n    `SELECT *\n    FROM ${parentTableId}\n    WHERE ${parentColumnId} = :recordId\n    LIMIT 1;`,\n    {\n      \":recordId\": value,\n    },\n  );\n  if(matrix.length===0){\n    const parentTableName = await getTableName( parentTableId );\n    return {\n      isOK: false,\n      message: `参照先のデータが見つかりません。\\nテーブル : ${parentTableName}(${parentTableId})\\n主キー : ${parentColumnId}\\nレコードID : ${value}`,\n    };\n  }\n  return {\n    isOK: true,\n    message: \"データ型に適合しています。\",\n  };\n}\n\n\n// レコードを検証\nasync function _checkRecord( tableId, recordData ){\n  for( const columnId in recordData){\n    const {isOK,message} = await _checkField( columnId, recordData[columnId] );\n    if(isOK===false){\n      return {\n        isOK: false,\n        message: message,\n      };\n    }\n  }\n  return await checkRecord( tableId, recordData );  // 下層の関数を呼び出す\n}\n\n\n","innerCode":"\n  return await _checkRecord( tableId, recordData );\n","afterCode":""},{"functionNameJP":"レコードを作成","functionNameEN":"createRecord","parametersName":["tableId","recordData"],"parametersDataType":["string",{"string":"any"}],"returnValue":{"recordId":"number","message":"string"},"functionId":"01HMK4M26N2E1QEERWTX4QK183","beforeCode":"\n\n","innerCode":"\n  // レコードのデータ型を検証する\n  const {isOK,message} = await _checkRecord( tableId, recordData );\n  if( isOK===false ){\n      throw message;\n  }\n  return await createRecord( tableId, recordData ); // 下層の関数を呼び出す\n","afterCode":""},{"functionNameJP":"レコードを上書き","functionNameEN":"updateRecord","parametersName":["tableId","records"],"parametersDataType":["string",[{"string":"any"}]],"returnValue":"string","functionId":"01HMK4NVP9V9J5VB1PPPZR3A6K","beforeCode":"\n\n","innerCode":"\n  for( const recordData of records ){\n    // レコードのデータ型を検証する\n    const {isOK,message} = await _checkRecord( tableId, recordData );\n    if( isOK===false ){\n        throw message;\n    }\n  }\n  return await updateRecord( tableId, records ); // 下層の関数を呼び出す\n","afterCode":"\n"}]