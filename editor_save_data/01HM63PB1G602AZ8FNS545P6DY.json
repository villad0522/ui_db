[{"functionNameJP":"プログラム起動","functionNameEN":"startUp","parametersName":["localUrl","isDebug"],"parametersDataType":["string_nullable","boolean"],"returnValue":"void","functionId":"01HM63PB1RAAE32JJ8BF6H7EN9","beforeCode":"\n","innerCode":"\n  await startUp( localUrl, isDebug );   // 下層の関数を呼び出す\n  try {\n    // テーブルを作成する（リレーションを保存するため）\n    await reserveWord(\"relations\"); // 予約語に登録\n    await runSqlWriteOnly(\n      `CREATE TABLE IF NOT EXISTS relations (\n        child_column_id TEXT PRIMARY KEY,\n        child_table_id TEXT NOT NULL,\n        parent_table_id TEXT NOT NULL,\n        semantics TEXT NOT NULL\n      );`,\n      {},\n    );\n  }\n  catch (err) {\n    throw `システム管理用テーブルの作成に失敗しました。${String(err)}`;\n  }\n  await _reload();    // メモリに再読み込み\n","afterCode":""},{"functionNameJP":"カラムを作成","functionNameEN":"createColumn","parametersName":["tableId","columnName","dataType","parentTableId","semantics"],"parametersDataType":["string","string","string","string_nullable","string_nullable"],"returnValue":{"message":"string","columnId":"string"},"functionId":"01HM6455ZHTM4YA8SYX6PY2FTG","beforeCode":"\n\n","innerCode":"\n  if( dataType !== \"POINTER\" && !parentTableId && !semantics ){\n    // 外部キーではない場合\n    return await createColumn( tableId, columnName, dataType );\n  }\n  // 外部キーの場合\n  if( dataType !== \"POINTER\" ){\n    throw `外部キーを作成する際は、dataTypeに\"POINTER\"を指定したうえで、parentTableIdとsemanticsも指定してください。`;\n  }\n  if( !parentTableId ){\n    throw `外部キーを作成する際は、dataTypeに\"POINTER\"を指定したうえで、parentTableIdとsemanticsも指定してください。`;\n  }\n  if( !semantics ){\n    throw `外部キーを作成する際は、dataTypeに\"POINTER\"を指定したうえで、parentTableIdとsemanticsも指定してください。`;\n  }\n  const result = await createColumn( tableId, columnName, \"INTEGER\" );\n  await runSqlWriteOnly(\n    `INSERT INTO relations( child_column_id, child_table_id, parent_table_id, semantics )\n        VALUES ( :childColumnId, :childTableId, :parentTableId, :semantics );`,\n    {\n        \":childColumnId\": result.columnId,\n        \":childTableId\": tableId,\n        \":parentTableId\": parentTableId,\n        \":semantics\": semantics,\n    },\n  );\n  await _reload();    // メモリに再読み込み\n  return result;\n","afterCode":"\n"}]