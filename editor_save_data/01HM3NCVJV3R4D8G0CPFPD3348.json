[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"プログラム起動","functionNameEN":"startUp","parametersName":["localUrl","isDebug"],"parametersDataType":["string_nullable","boolean"],"returnValue":"void","functionId":"01HM3NDX1HKWXH957YEQZME3V9","beforeCode":"\n\n\n\n","innerCode":"\n    await startUp( localUrl, isDebug );   // 下層の関数を呼び出す\n    //\n    // テーブルを作成する（カラムの存在を保存するため）\n    await runSqlWriteOnly(\n        `CREATE TABLE IF NOT EXISTS column_names(\n            \"column_number\" INTEGER PRIMARY KEY AUTOINCREMENT,\n            \"column_name\" TEXT NOT NULL,\n            \"table_id\" TEXT NOT NULL,\n            \"enable\" INTEGER NOT NULL DEFAULT 1,\n            \"created_at\" INTEGER UNIQUE\n        );`,\n        {},\n    );\n    await _reload();    // メモリに再読み込み\n","afterCode":""},{"functionNameJP":"インメモリキャッシュを削除する","functionNameEN":"clearCache","parametersName":[],"parametersDataType":[],"returnValue":"void","functionId":"01HM3NMSPH2GYS6AJDFAAPHQ6N","beforeCode":"\n\n//【グローバル変数】カラム名を保存するキャッシュ\nlet cacheData1 = {\n    // データの例\n    // \"c2\": \"t1_カラム名１\",\n    // \"c8\": \"t1_カラム名２\"\n};\nlet cacheData2 = {\n    //    \"t56\": [\n    //        {\n    //            \"id\": \"c34\",\n    //            \"name\": \"氏名\",\n    //            \"dataType\": \"TEXT\",\n    //        }\n    //    ]\n};\nlet cacheData3 = {\n    // データの例\n    // \"c2\": \"t1\",\n    // \"c8\": \"t1\"\n};\n\nlet cacheData4 = {\n    // データの例\n    // \"c1\": new RegExp(`(?<=^|[^a-zA-Z0-9])\\bカラム名1\\b(?=\\$|[^a-zA-Z0-9])`, \"g\"),\n    // \"c2\": new RegExp(`(?<=^|[^a-zA-Z0-9])\\bカラム名2\\b(?=\\$|[^a-zA-Z0-9])`, \"g\"),\n};\nlet cacheData5 = {\n    // データの例\n    // \"t1_カラム名１\": \"c8\",\n    // \"t1_カラム名２\": \"c88\"\n};\n\n//【サブ関数】メモリに再読み込み\nasync function _reload() {\n    const matrix = await runSqlReadOnly(\n        `SELECT\n            column_number AS columnNumber,\n            column_name AS columnName,\n            table_id AS tableId\n        FROM column_names\n        WHERE enable = 1\n        ORDER BY created_at ASC;`,\n        {},\n    );\n    cacheData1 = {};\n    cacheData2 = {};\n    cacheData3 = {};\n    cacheData4 = {};\n    cacheData5 = {};\n    for (const { columnNumber, columnName, tableId } of matrix) {\n        const columnId = \"c\" + String(columnNumber);\n        cacheData1[columnId] = columnName;\n        cacheData5[columnName] = columnId;\n        cacheData3[columnId] = tableId;\n        if(!cacheData2[tableId]){\n            cacheData2[tableId] = [];\n        }\n        cacheData2[tableId].push({\n            \"id\": columnId,\n            \"name\": columnName,\n            \"dataType\": await getDataType(columnId),\n        });\n        cacheData4[columnId] = new RegExp(`(?<!')(?<=(^|[^a-zA-Z0-9]))${columnName}(?!')(?=\\$|[^a-zA-Z0-9])`, \"g\");\n    }\n}\n\n","innerCode":"\n    await _reload();    // メモリに再読み込み\n    return await clearCache();   // 下層の関数を呼び出す\n","afterCode":""},{"functionNameJP":"カラムを作成","functionNameEN":"createColumn","parametersName":["tableId","columnName","dataType"],"parametersDataType":["string","string","string"],"returnValue":{"message":"string","columnId":"string"},"functionId":"01HM3NMY3ECTYTNTA3E9X0HWB7","beforeCode":"\n\n","innerCode":"\n    //\n    // カラム名がデータベース全体で重複しないように、先頭にテーブルIDとアンダーバーをつける\n    //   例： 氏名 => t1_氏名\n    let columnName2;\n    if( columnName.startsWith( tableId + \"_\" ) ){\n        columnName2 = columnName;   // 既に加えられている場合\n    }\n    else{\n        columnName2 = tableId + \"_\" + columnName;\n    }\n    //\n    // カラム名が \"データベース全体で\" 重複していないかチェックする\n    const columns1 = await runSqlReadOnly(\n        `SELECT *\n        FROM column_names\n        WHERE enable = 1\n          AND column_name = :columnName;`,\n      {\n          \":columnName\": columnName2,\n      },\n    );\n    if (columns1.length>=1) {\n      throw `カラム名「${columnName2}」は重複しています。`;\n    }\n    //\n    // カラムの存在を登録する\n    const timestamp = new Date().getTime();\n    await runSqlWriteOnly(\n        `INSERT INTO column_names (column_name, table_id, created_at)\n            VALUES ( :columnName, :tableId, :createdAt );`,\n        {\n            \":columnName\": columnName2, // 表示される名前（変更不可）\n            \":tableId\": tableId,        // 所属しているテーブル\n            \":createdAt\": timestamp,    // 作成日時\n        },\n    );\n    //\n    // カラムIDを決定する\n    const columns2 = await runSqlReadOnly(\n        `SELECT column_number AS columnNumber\n        FROM column_names\n            WHERE column_name = :columnName\n                AND table_id = :tableId\n                AND created_at = :createdAt\n            LIMIT 1;`,\n        {\n            \":columnName\": columnName2, // 表示される名前（変更不可）\n            \":tableId\": tableId,        // 所属しているテーブル\n            \":createdAt\": timestamp,    // 作成日時\n        },\n    );\n    if(columns2.length===0){\n        throw \"登録したはずのカラムが見つかりません。\";\n    }\n    const columnNumber = columns2[0][\"columnNumber\"];\n    if(isNaN(columnNumber)){\n        throw \"新しく発行されたカラムIDが見つかりません。\";\n    }\n    const columnId = \"c\" + String(columnNumber);\n    //\n    // カラムを実際に作成する\n    await createColumn( tableId, columnId, dataType );   // 下層の関数を呼び出す\n    //\n    await _reload();    // メモリに再読み込み\n    return {\n        columnId: columnId,\n        message: `カラム「${columnName2}」を作成しました。`,\n    };\n","afterCode":""},{"functionNameJP":"カラムを無効化","functionNameEN":"disableColumn","parametersName":["columnId"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HM3NNJJZ0AMYHR1G39CYAY2B","beforeCode":"\n\n","innerCode":"\n    let columnNumber = columnId.replace(\"c\",\"\");\n    if(isNaN(columnNumber)){\n        throw \"指定されたカラムIDは無効です。\";\n    }\n    columnNumber = Number(columnNumber);\n    await runSqlWriteOnly(\n        `UPDATE column_names\n            SET enable = 0\n            WHERE column_number = :columnNumber;`,\n        {\n            \":columnNumber\": columnNumber,\n        },\n    );\n    await _reload();    // メモリに再読み込み\n    return \"カラムを無効化しました\";\n","afterCode":""},{"functionNameJP":"カラムを再度有効化","functionNameEN":"enableColumn","parametersName":["columnId"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HM3NNZ17AKR2F8795CK5AYMX","beforeCode":"\n\n","innerCode":"\n    let columnNumber = columnId.replace(\"c\",\"\");\n    if(isNaN(columnNumber)){\n        throw \"指定されたカラムIDは無効です。\";\n    }\n    columnNumber = Number(columnNumber);\n    //\n    // columnNumberと同じ名前のカラムが既に存在していないかチェックする\n    const columns = await runSqlReadOnly(\n        `SELECT\n            column_name AS columnName\n        FROM column_names AS t1\n        INNER JOIN column_names AS t2\n            ON t1.column_name = t2.column_name\n            AND t1.column_number <> t2.column_number\n        WHERE t1.column_number = :columnNumber\n            AND t2.enable = 1\n        LIMIT 1;`,\n        {\n            \":columnNumber\": columnNumber,\n        },\n    );\n    if(columns.length>=1){\n        const columnName = columns[0][\"columnName\"];\n        throw `カラム名「${columnName}」は重複しています。`;\n    }\n    //\n    // カラムを再度有効化する\n    await runSqlWriteOnly(\n        `UPDATE column_names\n            SET enable = 1\n            WHERE column_number = :columnNumber;`,\n        {\n            \":columnNumber\": columnNumber,\n        },\n    );\n    await _reload();    // メモリに再読み込み\n    return \"カラムを有効化しました\";\n","afterCode":""},{"functionNameJP":"カラム名を変更","functionNameEN":"updateColumnName","parametersName":["columns"],"parametersDataType":[[{"id":"string","name":"string"}]],"returnValue":"string","functionId":"01HM3NPGWTPFKADXJD1PTXET23","beforeCode":"\n\n","innerCode":"\n    //==========================================================\n    // テーブルIDを調べる\n    if(columns.length===0){\n        throw \"配列「columns」が空です。\";\n    }\n    const columnId = columns[0].id;\n    const tableId = cacheData3[columnId];\n    //\n    //==========================================================\n    // カラム名の先頭にテーブルIDを付け加える（「t2」など）\n    const columns2  = {};\n    for (const { id, name } of columns) {\n        if( name.startsWith( tableId + \"_\" ) ){\n            columns2[id] = name;   // 既に加えられている場合\n        }\n        else{\n            columns2[id] = tableId + \"_\" + name;\n        }\n    }\n    //\n    //==========================================================\n    // カラム名が重複していないか確認する\n    await _reload();\n    const obj = {\n        ...structuredClone(cacheData1),    // ディープコピー\n        ...columns2,\n    };\n    // この時点で、連想配列「obj」には、全てのカラム一覧が格納されている。\n    // データの例\n    // obj = {\n    //      \"c2\": \"t1_変更後のカラム名１\",\n    //      \"c8\": \"t1_カラム名２\"\n    // };\n    for (const id in columns2 ) {\n        const name = columns2[id];\n        const newObj = structuredClone(obj);    // ディープコピー\n        //\n        // 自分自身を除いた、他のカラムと名前が被っていないか確認する\n        delete newObj[id];    //自分自身を除く\n        const columnNameArray = Object.values(newObj);\n        if (columnNameArray.includes(name)) {\n            throw `カラム名「${name}」は重複しています。`;\n        }\n    }\n    //\n    //==========================================================\n    // カラム名を変更する\n    for (const id in columns2 ) {\n        let columnNumber = id.replace(\"c\",\"\");\n        if(isNaN(columnNumber)){\n            throw \"指定されたカラムIDは無効です。\";\n        }\n        columnNumber = Number(columnNumber);\n        await runSqlWriteOnly(\n            `UPDATE column_names\n                SET column_name = :columnName\n                WHERE column_number = :columnNumber;`,\n            {\n                \":columnName\": columns2[id],\n                \":columnNumber\": columnNumber,\n            },\n        );\n    }\n    //==========================================================\n    await _reload();    // メモリに再読み込み\n    return \"カラム名を変更しました\";\n","afterCode":""},{"functionNameJP":"カラムの一覧を取得(GUI)","functionNameEN":"listColumnsForGUI","parametersName":["tableId","pageNumber","onePageMaxSize","isTrash"],"parametersDataType":["string","number_nullable","number","boolean"],"returnValue":{"columns":[{"id":"string","name":"string","dataType":"string"}],"total":"number"},"functionId":"01HM3NQ0MY7Z0P7DMK91D3019A","beforeCode":"\n\n","innerCode":"\n    if ( !pageNumber ) {\n        pageNumber = 1;\n    }\n    if (pageNumber <= 0) {\n        pageNumber = 1;\n    }\n    const [{ \"COUNT(*)\": total }] = await runSqlReadOnly(\n        `SELECT COUNT(*)\n            FROM column_names\n            WHERE enable = :isEnable;`,\n        {\n            // 現存するテーブル一覧を取得する場合は１\n            // 削除済みのテーブル一覧を取得する場合は０\n            \":isEnable\": isTrash ? 0 : 1,\n        },\n    );\n    let offset = onePageMaxSize * (pageNumber - 1);\n    if( offset >= total ){\n        offset = total;\n    }\n    const columns = await runSqlReadOnly(\n        `SELECT\n            ( \"c\" || column_number ) AS id,\n            column_name AS name\n        FROM column_names\n        WHERE table_id = :tableId\n            AND enable = :isEnable\n        ORDER BY created_at DESC\n        LIMIT :limit OFFSET :offset;`,\n        {\n            \":tableId\": tableId,\n            // 現存するテーブル一覧を取得する場合は１\n            // 削除済みのテーブル一覧を取得する場合は０\n            \":isEnable\": isTrash ? 0 : 1,\n            \":limit\": onePageMaxSize,\n            \":offset\": offset,\n        },\n    );\n    for ( let i=0; i<columns.length; i++ ) {\n        const columnId = columns[i].id;\n        columns[i].dataType = await getDataType(columnId);\n    }\n    return {\n        \"columns\": columns,\n        \"total\": total,\n    }\n","afterCode":""},{"functionNameJP":"SQLクエリ実行（読み取り専用）","functionNameEN":"runSqlReadOnly","parametersName":["sql","params"],"parametersDataType":["string",{"string":"any"}],"returnValue":[{"string":"any"}],"functionId":"01HM3NQBDXK7M3WWMBP9GMZRGM","beforeCode":"\n\n","innerCode":"\n    //入力パラメータに含まれるカラム名をIDに置き換える\n    for( const columnId in cacheData1 ){\n        const regexp = cacheData4[columnId];\n        if(!regexp){\n            throw `正規表現が見つかりません`;\n        }\n        sql = sql.replaceAll( regexp, columnId );\n    }\n    return await runSqlReadOnly( sql, params );  // 下層の関数を実行する\n","afterCode":""},{"functionNameJP":"SQLクエリ実行（書き込み専用）","functionNameEN":"runSqlWriteOnly","parametersName":["sql","params"],"parametersDataType":["string",{"string":"any"}],"returnValue":"void","functionId":"01HM3NQPHFAFTNCAVB9WAQ3FWH","beforeCode":"\n\n","innerCode":"\n    //入力パラメータに含まれるカラム名をIDに置き換える\n    for( const columnId in cacheData1 ){\n        const regexp = cacheData4[columnId];\n        if(!regexp){\n            throw `正規表現が見つかりません`;\n        }\n        sql = sql.replaceAll( regexp, columnId );\n    }\n    return await runSqlReadOnly( sql, params );  // 下層の関数を実行する\n","afterCode":""},{"functionNameJP":"カラムIDからテーブルIDを調べる","functionNameEN":"getTableId","parametersName":["columnId"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HM75HM89H61BZQT5RVX62WSX","beforeCode":"\n\n","innerCode":"\n    return cacheData3[columnId];\n","afterCode":""},{"functionNameJP":"不可逆的にテーブルを削除","functionNameEN":"deleteTable","parametersName":["tableId"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HM7R5TQZPF4AD69VTCK0KMJG","beforeCode":"\n\n","innerCode":"\n    await runSqlWriteOnly(\n        `DELETE FROM column_names\n            WHERE table_id = :tableId;`,\n        {\n            \":tableId\": tableId,\n        },\n    );\n    await _reload();    // メモリに再読み込み\n    return await deleteTable( tableId );  // 下層の関数を実行する\n","afterCode":""},{"functionNameJP":"カラムが有効なのか判定","functionNameEN":"checkColumnEnabled","parametersName":["columnId"],"parametersDataType":["string"],"returnValue":"boolean","functionId":"01HM84WKK85ZCG7YYD13EQXMFN","beforeCode":"\n\n","innerCode":"\n    return cacheData1[columnId] ? true : false;\n","afterCode":""},{"functionNameJP":"カラムの一覧を取得（高速）","functionNameEN":"listColumnsAll","parametersName":["tableId"],"parametersDataType":["string"],"returnValue":[{"id":"string","name":"string","dataType":"string"}],"functionId":"01HM8B219G3YQWK65HX2BP5211","beforeCode":"\n\n","innerCode":"\n    if(!cacheData2[tableId]){\n        // カラムが１つも無いテーブルの場合は、ここに到達する\n        return [];\n    }\n    return structuredClone( cacheData2[tableId] );\n","afterCode":""},{"functionNameJP":"IDからカラム名を取得","functionNameEN":"getColumnName","parametersName":["columnId"],"parametersDataType":["string"],"returnValue":"string_nullable","functionId":"01HMAR9X8118MVV57YVYWKZDGE","beforeCode":"\n\n","innerCode":"\n  return cacheData1[columnId];\n","afterCode":""},{"functionNameJP":"カラム名からIDを取得","functionNameEN":"getColumnIdFromName","parametersName":["columnName"],"parametersDataType":["string"],"returnValue":"string_nullable","functionId":"01HP9BBX3MKEHFP4J53JVT0ESN","beforeCode":"\n\n","innerCode":"\n  return cacheData5[columnName];\n","afterCode":"\n"}]