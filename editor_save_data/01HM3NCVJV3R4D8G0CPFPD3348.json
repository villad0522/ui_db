[{"functionNameJP":"プログラム起動","functionNameEN":"startUp","parametersName":["localUrl","isDebug"],"parametersDataType":["string_nullable","boolean"],"returnValue":"void","functionId":"01HM3NDX1HKWXH957YEQZME3V9","beforeCode":"\n","innerCode":"\n    await startUp( localUrl, isDebug );   // 下層の関数を呼び出す\n    try {\n      // テーブルを作成する（テーブルの存在を保存するため）\n      await runSqlWriteOnly(\n        `CREATE TABLE IF NOT EXISTS column_names (\n            \"column_id\" TEXT PRIMARY KEY,\n            \"column_name\" TEXT NOT NULL,\n            \"table_id\" TEXT NOT NULL,\n            \"enable\" INTEGER NOT NULL DEFAULT 1\n        );`,\n        {},\n      );\n    }\n    catch (err) {\n      throw `システム管理用テーブルの作成に失敗しました。${String(err)}`;\n    }\n    //\n    await _reload();    // メモリに再読み込み\n","afterCode":""},{"functionNameJP":"インメモリキャッシュを削除する","functionNameEN":"clearCache","parametersName":[],"parametersDataType":[],"returnValue":"void","functionId":"01HM3NMSPH2GYS6AJDFAAPHQ6N","beforeCode":"\n\n//【グローバル変数】カラム名を保存するキャッシュ\nlet cacheData1 = {\n    // データの例\n    // \"c2\": \"カラム名１\",\n    // \"c8\": \"カラム名２\"\n};\nlet cacheData2 = {\n    // データの例\n    // \"カラム名１\": \"c2\",\n    // \"カラム名２\": \"c8\"\n};\n\n//【サブ関数】メモリに再読み込み\nasync function _reload() {\n    let matrix = [];\n    try {\n        matrix = await runSqlReadOnly(\n            `SELECT * FROM column_names WHERE enable = 1;`,\n            {},\n        );\n    }\n    catch (err) {\n        throw `テーブル「column_names」の読み込みに失敗しました。${String(err)}`;\n    }\n    cacheData1 = {};\n    cacheData2 = {};\n    for (const record of matrix) {\n        const columnName = record[\"column_name\"];\n        const columnId = record[\"column_id\"];\n        cacheData1[columnId] = columnName;\n        cacheData2[columnName] = columnId;\n    }\n}\n\n","innerCode":"\n    await _reload();    // メモリに再読み込み\n    return await clearCache();   // 下層の関数を呼び出す\n","afterCode":""},{"functionNameJP":"カラムを作成","functionNameEN":"createColumn","parametersName":["tableId","columnName","dataType"],"parametersDataType":["string","string","string"],"returnValue":{"message":"string","columnId":"string"},"functionId":"01HM3NMY3ECTYTNTA3E9X0HWB7","beforeCode":"\n\n","innerCode":"\n    const columns = await runSqlReadOnly(\n      `SELECT * FROM column_names\n        WHERE enable = 1\n          AND columnName = :columnName\n          AND table_id = :tableId;`,\n      {\n          \":tableId\": tableId,\n          \":columnName\": columnName,\n      },\n    );\n    if (columns.length>=1) {\n      throw `カラム名「${columnName}」は重複しています。`;\n    }\n    const { columnId, message } = await createColumn( tableId, dataType );   // 下層の関数を呼び出す\n    await runSqlWriteOnly(\n      `INSERT INTO column_names ( column_id, column_name, table_id )\n          VALUES ( :columnId, :columnName, :tableId );`,\n      {\n          \":columnId\": columnId,\n          \":columnName\": columnName,\n          \":tableId\": tableId,\n      },\n    );\n    await _reload();    // メモリに再読み込み\n    return {\n        columnId: columnId,\n        message: `カラム「${columnName}」を作成しました。`,\n    };\n","afterCode":""},{"functionNameJP":"カラムを無効化","functionNameEN":"disableColumn","parametersName":["columnId"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HM3NNJJZ0AMYHR1G39CYAY2B","beforeCode":"\n\n","innerCode":"\n    await runSqlWriteOnly(\n        `UPDATE column_names\n            SET enable = 0\n            WHERE column_id = :columnId;`,\n        {\n            \":columnId\": columnId,\n        },\n    );\n    await _reload();    // メモリに再読み込み\n    return \"カラムを無効化しました\";\n","afterCode":""},{"functionNameJP":"カラムを再度有効化","functionNameEN":"enableColumn","parametersName":["columnId"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HM3NNZ17AKR2F8795CK5AYMX","beforeCode":"\n\n","innerCode":"\n    const columns = await runSqlReadOnly(\n        `SELECT *\n            FROM column_names AS t1\n            INNER JOIN column_names AS t2\n                ON t1.column_name = t2.column_name\n            WHERE t2.column_id = :columnId\n                AND t1.column_id <> :column_id\n                AND t1.enable = 1\n            LIMIT 1;`,\n        {\n            \":columnId\": columnId,\n        },\n    );\n    if(columns.length>=1){\n        const columnName = columns[0][\"column_name\"];\n        throw `テーブル名「${columnName}」は重複しています。`;\n    }\n    await runSqlWriteOnly(\n        `UPDATE column_names\n            SET enable = 1\n            WHERE column_id = :columnId;`,\n        {\n            \":columnId\": columnId,\n        },\n    );\n    await _reload();    // メモリに再読み込み\n    return \"カラムを有効化しました\";\n","afterCode":""},{"functionNameJP":"カラム名を変更","functionNameEN":"updateColumnName","parametersName":["columns"],"parametersDataType":[[{"id":"string","name":"string"}]],"returnValue":"string","functionId":"01HM3NPGWTPFKADXJD1PTXET23","beforeCode":"\n\n","innerCode":"\n    //==========================================================\n    // カラム名が重複していないか確認する\n    await _reload();\n    const obj = structuredClone(cacheData1);    // ディープコピー\n    // データの例\n    // obj = {\n    //     \"c2\": \"カラム名１\",\n    //     \"c8\": \"カラム名２\"\n    // };\n    for (const { id, name } of columns) {\n        obj[id] = name;\n    }\n    // この時点で、連想配列「obj」には、全てのテーブル一覧が格納されている。\n    // データの例\n    // obj = {\n    //     \"2\": \"テーブル名１\",（変更後のテーブル名）\n    //     \"8\": \"テーブル名２\"\n    // };\n    for (const tableInfo of tables) {\n        const newObj = structuredClone(obj);    // ディープコピー\n        //\n        // 自分自身を除いた、他のテーブルと名前が被っていないか確認する\n        delete newObj[tableInfo.id];    //自分自身を除く\n        const tableNameArray = Object.values(newObj);\n        if (tableNameArray.includes(tableInfo.name)) {\n            throw `テーブル名「${tableInfo.name}」は重複しています。`;\n        }\n    }\n    // テーブル名が重複していないか確認する ここまで\n    //==========================================================\n    //\n    for (const tableInfo of tables) {\n        await runSqlWriteOnly(\n            `UPDATE table_names\n                SET table_name = :tableName\n                WHERE table_number = :tableNumber\n                    AND is_system_table = 0;`,\n            {\n                \":tableName\": tableInfo.name,\n                \":tableNumber\": tableInfo.id.replace(\"t\",\"\"),\n            },\n        );\n    }\n    await _reload();    // メモリに再読み込み\n    return \"テーブル名を変更しました\";\n","afterCode":""},{"functionNameJP":"カラムの一覧を取得","functionNameEN":"listColumns","parametersName":["pageNumber_columns","onePageMaxSize","isTrash"],"parametersDataType":["number","number","boolean"],"returnValue":{"columns":[{"id":"string","name":"string"}],"columns_total":"number"},"functionId":"01HM3NQ0MY7Z0P7DMK91D3019A","beforeCode":"\n\n","innerCode":"\n  throw \"この関数は未実装です。\";\n","afterCode":""},{"functionNameJP":"SQLクエリ実行（読み取り専用）","functionNameEN":"runSqlReadOnly","parametersName":["sql","params"],"parametersDataType":["string",{"string":"any"}],"returnValue":[["any"]],"functionId":"01HM3NQBDXK7M3WWMBP9GMZRGM","beforeCode":"\n\n","innerCode":"\n  throw \"この関数は未実装です。\";\n","afterCode":""},{"functionNameJP":"SQLクエリ実行（書き込み専用）","functionNameEN":"runSqlWriteOnly","parametersName":["sql","params"],"parametersDataType":["string",{"string":"any"}],"returnValue":"void","functionId":"01HM3NQPHFAFTNCAVB9WAQ3FWH","beforeCode":"\n\n","innerCode":"\n  throw \"この関数は未実装です。\";\n","afterCode":"\n"}]