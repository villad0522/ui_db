[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n  await startUp(\"http://localhost:3000/\", true);\n  //\n  const { tableId: tableId1 } = await createTable(\"学年テーブル\");\n  const { columnId: columnId1 } = await createColumn( tableId1, \"学年\", \"INTEGER\", null );\n  // 見出しの役割を果たすカラムを登録する\n  await setTitleColumn( columnId1 );\n  const { recordId: recordId } = await createRecord( tableId1, {\n      [columnId1]: 3,\n  });\n  //\n  const { tableId: tableId2 } = await createTable(\"名簿テーブル\");\n  const { columnId: columnId2  } = await createColumn( tableId2, \"学年\", \"POINTER\", tableId1 );\n  const { columnId: columnId3  } = await createColumn( tableId2, \"氏名\", \"TEXT\", null );\n  await createRecord( tableId2, {\n      [columnId2]: recordId,\n      [columnId3]: \"田中太郎\",\n  });\n  //\n  // ページを作成（親ページのIDを指定する。この場合はトップページ。）\n  const { pageId: pageId1 } = await createPage( 1 );\n  //\n  // ページにビューを追加\n  const { viewId: viewId1 } = await createView( pageId1, \"名簿テーブル\" );\n  //\n  const pageData = await getPageData(\n    pageId1,\n    {\n        [\"p5\"+columnId2]: recordId,\n    }\n  );\n  if( !pageData[\"view\"+viewId1+\"_\"] ){\n    console.error(pageData);\n    throw \"テスト結果が想定とは異なります。\";\n  }\n  const matrix = pageData[\"view\"+viewId1+\"_\"];\n  if( matrix.length !== 1 ){\n    console.error(matrix);\n    throw \"テスト結果が想定とは異なります。\";\n  }\n  if( matrix[0]['学年'] !== 3 ){\n    throw \"テスト結果が想定とは異なります。\";\n  }\n  if( matrix[0]['氏名'] !== \"田中太郎\" ){\n    throw \"テスト結果が想定とは異なります。\";\n  }\n  await close();\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"データを取得","functionNameEN":"getPageData","parametersName":["pageId","queryParameters"],"parametersDataType":["number",{"string":"any"}],"returnValue":{"string":"any"},"functionId":"01HN70A4EDXTVAPP3GCM4CPXQR","beforeCode":"\n\n\n\n","innerCode":"\n  const results = {};\n  const views = await listChildrenView( pageId );\n  for( const { viewId } of views ){\n    const { sql, parameters } = await generateSQL( viewId, queryParameters );\n    results[\"view\" + viewId + \"_\"] = await runSqlReadOnly( sql, parameters );\n    results[\"view\" + viewId + \"__total\"] = 1;\n  }\n  return results;\n","afterCode":"\n"}]