[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n  await startUp(\"http://localhost:3000/\", true);\n  //\n  const { tableId: tableId1 } = await createTable(\"学年テーブル\");\n  const { columnId: columnId1 } = await createColumn( tableId1, \"学年\", \"INTEGER\", null );\n  // 見出しの役割を果たすカラムを登録する\n  await setTitleColumn( columnId1 );\n  const { recordId: recordId } = await createRecord( tableId1, {\n      [columnId1]: 3,\n  });\n  //\n  const { tableId: tableId2 } = await createTable(\"名簿テーブル\");\n  const { columnId: columnId2  } = await createColumn( tableId2, \"学年\", \"POINTER\", tableId1 );\n  const { columnId: columnId3  } = await createColumn( tableId2, \"氏名\", \"TEXT\", null );\n  await createRecord( tableId2, {\n      [columnId2]: recordId,\n      [columnId3]: \"田中太郎\",\n  });\n  //\n  // ページを作成（親ページのIDを指定する。この場合はトップページ。）\n  const { pageId: pageId1 } = await createPage( 1 );\n  //\n  // ページにビューを追加\n  const { viewId: viewId1 } = await createView( pageId1, \"名簿テーブル\" );\n  //\n  const pageData = await getPageDataForGUI(\n    pageId1,\n    {\n        [\"p5\"+columnId2]: recordId,\n    }\n  );\n  if( !pageData[\"view\"+viewId1+\"_\"] ){\n    console.error(pageData);\n    throw \"テスト結果が想定とは異なります。\";\n  }\n  const matrix = pageData[\"view\"+viewId1+\"_\"];\n  if( matrix.length !== 1 ){\n    console.error(matrix);\n    throw \"テスト結果が想定とは異なります。\";\n  }\n  await close();\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"データを取得(GUI向け)","functionNameEN":"getPageDataForGUI","parametersName":["pageId","queryParameters"],"parametersDataType":["number",{"string":"any"}],"returnValue":{"string":"any"},"functionId":"01HN70A4EDXTVAPP3GCM4CPXQR","beforeCode":"\n\n\n\n","innerCode":"\n  let results = {};\n  const views = await listChildrenView( pageId );\n  const viewColumnNames = {};\n  for( const { viewId } of views ){\n    const { normalSQL, countSQL, normalParameters, countParameters } = await generateSQL( viewId, queryParameters, false );\n    //\n    const [{ \"total\": total }] = await runSqlReadOnly( countSQL, countParameters );\n    if( isNaN(total) ){\n      throw \"件数を取得できません\";\n    }\n    const extractions = await getExtractionsAsJP( viewId, queryParameters );\n    const viewColumns = await listViewColumns(viewId);\n    viewColumnNames[viewId] = viewColumns.map( ({viewColumnName})=>viewColumnName);\n    //\n    results = {\n      ...await autoFill( viewId, {}, false ),\n      ...results,\n      [`extraction${viewId}_`]: extractions,\n      [`extraction${viewId}__total`]: extractions.length,\n      [\"view\" + viewId + \"_\"]: await runSqlReadOnly( normalSQL, normalParameters ),\n      [\"view\" + viewId + \"__total\"]: total,\n    };\n  }\n  return {\n    ...results,\n    \"views\": views.map( ({ viewId }) => ({\n      \"viewId\": viewId,\n      \"newExtractionTarget_option\": viewColumnNames[viewId],\n    }) ),\n    \"views_total\": views.length,\n  };\n","afterCode":""},{"functionNameJP":"データを取得(Excel向け)","functionNameEN":"getPageDataForExcel","parametersName":["nowPageId","excelPageId","queryParameters"],"parametersDataType":["number","number",{"string":"any"}],"returnValue":[{"string":[{"string":"any"}]}],"functionId":"01HPSRDD83ECBHMGBXPYM0XTPW","beforeCode":"\n\n\n\n\n","innerCode":"\n  return await _getDataList_core( nowPageId, excelPageId, queryParameters, 0 );\n","afterCode":""},{"functionNameJP":"【サブ】Excel向けのデータを取得1","functionNameEN":"_getDataList","parametersName":["nowPageId","excelPageId","queryParameters","nestLevel"],"parametersDataType":["number","number",{"string":"any"},"number"],"returnValue":["any"],"functionId":"01HPSRJWPWRFEAFK9D852MKA6W","beforeCode":"\n\n\n\n\n","innerCode":"\n  if(nestLevel>6){\n    return [];\n  }\n  if( nowPageId === excelPageId ){\n    const sheetDatas = await _getSheetDatas_core( excelPageId, queryParameters );\n    return [ sheetDatas ];\n  }\n  //\n  const views = await listChildrenView( pageId );\n  for( const { viewId, tableId, childPageId } of views ){\n    const { normalSQL, countSQL, normalParameters } = await generateSQL( viewId, queryParameters, true );\n    const records = await runSqlReadOnly( normalSQL, normalParameters );\n    //\n    let dataList = [];\n    for( const {id} of records ){\n      const newQueryParameters = {\n        ...queryParameters,\n        [`p${nowPageId}${tableId}`]: id,\n      };\n      // 再帰呼び出し\n      const newDataList = await _getDataList_core( childPageId, excelPageId, newQueryParameters, nestLevel+1 );\n      dataList = dataList.concat(newDataList);\n      if(dataList.length>1000){\n        return dataList;\n      }\n    }\n  }\n  return dataList;\n","afterCode":""},{"functionNameJP":"【サブ】Excel向けのデータを取得2","functionNameEN":"_getSheetDatas","parametersName":["pageId","queryParameters"],"parametersDataType":["number",{"string":"any"}],"returnValue":{"string":["any"]},"functionId":"01HQ63JB21F4HGSPHZH39KJ683","beforeCode":"\n\n\n\n\n","innerCode":"\n  const sheetDatas = {};\n  const views = await listChildrenView( pageId );\n  for( const { viewId } of views ){\n    const { normalSQL, countSQL, normalParameters } = await generateSQL( viewId, queryParameters, true );\n    sheetDatas[viewId] = await runSqlReadOnly( normalSQL, normalParameters );\n  }\n  return sheetDatas;\n","afterCode":"\n"}]