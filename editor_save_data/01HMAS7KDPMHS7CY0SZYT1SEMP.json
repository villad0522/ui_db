[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"SQLクエリを生成","functionNameEN":"generateSQLwithoutDuplication","parametersName":["tableId","selectData","joinData","whereData","orderData","isCount","onePageMaxSize"],"parametersDataType":["string",[{"viewColumnId":"string","viewColumnType":"string","joinId":"string","columnName":"string","viewColumnName":"string"}],[{"fromJoinId":"string","fromColumnName":"string","toJoinId":"string","toTableName":"string","toColumnName":"string"}],[{"viewColumnId":"string","conditionId":"string","conditionalExpression":"string","joinId":"string","columnName":"string"}],[{"joinId":"string","columnName":"string","isAscending":"boolean"}],"boolean","number_nullable"],"returnValue":"string","functionId":"01HMASY3YGYY8KNJ1KW0KJM985","beforeCode":"\n\n\n","innerCode":"\n  const primaryKey = await getPrimaryKey( tableId );\n  //\n  let sql = \"\";\n  //===================================================================================\n  if(isCount){\n    sql += `SELECT COUNT(*) AS 'total'\\n`;\n    sql += `FROM (\\n`;\n    sql += `SELECT *\\n`;\n  }\n  else{\n    if(selectData.length===0){\n      // SELECT句の長さがゼロの場合\n      return `SELECT * FROM ${tableId} WHERE 0 LIMIT 0 OFFSET :offset`;\n    }\n    const selectList = [];\n    selectList.push(`${primaryKey} AS 'id'`);\n    for( const { viewColumnId, viewColumnType, joinId, columnName, viewColumnName } of selectData ){\n      switch(viewColumnType){\n        case \"RAW\":\n          selectList.push(`${columnName} AS '${viewColumnId}'`);\n          break;\n        case \"SUM\":\n          selectList.push(`SUM(${columnName}) AS '${viewColumnId}'`);\n          break;\n        case \"MAX\":\n          selectList.push(`MAX(${columnName}) AS '${viewColumnId}'`);\n          break;\n        case \"MIN\":\n          selectList.push(`MIN(${columnName}) AS '${viewColumnId}'`);\n          break;\n        case \"AVG\":\n          selectList.push(`AVG(${columnName}) AS '${viewColumnId}'`);\n          break;\n        case \"COUNT\":\n          selectList.push(`COUNT(${columnName}) AS '${viewColumnId}'`);\n          break;\n        default:\n          throw `サポートされていない集合関数が指定されました。viewColumnType=${viewColumnType}`;\n      }\n    }\n    sql += `SELECT ${selectList.join(\",\\n  \")}\\n`;\n  }\n  //===================================================================================\n  sql += `FROM ${tableId}\\n`;\n  for( const { fromJoinId, fromColumnName, toJoinId, toTableName, toColumnName } of joinData ){\n    sql += `  LEFT OUTER JOIN ${toTableName}\\n`;\n    sql += `    ON ${fromColumnName} = ${toColumnName}\\n`;\n  }\n  //===================================================================================\n  const whereList = [];\n  for( const { conditionId, viewColumnId, conditionalExpression, columnName } of whereData ){\n    switch(conditionalExpression.trim()){\n      case \"LIKE\":\n        whereList.push(`( ${columnName} LIKE :${conditionId} )`);\n        break;\n      case \"=\":\n        whereList.push(`( ${columnName} = :${conditionId} )`);\n        break;\n      case \"!=\":\n        whereList.push(`( ${columnName} != :${conditionId} )`);\n        break;\n      case \">\":\n        whereList.push(`( ${columnName} > :${conditionId} )`);\n        break;\n      case \"<\":\n        whereList.push(`( ${columnName} < :${conditionId} )`);\n        break;\n      case \">=\":\n        whereList.push(`( ${columnName} >= :${conditionId} )`);\n        break;\n      case \"<=\":\n        whereList.push(`( ${columnName} <= :${conditionId} )`);\n        break;\n      default:\n        throw `サポートされていない条件演算子が指定されました。conditionalExpression = ${conditionalExpression}`;\n    }\n  }\n  if( whereList.length > 0 ){\n    sql += `WHERE ${whereList.join(\"\\n  AND \")}\\n`;\n  }\n  //===================================================================================\n  sql += `GROUP BY ${primaryKey}\\n`;\n  //===================================================================================\n  const orderByList = [];\n  for( const { joinId, columnName, isAscending } of orderData ){\n    if(isAscending){\n      orderByList.push(`${columnName} ASC`);\n    }\n    else{\n      orderByList.push(`${columnName} DESC`);\n    }\n  }\n  for( const { fromJoinId, fromColumnName, toJoinId, toTableName, toColumnId } of joinData ){\n    orderByList.push(`${toTableName}.sort_number DESC`);\n  }\n  if( orderByList.length > 0 ){\n    sql += `ORDER BY ${orderByList.join(\",\\n  \")}\\n`;\n  }\n  //===================================================================================\n  if(isCount){\n    sql += `)`;\n  }\n  else {\n    if(onePageMaxSize){\n      sql += `LIMIT ${onePageMaxSize} OFFSET :offset`;\n    }\n    else{\n      sql += `LIMIT 10000 OFFSET :offset`;\n    }\n  }\n  //\n  return sql;\n","afterCode":"\n"}]