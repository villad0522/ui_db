[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n  await getEndpointInfo( \"/default/tables\" );\n  await listEndpoints();\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"エンドポイントの情報を取得","functionNameEN":"getEndpointInfo","parametersName":["endpointPath"],"parametersDataType":["string"],"returnValue":{"httpMethod":"string","description":"string","commandName":"string","queryParameters":{"string":{"dataType":"string","description":"string","isRequired":"boolean","example":"any"}},"requestBody":{},"response":{"string":{"title":"string_nullable","isArray":"boolean_nullable","onePageMaxSize":"number_nullable","children":"any","dataType":"string_nullable","description":"string_nullable","example":"any"}}},"functionId":"01HMKKA13PWVAMJADQRW591XRW","beforeCode":"\n\n\nimport fs from 'fs';\nimport path from 'path';\nimport { glob } from 'glob';\n\n//【グローバル変数】キャッシュデータ\nlet endpointInfo = {};\nlet endpointList = null;\n\n\n\n","innerCode":"\n    if (endpointInfo[endpointPath]) {\n        // キャッシュデータが残っていた場合\n        // ディープコピーして返す\n        return structuredClone(endpointInfo[endpointPath]);\n    }\n    const dirPath = await getPath( \"FRONTEND\" );\n    const filePath = path.join(dirPath, endpointPath, \"api.json\");\n    return await _getEndpointInfo(filePath);\n","afterCode":"","endpointPath":"string"},{"functionNameJP":"エンドポイントを全て取得","functionNameEN":"listEndpoints","parametersName":[],"parametersDataType":[],"returnValue":[{"endpointPath":"string","httpMethod":"string","description":"string"}],"functionId":"01HMKNRD4GENE8QN6AGTWYYN4B","beforeCode":"\n\n\n\nasync function _getEndpointInfo(filePath) {\n    if (!fs.existsSync(filePath)) {\n        throw `エンドポイントが存在しません。${filePath}`;\n    }\n    const text = await fs.promises.readFile(filePath, 'utf8');\n    let endpointInfo;\n    try {\n        endpointInfo = await JSON.parse(text);\n    }\n    catch (err) {\n        console.log(\"\\n\\n\");\n        console.log(text);\n        console.log(\"\\n\\n\");\n        throw `API定義ファイルがJSON形式ではありません。${filePath}`;\n    }\n    const dirPath = await getPath(\"FRONTEND\");\n    const filePath2 = path.relative(dirPath, filePath);\n    let endpointPath = filePath2.replaceAll(\"\\\\\", \"/\").replaceAll(\"api.json\", \"\");\n    if (!String(endpointPath).startsWith(\"/\")) {\n        // 先頭にスラッシュを追加\n        endpointPath = \"/\" + endpointPath;\n    }\n    if (String(endpointPath).endsWith(\"/\")) {\n        // 末尾のスラッシュを除去\n        endpointPath = endpointPath.slice(0, -1);\n    }\n    const result = {\n        ...endpointInfo,\n        endpointPath: endpointPath,\n    };\n    // 次回のためにデータを残しておく\n    endpointInfo[endpointPath] = result;\n    return structuredClone(result);\n}\n\n\n\n","innerCode":"\n    if (endpointList) {\n        // キャッシュデータが残っていた場合\n        // ディープコピーして返す\n        return structuredClone(endpointList);\n    }\n    const dirPath = await getPath( \"FRONTEND\" );\n    if (String(dirPath).endsWith(\"/\")) {\n        // 末尾のスラッシュを除去\n        dirPath = dirPath.slice(0, -1);\n    }\n    const jsonfiles = await glob(dirPath + '/**/api.json');\n    const list = [];\n    for (const filePath of jsonfiles) {\n        const endpointInfo = await _getEndpointInfo(filePath);\n        list.push({\n            endpointPath: endpointInfo.endpointPath,\n            httpMethod: endpointInfo.httpMethod,\n            description: endpointInfo.description,\n        });\n    }\n    // 次回のためにデータを残しておく\n    endpointList = list;\n    return structuredClone(list);\n","afterCode":""},{"functionNameJP":"インメモリキャッシュを削除する","functionNameEN":"clearCache","parametersName":[],"parametersDataType":[],"returnValue":"void","functionId":"01HMKPRD55QSE790KBPR0JBSH6","beforeCode":"\n\n\n\n","innerCode":"\n    endpointInfo = {};\n    endpointList = null;\n    return await clearCache();\n","afterCode":"\n"}]