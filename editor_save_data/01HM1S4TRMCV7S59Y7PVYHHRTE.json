[
    {
        "functionNameJP": "プログラム起動",
        "functionNameEN": "startUp",
        "parametersName": [
            "localUrl",
            "isDebug"
        ],
        "parametersDataType": [
            "string_nullable",
            "boolean"
        ],
        "returnValue": "void",
        "functionId": "01HM2YZCCDFS799ZWHQ7VWXYH2",
        "beforeCode": "\n// テーブルに保存できるデータ型の一覧\n// ・INTEGER (SQLiteでサポート)\n// ・REAL (SQLiteでサポート)\n// ・TEXT (SQLiteでサポート)\n// ・BOOL (自作)\n// ・FILE (自作)\n\n\n",
        "innerCode": "\n    await startUp( localUrl, isDebug );   // 下層の関数を呼び出す\n    //\n    try {\n        // テーブルを作成する（データ型を保存するため）\n        await runSqlWriteOnly(\n            `CREATE TABLE IF NOT EXISTS data_types (\n                \"column_number\" INTEGER PRIMARY KEY AUTO_INCREMENT,\n                \"table_id\" INTEGER NOT NULL,\n                \"data_type\" TEXT NOT NULL,\n                \"created_at\" INTEGER NOT NULL\n            );`,\n            {},\n        );\n    }\n    catch (err) {\n        throw `システム管理用テーブルの作成に失敗しました。\\n${String(err)}`;\n    }\n    await _reload();    // メモリに再読み込み\n",
        "afterCode": ""
    },
    {
        "functionNameJP": "インメモリキャッシュを削除する",
        "functionNameEN": "clearCache",
        "parametersName": [],
        "parametersDataType": [],
        "returnValue": "void",
        "functionId": "01HM2ZNXD13NXNF1XBARBXNFJV",
        "beforeCode": "\n\n//【グローバル変数】データ型を保存するキャッシュ\nconst cacheData = {\n    // データの例\n    // \"t2\": {\n    //     \"c5\": \"TEXT\",\n    //     \"c22\": \"INTEGER\",\n    //     \"c13\": \"BOOL\"\n    // },\n    // \"t8\": {\n    //     \"c25\": \"INTEGER\",\n    //     \"c3\": \"TEXT\",\n    //     \"c9\": \"FILE\"\n    // }\n};\n\n//【サブ関数】メモリに再読み込み\nasync function _reload() {\n    let matrix = [];\n    const columns = await runSqlReadOnly(\n        `SELECT\n            column_number AS columnNumber,\n            data_type AS dataType\n        FROM data_types;`,\n        {},\n    );\n    //\n    for( const { columnNumber, dataType } of columns ){\n        if(!cacheData[tableId]){\n            cacheData[tableId] = {};\n        }\n        cacheData[tableId][\"c\"+columnNumber] = dataType;\n    }\n}\n\n",
        "innerCode": "\n    await _reload();    // メモリに再読み込み\n",
        "afterCode": ""
    },
    {
        "functionNameJP": "カラムを作成",
        "functionNameEN": "createColumn",
        "parametersName": [
            "tableId",
            "dataType"
        ],
        "parametersDataType": [
            "string",
            "string"
        ],
        "returnValue": {
            "columnId": "string",
            "message": "string"
        },
        "functionId": "01HM301Q0WY4V6WATWH4FVYER1",
        "beforeCode": "\n\n",
        "innerCode": "\n    let sqlDataType = \"\";\n    switch(dataType){\n        case \"INTEGER\":\n            sqlDataType = \"INTEGER\";\n            break;\n        case \"REAL\":\n            sqlDataType = \"REAL\";\n            break;\n        case \"TEXT\":\n            sqlDataType = \"TEXT\";\n            break;\n        case \"BOOL\":\n            sqlDataType = \"INTEGER\";\n            break;\n        case \"FILE\":\n            sqlDataType = \"BLOB\";\n            break;\n        default:\n            throw `データ型「${dataType}」はサポートされていません。`;\n    }\n    const timestamp = new Date().getTime();\n    await runSqlWriteOnly(\n        `INSERT INTO data_types (table_id, data_type, created_at)\n            VALUES ( :tableId, :dataType, :createdAt );`,\n        {\n            \":tableId\": tableId,\n            \":dataType\": dataType,\n            \":createdAt\": timestamp,\n        },\n    );\n    const columns = await runSqlReadOnly(\n        `SELECT column_number FROM data_types\n            WHERE table_id = :tableId\n                AND data_type = :dataType\n                AND created_at = :createdAt\n            ORDER BY column_number DESC\n            LIMIT 1;`,\n        {\n            \":tableId\": tableId,\n            \":dataType\": dataType,\n            \":createdAt\": timestamp,\n        },\n    );\n    if(columns.length===0){\n        throw \"追加したはずのカラムが見つかりません。\";\n    }\n    const columnNumber = columns[0][\"column_number\"];\n    if(isNaN(columnNumber)){\n        throw \"新しく発行されたカラムIDが見つかりません。\";\n    }\n    const columnId = \"c\" + columnNumber;\n    await runSqlWriteOnly(\n        `ALTER TABLE ${tableId} ADD COLUMN ${columnId} ${sqlDataType};`,\n        {\n            \":tableId\": tableId,\n            \":dataType\": dataType,\n            \":createdAt\": timestamp,\n        },\n    );\n    await _reload();    // メモリに再読み込み\n    return {\n        columnId: columnId,\n        message: \"カラムを追加しました。\",\n    };\n",
        "afterCode": ""
    },
    {
        "functionNameJP": "カラムの一覧を取得",
        "functionNameEN": "listColumns",
        "parametersName": [],
        "parametersDataType": [],
        "returnValue": [
            {
                "string": "string",
                "dataType": "string"
            }
        ],
        "functionId": "01HM30E6T7MYT2JVV1HM06TSEB",
        "beforeCode": "\n\n",
        "innerCode": "\n    return cacheData;\n",
        "afterCode": ""
    },
    {
        "functionNameJP": "レコードを作成",
        "functionNameEN": "createRecord",
        "parametersName": [
            "tableId",
            "recordData"
        ],
        "parametersDataType": [
            "string",
            {
                "string": "any"
            }
        ],
        "returnValue": {
            "columnId": "string",
            "message": "string"
        },
        "functionId": "01HM30XNKDSJHTTXK5JS9EBP85",
        "beforeCode": "\n\n",
        "innerCode": "\n    if( recordData[\"record_id\"] ){\n        throw \"カラム「record_id」は指定できません。\";\n    }\n    //\n    // 「tableId」が本当に存在するのか確認（インジェクション攻撃対策）\n    const dataTypes = await cacheData[tableId];\n    if(Object.keys(dataTypes).length===0){\n        throw \"指定されたテーブルは存在しません。\";\n    }\n    //\n    // レコードのデータ型を検証する\n    const {isOK,message} = await checkRecord( tableId, recordData )\n    if( isOK===false ){\n        throw message;\n    }\n    //\n    // SQL文に必要な文字列を用意する。\n    const columnIdList = Object.keys(recordData);\n    const placeholderList = columnIdList.map( columnId => ( \":\" + columnId ) );\n    //\n    // 配列「columnIdList」が本当に存在するカラムなのかを確認（インジェクション攻撃対策）\n    for( const columnId of columnIdList ){\n        if( !dataTypes[columnId] ){\n            throw \"指定されたカラムは存在しません。\";\n        }\n    }\n    //\n    // キーの先頭に「:」を追加する\n    const newRecordData = {};\n    for( const columnId in recordData ){\n        newRecordData[\":\"+columnId] = recordData[columnId];\n    }\n    //\n    // レコードを追加する。\n    const timestamp = new Date().getTime();\n    await runSqlWriteOnly(\n        `INSERT INTO ${tableId} ( ${columnIdList.join(\", \")}, created_at, updated_at )\n            VALUES ( ${placeholderList.join(\", \")}, :createdAt, :updatedAt );`,\n        {\n            ...newRecordData,\n            \":createdAt\": timestamp,\n            \":updatedAt\": timestamp,\n        }\n    );\n    const records = await runSqlReadOnly(\n        `SELECT record_id FROM ${tableId}\n            WHERE created_at = :createdAt\n            ORDER BY record_id DESC\n            LIMIT 1;`,\n        {\n            \":createdAt\": timestamp,\n        },\n    );\n    if(records.length===0){\n        throw \"追加したはずのレコードが見つかりません。\";\n    }\n    const recordId = records[0][\"record_id\"];\n    if(!recordId){\n        throw \"新しく発行されたレコードIDが見つかりません。\";\n    }\n    return {\n        recordId: recordId,\n        message: \"レコードを追加しました。\",\n    };\n",
        "afterCode": ""
    },
    {
        "functionNameJP": "レコードを上書き",
        "functionNameEN": "updateRecord",
        "parametersName": [
            "tableId",
            "recordId",
            "recordData"
        ],
        "parametersDataType": [
            "string",
            "string",
            {
                "string": "any"
            }
        ],
        "returnValue": "string",
        "functionId": "01HM31GWMJKQRGFFDFQNY1W87A",
        "beforeCode": "\n\n",
        "innerCode": "\n    if( recordData[\"record_id\"] ){\n        throw \"カラム「record_id」は上書き禁止です。\";\n    }\n    //\n    // 「tableId」が本当に存在するのか確認（インジェクション攻撃対策）\n    const dataTypes = cacheData[tableId];\n    if(Object.keys(dataTypes).length===0){\n        throw \"指定されたテーブルは存在しません。\";\n    }\n    //\n    const records = await runSqlReadOnly(\n        `SELECT * FROM ${tableId} WHERE record_id = :recordId LIMIT 1;`,\n        {\n            \":recordId\": recordId,\n        },\n    );\n    if(records.length===0){\n        throw \"指定されたレコードは存在しません。\";\n    }\n    //\n    // レコードのデータ型を検証する\n    const {isOK,message} = await checkRecord( tableId, recordData )\n    if( isOK===false ){\n        throw message;\n    }\n    //\n    const words = [];\n    for( const columnId in recordData ){\n        // 配列「columnId」が本当に存在するカラムなのかを確認（インジェクション攻撃対策）\n        if( !dataTypes[columnId] ){\n            throw \"指定されたカラムは存在しません。\";\n        }\n        words.push(`${columnId}=:${columnId}`);\n    }\n    //\n    // レコードを上書きする。\n    const timestamp = new Date().getTime();\n    await runSqlWriteOnly(\n        `UPDATE ${tableId}\n            SET ${words.join(\", \")}, updated_at=:updatedAt\n            WHERE record_id = :recordId;`,\n        {\n            ...newRecordData,\n            \":recordId\": recordId,\n            \":updatedAt\": timestamp,\n        },\n    );\n    return \"レコードを上書きしました。\";\n",
        "afterCode": ""
    },
    {
        "functionNameJP": "フィールドを検証",
        "functionNameEN": "checkField",
        "parametersName": [
            "tableId",
            "columnId",
            "value"
        ],
        "parametersDataType": [
            "string",
            "string",
            "any"
        ],
        "returnValue": {
            "isOK": "boolean",
            "message": "string"
        },
        "functionId": "01HM31NCQEZ4J88T87709ERKVT",
        "beforeCode": "\n\n\n",
        "innerCode": "\n    if( (value===null) || (value===undefined) ){\n        return {\n            isOK: true,\n            message: \"空欄です。\",\n        };\n    }\n    const dataType = cacheData[tableId][columnId];\n    if(!dataType){\n        throw \"指定されたカラムは存在しません。\";\n    }\n    switch( dataType ){\n        case \"INTEGER\":\n            if( typeof value !== \"number\" || isNaN(value) ){\n                return {\n                    isOK: false,\n                    message: \"数値ではありません。\",\n                };\n            }\n            if (!Number.isInteger(value)) {\n                throw \"小数は指定できません。指定できるのは整数のみです。\";\n            }\n            break;\n        case \"REAL\":\n            if( typeof value !== \"number\" || isNaN(value) ){\n                return {\n                    isOK: false,\n                    message: \"数値ではありません。\",\n                };\n            }\n            break;\n        case \"TEXT\":\n            if( typeof value !== \"string\" ){\n                return {\n                    isOK: false,\n                    message: \"文字列ではありません。\",\n                };\n            }\n        case \"BOOL\":\n            if( typeof value !== \"boolean\" ){\n                return {\n                    isOK: false,\n                    message: \"ブール値ではありません。\",\n                };\n            }\n            break;\n        case \"FILE\":\n            if (!value instanceof Uint8Array) {\n                return {\n                    isOK: false,\n                    message: \"サポートされているファイル形式（Uint8Array）ではありません。\",\n                };\n            }\n            break;\n    }\n    return {\n        isOK: true,\n        message: \"データ型に適合しています。\",\n    };\n",
        "afterCode": ""
    },
    {
        "functionNameJP": "レコードを検証",
        "functionNameEN": "checkRecord",
        "parametersName": [
            "tableId",
            "recordData"
        ],
        "parametersDataType": [
            "string",
            {
                "string": "any"
            }
        ],
        "returnValue": {
            "isOK": "boolean",
            "message": "string"
        },
        "functionId": "01HM327CT0T281A1PPF3W8VNYA",
        "beforeCode": "\n\n",
        "innerCode": "\n    for( const columnId in recordData){\n        const {isOK,message} = await checkField( tableId, columnId, recordData[columnId] );\n        if(isOK===false){\n            return {\n                isOK: false,\n                message: message,\n            };\n        }\n    }\n    return {\n        isOK: true,\n        message: \"データ型に適合しています。\",\n    };\n",
        "afterCode": ""
    },
    {
        "functionNameJP": "テーブルを作成",
        "functionNameEN": "createTable",
        "parametersName": [
            "tableId"
        ],
        "parametersDataType": [
            "string"
        ],
        "returnValue": "string",
        "functionId": "01HM37RHTSYK3KX6N0Q6FSYKSC",
        "beforeCode": "\n\n",
        "innerCode": "\n    // テーブルを作成する\n    await runSqlWriteOnly(\n        `CREATE TABLE IF NOT EXISTS ${tableId} (\n            \"record_id\" INTEGER PRIMARY KEY NOT NULL,\n            \"created_at\" INTEGER NOT NULL,\n            \"updated_at\" INTEGER NOT NULL\n        );`,\n        {},\n    );\n    return \"テーブルを作成しました。\";\n",
        "afterCode": ""
    },
    {
        "functionNameJP": "不可逆的にテーブルを削除",
        "functionNameEN": "deleteTable",
        "parametersName": [
            "tableId"
        ],
        "parametersDataType": [
            "string"
        ],
        "returnValue": "string",
        "functionId": "01HM3D1T3AJKS8423RJ7EWC8J4",
        "beforeCode": "\n\n",
        "innerCode": "\n    // テーブルを削除する\n    await runSqlWriteOnly(\n        `DROP TABLE IF EXISTS ${tableId};`,\n        {},\n    );\n    await runSqlWriteOnly(\n        `DELETE FROM data_types\n            WHERE table_id = :tableId;`,\n        {\n            \":tableId\": tableId,\n        },\n    );\n    await _reload();    // メモリに再読み込み\n    return \"テーブルを削除しました。\";\n",
        "afterCode": ""
    }
]