[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n    await startUp(\"http://localhost:3000/\", true);\n    //\n    await createTable(\"t88\");\n    await createColumn( \"t88\", \"c1\", \"FILE\" );\n    //\n    await createTable(\"t67\");\n    await createColumn( \"t67\", \"c2\", \"INTEGER\" );\n    await createColumn( \"t67\", \"c3\", \"REAL\" );\n    await createColumn( \"t67\", \"c4\", \"TEXT\" );\n    await createColumn( \"t67\", \"c5\", \"BOOL\" );\n    //\n    if( await getDataType(\"c1\") !== \"FILE\" ){\n        throw \"関数が想定通りの動作をしませんでした。\";\n    }\n    if( await getDataType(\"c2\") !== \"INTEGER\" ){\n        throw \"関数が想定通りの動作をしませんでした。\";\n    }\n    if( await getDataType(\"c3\") !== \"REAL\" ){\n        throw \"関数が想定通りの動作をしませんでした。\";\n    }\n    if( await getDataType(\"c4\") !== \"TEXT\" ){\n        throw \"関数が想定通りの動作をしませんでした。\";\n    }\n    if( await getDataType(\"c5\") !== \"BOOL\" ){\n        throw \"関数が想定通りの動作をしませんでした。\";\n    }\n    await clearCache();\n    //\n    const dataTypes = await listDataTypes(\"t67\");\n    if( dataTypes[\"c2\"] !== \"INTEGER\" ){\n        throw \"関数が想定通りの動作をしませんでした。\";\n    }\n    if( dataTypes[\"c3\"] !== \"REAL\" ){\n        throw \"関数が想定通りの動作をしませんでした。\";\n    }\n    if( dataTypes[\"c4\"] !== \"TEXT\" ){\n        throw \"関数が想定通りの動作をしませんでした。\";\n    }\n    if( dataTypes[\"c5\"] !== \"BOOL\" ){\n        throw \"関数が想定通りの動作をしませんでした。\";\n    }\n    //\n    await checkField( \"c2\", 23 );\n    await checkField( \"c3\", 3.14 );\n    await checkField( \"c4\", \"hello\" );\n    await checkField( \"c5\", false );\n    await checkRecord( \"t67\", {\n        \"c2\": 23,\n        \"c3\": 3.14,\n        \"c4\": \"hello\",\n        \"c5\": false,\n    });\n    const { recordId } = await createRecord( \"t67\", {\n        \"c2\": 23,\n        \"c3\": 3.14,\n        \"c4\": \"hello\",\n        \"c5\": false,\n    });\n    await updateRecord( \"t67\", [{\n        \"t67_id\": recordId,\n        \"c2\": 13,\n        \"c3\": 6.14,\n        \"c4\": \"good\",\n        \"c5\": true,\n    }]);\n    await updateRecord( \"t67\", [{\n        \"recordId\": recordId,\n        \"c2\": 13,\n        \"c3\": 6.14,\n        \"gdyyuywg\": \"余分なデータ\",\n        \"c4\": \"good\",\n        \"c5\": true,\n    }]);\n    await updateRecord( \"t67\", [{\n        \"id\": recordId,\n        \"c2\": 13,\n        \"c3\": 6.14,\n        \"c4\": \"good\",\n        \"c5\": true,\n    }]);\n    await deleteRecord( \"t67\", [{\n        \"t67_id\": recordId,\n    }]);\n    const { recordId: recordId2 } = await createRecord( \"t67\", {\n        \"c2\": 23,\n        \"c3\": 3.14,\n        \"c4\": \"hello\",\n        \"c5\": false,\n    });\n    await deleteRecord( \"t67\", [{\n        \"recordId\": recordId2,\n    }]);\n    const { recordId: recordId3 } = await createRecord( \"t67\", {\n        \"c2\": 23,\n        \"c3\": 3.14,\n        \"c4\": \"hello\",\n        \"c5\": false,\n    });\n    await deleteRecord( \"t67\", [{\n        \"id\": recordId3,\n    }]);\n    await deleteTable(\"t67\");\n    //\n    await close();\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"プログラム起動","functionNameEN":"startUp","parametersName":["localUrl","isDebug"],"parametersDataType":["string_nullable","boolean"],"returnValue":"void","functionId":"01HM2YZCCDFS799ZWHQ7VWXYH2","beforeCode":"\n\n\n\n\n\n// テーブルに保存できるデータ型の一覧\n// ・INTEGER (SQLiteでサポート)\n// ・REAL (SQLiteでサポート)\n// ・TEXT (SQLiteでサポート)\n// ・BOOL (自作)\n// ・FILE (自作)\n\n\n","innerCode":"\n    await startUp( localUrl, isDebug );   // 下層の関数を呼び出す\n    //\n    // テーブルを作成する（データ型を保存するため）\n    await runSqlWriteOnly(\n        `CREATE TABLE IF NOT EXISTS data_types (\n            \"column_id\" TEXT PRIMARY KEY,\n            \"table_id\" TEXT NOT NULL,\n            \"data_type\" TEXT NOT NULL\n        );`,\n        {},\n    );\n    await _reload();    // メモリに再読み込み\n","afterCode":""},{"functionNameJP":"インメモリキャッシュを削除する","functionNameEN":"clearCache","parametersName":[],"parametersDataType":[],"returnValue":"void","functionId":"01HM2ZNXD13NXNF1XBARBXNFJV","beforeCode":"\n\n//【グローバル変数】データ型を保存するキャッシュ\nlet cacheData = {\n    // データの例\n    //  \"t1\":{\n    //    \"c5\": \"TEXT\",\n    //    \"c22\": \"INTEGER\",\n    //    \"c13\": \"BOOL\"\n    //  },\n    //  \"t2\":{\n    //    \"c1\": \"TEXT\",\n    //    \"c9\": \"INTEGER\",\n    //    \"c78\": \"BOOL\"\n    //  }\n};\nlet cacheData2 = {\n    // データの例\n    //    \"c5\": \"TEXT\",\n    //    \"c22\": \"INTEGER\",\n    //    \"c13\": \"BOOL\"\n    //    \"c1\": \"TEXT\",\n    //    \"c9\": \"INTEGER\",\n    //    \"c78\": \"BOOL\"\n};\n\n//【サブ関数】メモリに再読み込み\nasync function _reload() {\n    const columns = await runSqlReadOnly(\n        `SELECT\n            column_id AS columnId,\n            table_id AS tableId,\n            data_type AS dataType\n        FROM data_types;`,\n        {},\n    );\n    cacheData = {};\n    cacheData2 = {};\n    for( const { columnId, tableId, dataType } of columns ){\n        if(!cacheData[tableId]){\n            cacheData[tableId] = {};\n        }\n        cacheData[tableId][columnId] = dataType;\n        cacheData2[columnId] = dataType;\n    }\n}\n\n","innerCode":"\n    await _reload();    // メモリに再読み込み\n","afterCode":""},{"functionNameJP":"カラムを作成","functionNameEN":"createColumn","parametersName":["tableId","columnId","dataType"],"parametersDataType":["string","string","string"],"returnValue":"string","functionId":"01HM301Q0WY4V6WATWH4FVYER1","beforeCode":"\n\n","innerCode":"\n    if( !String(tableId).startsWith(\"t\") ){\n        throw `テーブルIDに無効な文字列「${tableId}」が指定されました。`;\n    }\n    if( !String(columnId).startsWith(\"c\") ){\n        throw `カラムIDに無効な文字列「${columnId}」が指定されました。`;\n    }\n    let sqlDataType = \"\";\n    switch(dataType){\n        case \"INTEGER\":\n            sqlDataType = \"INTEGER\";\n            break;\n        case \"REAL\":\n            sqlDataType = \"REAL\";\n            break;\n        case \"TEXT\":\n            sqlDataType = \"TEXT\";\n            break;\n        case \"BOOL\":\n            sqlDataType = \"INTEGER\";\n            break;\n        case \"FILE\":\n            sqlDataType = \"BLOB\";\n            break;\n        default:\n            throw `データ型「${dataType}」はサポートされていません。`;\n    }\n    await runSqlWriteOnly(\n        `ALTER TABLE ${tableId} ADD COLUMN ${columnId} ${sqlDataType};`,\n        {},\n    );\n    await runSqlWriteOnly(\n        `INSERT INTO data_types ( column_id, table_id, data_type )\n            VALUES ( :columnId, :tableId, :dataType );`,\n        {\n            \":columnId\": columnId,\n            \":tableId\": tableId,\n            \":dataType\": dataType,\n        },\n    );\n    await _reload();    // メモリに再読み込み\n    return \"カラムを追加しました。\";\n","afterCode":""},{"functionNameJP":"データ型の一覧を取得","functionNameEN":"listDataTypes","parametersName":["tableId"],"parametersDataType":["string"],"returnValue":{"string":"string"},"functionId":"01HM30E6T7MYT2JVV1HM06TSEB","beforeCode":"\n\n","innerCode":"\n    return cacheData[tableId];\n","afterCode":""},{"functionNameJP":"レコードを作成","functionNameEN":"createRecord","parametersName":["tableId","recordData"],"parametersDataType":["string",{"string":"any"}],"returnValue":{"recordId":"number","message":"string"},"functionId":"01HM30XNKDSJHTTXK5JS9EBP85","beforeCode":"\n// 戻り値の例\n//  {\n//    \"c5\": \"TEXT\",\n//    \"c22\": \"INTEGER\",\n//    \"c13\": \"BOOL\"\n//  }\n\n","innerCode":"\n    const primaryKey = await getPrimaryKey( tableId );\n    if( recordData[primaryKey] ){\n        throw \"レコードを追加する際に、プライマリキーは指定できません。\";\n    }\n    //\n    // 「tableId」が本当に存在するのか確認（インジェクション攻撃対策）\n    const dataTypes = await cacheData[tableId];\n    if(Object.keys(dataTypes).length===0){\n        throw \"指定されたテーブルは存在しません。\";\n    }\n    //\n    // レコードのデータ型を検証する\n    const {isOK,message} = _checkRecord( tableId, recordData )\n    if( isOK===false ){\n        throw message;\n    }\n    //\n    // SQL文に必要な文字列を用意する。\n    const columnIdList = Object.keys(recordData);\n    const placeholderList = columnIdList.map( columnId => ( \":\" + columnId ) );\n    //\n    // 配列「columnIdList」が本当に存在するカラムなのかを確認（インジェクション攻撃対策）\n    for( const columnId of columnIdList ){\n        if( !dataTypes[columnId] ){\n            throw \"指定されたカラムは存在しません。\";\n        }\n    }\n    //\n    // キーの先頭に「:」を追加する\n    const newRecordData = {};\n    for( const columnId in recordData ){\n        newRecordData[\":\"+columnId] = recordData[columnId];\n    }\n    //\n    // レコードを追加する。\n    const timestamp = new Date().getTime();\n    await runSqlWriteOnly(\n        `INSERT INTO ${tableId} ( ${columnIdList.join(\", \")}, created_at, updated_at )\n            VALUES ( ${placeholderList.join(\", \")}, :createdAt, :updatedAt );`,\n        {\n            ...newRecordData,\n            \":createdAt\": timestamp,\n            \":updatedAt\": timestamp,\n        }\n    );\n    const records = await runSqlReadOnly(\n        `SELECT * FROM ${tableId}\n            WHERE created_at = :createdAt\n            LIMIT 1;`,\n        {\n            \":createdAt\": timestamp,\n        },\n    );\n    if(records.length===0){\n        throw \"追加したはずのレコードが見つかりません。\";\n    }\n    const recordId = records[0][primaryKey];\n    if(!recordId){\n        throw \"新しく発行されたレコードIDが見つかりません。\";\n    }\n    return {\n        recordId: recordId,\n        message: \"レコードを追加しました。\",\n    };\n","afterCode":""},{"functionNameJP":"レコードを上書き","functionNameEN":"updateRecord","parametersName":["tableId","records"],"parametersDataType":["string",[{"string":"any"}]],"returnValue":"string","functionId":"01HM31GWMJKQRGFFDFQNY1W87A","beforeCode":"\n\n","innerCode":"\n    // 「tableId」が本当に存在するのか確認\n    const dataTypes = cacheData[tableId];\n    if(Object.keys(dataTypes).length===0){\n        throw \"指定されたテーブルは存在しません。\";\n    }\n    //\n    const primaryKey = await getPrimaryKey( tableId );\n    for( const r of records ){\n        const recordData = structuredClone(r);\n        const recordId = recordData[\"id\"];\n        if( !recordId ){\n            throw \"上書き対象のプライマリキーが指定されていません。\";\n        }\n        const records = await runSqlReadOnly(\n            `SELECT * FROM ${tableId} WHERE ${primaryKey} = :recordId LIMIT 1;`,\n            {\n                \":recordId\": recordId,\n            },\n        );\n        if(records.length===0){\n            throw \"指定されたレコードは存在しません。\";\n        }\n        //\n        // 存在しないカラムを削除する\n        const newRecordData = {};\n        for( const columnId in recordData ){\n            if( dataTypes[columnId] ){\n                newRecordData[columnId] = recordData[columnId];\n            }\n        }\n        //\n        // レコードのデータ型を検証する\n        const {isOK,message} = _checkRecord( tableId, newRecordData );\n        if( isOK===false ){\n            throw message;\n        }\n        //\n        const words = [];\n        const placeholders = {};\n        for( const columnId in newRecordData ){\n            words.push(`${columnId}=:${columnId}`);\n            placeholders[\":\"+columnId] = newRecordData[columnId];\n        }\n        //\n        // レコードを上書きする。\n        const timestamp = new Date().getTime();\n        await runSqlWriteOnly(\n            `UPDATE ${tableId}\n                SET ${words.join(\", \")}, updated_at=:updatedAt\n                WHERE ${primaryKey} = :recordId;`,\n            {\n                ...placeholders,\n                \":recordId\": recordId,\n                \":updatedAt\": timestamp,\n            },\n        );\n    }\n    return \"レコードを上書きしました。\";\n","afterCode":""},{"functionNameJP":"フィールドを検証","functionNameEN":"checkField","parametersName":["columnId","value"],"parametersDataType":["string","any"],"returnValue":{"isOK":"boolean","message":"string"},"functionId":"01HM31NCQEZ4J88T87709ERKVT","beforeCode":"\n\n\n","innerCode":"\n    return _checkField( columnId, value );\n","afterCode":""},{"functionNameJP":"レコードを検証","functionNameEN":"checkRecord","parametersName":["tableId","recordData"],"parametersDataType":["string",{"string":"any"}],"returnValue":{"isOK":"boolean","message":"string"},"functionId":"01HM327CT0T281A1PPF3W8VNYA","beforeCode":"\n\n\nfunction _checkField( columnId, value ){\n    if( !String(columnId).startsWith(\"c\") ){\n        throw `カラムIDに無効な文字列「${columnId}」が指定されました。`;\n    }\n    if( (value===null) || (value===undefined) ){\n        return {\n            isOK: true,\n            message: \"空欄です。\",\n        };\n    }\n    const dataType = cacheData2[columnId];\n    if(!dataType){\n        throw \"指定されたカラムは存在しません。\";\n    }\n    switch( dataType ){\n        case \"INTEGER\":\n            if( typeof value !== \"number\" || isNaN(value) ){\n                return {\n                    isOK: false,\n                    message: \"数値ではありません。\",\n                };\n            }\n            if (!Number.isInteger(value)) {\n                throw \"小数は指定できません。指定できるのは整数のみです。\";\n            }\n            break;\n        case \"REAL\":\n            if( typeof value !== \"number\" || isNaN(value) ){\n                return {\n                    isOK: false,\n                    message: \"数値ではありません。\",\n                };\n            }\n            break;\n        case \"TEXT\":\n            if( typeof value !== \"string\" ){\n                return {\n                    isOK: false,\n                    message: \"文字列ではありません。\",\n                };\n            }\n            break;\n        case \"BOOL\":\n            if( typeof value !== \"boolean\" ){\n                return {\n                    isOK: false,\n                    message: `ブール値ではありません。value=${value}  columnId=${columnId}  dataType=${dataType}`,\n                };\n            }\n            break;\n        case \"FILE\":\n            if (!value instanceof Uint8Array) {\n                return {\n                    isOK: false,\n                    message: \"サポートされているファイル形式（Uint8Array）ではありません。\",\n                };\n            }\n            break;\n    }\n    return {\n        isOK: true,\n        message: \"データ型に適合しています。\",\n    };\n}\n\n\n","innerCode":"\n    return _checkRecord( tableId, recordData );\n","afterCode":""},{"functionNameJP":"テーブルを作成","functionNameEN":"createTable","parametersName":["tableId"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HM37RHTSYK3KX6N0Q6FSYKSC","beforeCode":"\n\n// レコードを検証\nfunction _checkRecord( tableId, recordData ){\n    const dataTypeMap = cacheData[tableId];\n    for( const columnId in dataTypeMap){\n        const {isOK,message} = _checkField( columnId, recordData[columnId] );\n        if(isOK===false){\n            return {\n                isOK: false,\n                message: message,\n            };\n        }\n    }\n    return {\n        isOK: true,\n        message: \"データ型に適合しています。\",\n    };\n}\n\n","innerCode":"\n    const primaryKey = await getPrimaryKey( tableId );\n    // テーブルを作成する\n    await runSqlWriteOnly(\n        `CREATE TABLE IF NOT EXISTS ${tableId} (\n            \"${primaryKey}\" INTEGER PRIMARY KEY NOT NULL,\n            \"created_at\" INTEGER NOT NULL,\n            \"updated_at\" INTEGER NOT NULL\n        );`,\n        {},\n    );\n    return \"テーブルを作成しました。\";\n","afterCode":""},{"functionNameJP":"不可逆的にテーブルを削除","functionNameEN":"deleteTable","parametersName":["tableId"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HM3D1T3AJKS8423RJ7EWC8J4","beforeCode":"\n\n","innerCode":"\n    // テーブルを削除する\n    await runSqlWriteOnly(\n        `DROP TABLE IF EXISTS ${tableId};`,\n        {},\n    );\n    await runSqlWriteOnly(\n        `DELETE FROM data_types\n            WHERE table_id = :tableId;`,\n        {\n            \":tableId\": tableId,\n        },\n    );\n    await _reload();    // メモリに再読み込み\n    return \"テーブルを削除しました。\";\n","afterCode":""},{"functionNameJP":"データ型を取得","functionNameEN":"getDataType","parametersName":["columnId"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HMFJ7H4P1PMR6DAX13A925A1","beforeCode":"\n\n\n\n","innerCode":"\n    return cacheData2[columnId];\n","afterCode":""},{"functionNameJP":"レコードを削除","functionNameEN":"deleteRecord","parametersName":["tableId","records"],"parametersDataType":["string",[{"string":"any"}]],"returnValue":"string","functionId":"01HMJ17H61J597Y2N1HJH6C5JR","beforeCode":"\n\n\n","innerCode":"\n    // 「tableId」が本当に存在するのか確認\n    const dataTypes = cacheData[tableId];\n    if(Object.keys(dataTypes).length===0){\n        throw \"指定されたテーブルは存在しません。\";\n    }\n    //\n    const primaryKey = await getPrimaryKey( tableId );\n    for( const recordData of records ){\n        let recordId;\n        if( recordData[\"id\"] ){\n            recordId = recordData[\"id\"];\n        }\n        else{\n            throw \"削除対象のプライマリキーが指定されていません。\";\n        }\n        const records2 = await runSqlReadOnly(\n            `SELECT * FROM ${tableId} WHERE ${primaryKey} = :recordId LIMIT 1;`,\n            {\n                \":recordId\": recordId,\n            },\n        );\n        if(records2.length===0){\n            throw \"指定されたレコードは存在しません。\";\n        }\n        //\n        await runSqlWriteOnly(\n            `DELETE FROM ${tableId} WHERE ${primaryKey} = :recordId;`,\n            {\n                \":recordId\": recordId,\n            },\n        );\n    }\n    return \"レコードを削除しました。\";\n","afterCode":"\n"}]