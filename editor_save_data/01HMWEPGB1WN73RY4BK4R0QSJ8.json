[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n    await startUp(\"http://localhost:3000/\", true);\n    //\n    const { tableId: tableId1 } = await createTable(\"学年\");\n    const { columnId: columnId1 } = await createColumn( tableId1, \"学年\", \"INTEGER\", null );\n    // 見出しの役割を果たすカラムを登録する\n    await setTitleColumn( columnId1 );\n    const { recordId: recordId } = await createRecord( tableId1, {\n        [columnId1]: 3,\n    });\n    //\n    const { tableId: tableId2 } = await createTable(\"名簿\");\n    const { columnId: columnId2  } = await createColumn( tableId2, \"学年\", \"POINTER\", tableId1 );\n    const { columnId: columnId3  } = await createColumn( tableId2, \"氏名\", \"TEXT\", null );\n    await createRecord( tableId2, {\n        [columnId2]: recordId,\n        [columnId3]: \"田中太郎\",\n    });\n    //\n    // ページを作成\n    const { pageId: pageId1 } = await createPage( 1 );\n    //\n    // ページに動的リストを追加\n    const { viewId: viewId1 } = await createView( pageId1, \"名簿\" );\n    await regeneratePage( pageId1 );\n    //\n    //await close();\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"ページを再生成する","functionNameEN":"regeneratePage","parametersName":["pageId"],"parametersDataType":["number"],"returnValue":"void","functionId":"01HMWEPGB83MFHHKJMWGTFZQ0B","beforeCode":"\n\n\nimport fs from 'fs';\nimport path from 'path';\n\n\n","innerCode":"\n    const staticDirPath = await getPath(\"STATIC_DATA\");\n    const templateDirPath = path.join( staticDirPath, \"./light/page_template\" );\n    //\n    const customDirPath = await getPath(\"FRONTEND_CUSTOM\");\n    const pagePath = path.join( customDirPath, String(pageId) );\n    if (  !fs.existsSync( pagePath )  ) {\n        await fs.promises.mkdir( pagePath );\n    }\n    //\n    // CSSを生成する（テンプレートからコピーする）\n    const cssSrcPath = path.join( templateDirPath, `style.css` );\n    const cssDestPath = path.join( pagePath, `style.css` );\n    await fs.promises.copyFile( cssSrcPath, cssDestPath );\n    //\n    // JavaScriptを生成する（テンプレートからコピーする）\n    const jsSrcPath = path.join( templateDirPath, `script.js` );\n    const jsDestPath = path.join( pagePath, `script.js` );\n    let jsText = await fs.promises.readFile( jsSrcPath, { encoding: \"utf8\" } );\n    jsText = jsText.replaceAll( \"PAGE_ID\", pageId );\n    await fs.promises.writeFile( jsDestPath, jsText );\n    //\n    // HTMLを再生成する\n    const mainHtmlText = await regenerateHTML( pageId );\n    const htmlPath = path.join( pagePath, `index.html` );\n    await fs.promises.writeFile( htmlPath, mainHtmlText );\n","afterCode":""},{"functionNameJP":"ページを作成","functionNameEN":"createPage","parametersName":["parentPageId"],"parametersDataType":["number"],"returnValue":{"pageId":"number"},"functionId":"01HMXCR4NRYWTDFZ5VB4VBYS8T","beforeCode":"\n\n\n","innerCode":"\n    const result = await createPage( parentPageId );\n    //\n    // 作ったばかりの子ページのHTMLを生成する\n    await regeneratePage_core( result.pageId );\n    //\n    // 親ページのHTMLを再生成する\n    await regeneratePage_core( parentPageId );\n    //\n    return result;\n","afterCode":""},{"functionNameJP":"ビューを作成","functionNameEN":"createView","parametersName":["pageId","tableName"],"parametersDataType":["number","string"],"returnValue":"void","functionId":"01HMXCRYM57G6T43PG2TGVSJSG","beforeCode":"\n\n\n\n","innerCode":"\n    const result = await createView( pageId, tableName );\n    await regeneratePage_core( pageId );\n    return result;\n","afterCode":""},{"functionNameJP":"プログラム起動","functionNameEN":"startUp","parametersName":["localUrl","isDebug"],"parametersDataType":["string_nullable","boolean"],"returnValue":"void","functionId":"01HMXDYQFB5MX8R0C8EW2Q5GDQ","beforeCode":"\n\n\n","innerCode":"\n    await startUp( localUrl, isDebug );   // 下層の関数を呼び出す\n    //\n    const customDirPath = await getPath(\"FRONTEND_CUSTOM\");\n    const customFilePath = path.join(customDirPath, \"1.html\");\n    if ( !fs.existsSync(customFilePath)) {\n        // ./src/frontend/custom/1.html が存在しない場合\n        await regeneratePage_core( 1 );\n    }\n","afterCode":""},{"functionNameJP":"ページ名やメモを変更","functionNameEN":"updatePageName","parametersName":["pageId","pageName","memo"],"parametersDataType":["number","string","string"],"returnValue":"string","functionId":"01HN0HV16MZ539YE9NM68YXK7C","beforeCode":"\n\n\n","innerCode":"\n    // 下層の関数を呼び出す\n    const result = await updatePageName( pageId, pageName, memo );\n    //\n    // 名前を変更したページのHTMLを生成する\n    await regeneratePage_core( pageId );\n    //\n    // 親ページのHTMLを再生成する\n    const parentPageId = await getParentPage( pageId );\n    if( parentPageId >= 1 ){\n        await regeneratePage_core( parentPageId );\n    }\n    //\n    // 子ページのHTMLを再生成する（パンくずリストに表示されるため）\n    const children = await listChildrenPage( pageId );\n    for( const pageId of children ){\n        await regeneratePage_core( pageId );\n    }\n    //\n    return result;\n","afterCode":""},{"functionNameJP":"ビューを削除","functionNameEN":"deleteView","parametersName":["viewId"],"parametersDataType":["number"],"returnValue":"void","functionId":"01HN246F69N9VPG3Y4M0KA5NM9","beforeCode":"\n\n\n\n","innerCode":"\n    // 下層の関数を呼び出す\n    const result = await deleteView( viewId );\n    //\n    // 子ページを取得する（１個のはず）\n    const pages = await runSqlReadOnly(\n        `SELECT page_id AS pageId\n        FROM pages\n        WHERE dynamic_parent_id = :viewId;`,\n        {\n        \":viewId\": viewId,\n        },\n    );\n    for( const { pageId } of pages ){\n        // 子ページを再帰的に削除する\n        await deletePage_core( pageId );\n    }\n    return result;\n","afterCode":""},{"functionNameJP":"ページを再帰的に削除","functionNameEN":"deletePage","parametersName":["pageId"],"parametersDataType":["number"],"returnValue":"void","functionId":"01HN2477ERZHXHTKBCSDCWQSVJ","beforeCode":"\n\n\n","innerCode":"\n    // 下層の関数を呼び出す\n    const result = await deletePage( pageId );\n    // 子ページの一覧を取得する\n    const children = await listChildrenPage( pageId );\n    // 子ページを削除する\n    //  （子→親の順番になるように削除する）\n    for( let i=children.length-1; i>=0; i-- ){\n        await _deletePageFolder( children[i] );\n    }\n    // 対象のページを削除する\n    await _deletePageFolder( pageId );\n    //\n    return result;\n","afterCode":""},{"functionNameJP":"ページを貼り付ける","functionNameEN":"pastePage","parametersName":["newParentId","afterPageId"],"parametersDataType":["number","number_nullable"],"returnValue":"void","functionId":"01HN248SKSYV7JBKPVH5J7127R","beforeCode":"\n\n\n\n\nasync function _deletePageFolder( pageId ){\n    const customDirPath = await getPath(\"FRONTEND_CUSTOM\");\n    const pagePath = path.join( customDirPath, String(pageId) );\n    if (  fs.existsSync( pagePath )  ) {\n        await fs.promises.rm( pagePath,  { recursive: true } );\n    }\n}\n\n\n\n","innerCode":"\n    //\n    // 親ページ（切り取り元）を調べる\n    const cuttingPageId = await getCuttingPage();\n    let pastParentId = null;\n    if(cuttingPageId){\n        pastParentId = await getParentPage( cuttingPageId );\n    }\n    //\n    // 下層の関数を呼び出す\n    const result = await pastePage( newParentId, afterPageId );\n    if(! result.pageId ){\n        throw `result.pageIdがNULLです。`;\n    }\n    //\n    if( pastParentId !== newParentId ){\n        // 親ページ（切り取り元）のHTMLを再生成する\n        if( pastParentId >= 1 ){\n            await regeneratePage_core( pastParentId );\n        }\n    }\n    //\n    // 移動したページのHTMLを再生成する（パンくずリストを更新するため）\n    await regeneratePage_core( result.pageId );\n    //\n    // 親ページ（貼り付け先）のHTMLを再生成する\n    await regeneratePage_core( newParentId );\n    //\n    // 子ページのHTMLを再生成する（パンくずリストを更新するため）\n    const children = await listChildrenPage( result.pageId );\n    for( const pageId of children ){\n        await regeneratePage_core( pageId );\n    }\n    //\n    return result;\n","afterCode":"\n"}]