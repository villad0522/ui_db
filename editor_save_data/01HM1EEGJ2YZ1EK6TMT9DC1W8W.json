[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n  await startUp(\"http://localhost:3000/\");\n  //\n  if ( !fs.existsSync( await getPath(\"FRONTEND\") ) ){\n    throw \"関数が想定通りの動作をしませんでした。\";\n  }\n  if ( !fs.existsSync( await getPath(\"FRONTEND_CUSTOM\") ) ){\n    throw \"関数が想定通りの動作をしませんでした。\";\n  }\n  if ( !fs.existsSync( await getPath(\"FRONTEND_DEFAULT\") ) ){\n    throw \"関数が想定通りの動作をしませんでした。\";\n  }\n  if ( !fs.existsSync( await getPath(\"STATIC_DATA\") ) ){\n    throw \"関数が想定通りの動作をしませんでした。\";\n  }\n  if ( !fs.existsSync( await getPath(\"CACHE\") ) ){\n    throw \"関数が想定通りの動作をしませんでした。\";\n  }\n  if ( !fs.existsSync( await getPath(\"SAVEDATA\") ) ){\n    throw \"関数が想定通りの動作をしませんでした。\";\n  }\n  if ( !fs.existsSync( await getPath(\"SHARE\") ) ){\n    throw \"関数が想定通りの動作をしませんでした。\";\n  }\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"ディレクトリのパスを提供する関数","functionNameEN":"getPath","parametersName":["directoryCode"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HM1EEGJ71MN3KNW8CBGEG46W","beforeCode":"\n\n\nimport path from 'path';\nimport fs from 'fs';\nimport getDirName from './dirname.js';\n\n","innerCode":"\n    // コマンドごとに場合分け\n    switch (directoryCode) {\n        case \"FRONTEND\":\n            if (_isDevelop()) {\n                return path.join(getDirName(), \"frontend\"); // 開発環境の場合\n            }\n            else {\n                return path.join(getDirName(), \"frontend\"); // 本番環境の場合\n            }\n        case \"FRONTEND_CUSTOM\":\n            if (_isDevelop()) {\n                return path.join(getDirName(), \"frontend/custom\"); // 開発環境の場合\n            }\n            else {\n                return path.join(getDirName(), \"frontend/custom\"); // 本番環境の場合\n            }\n        case \"FRONTEND_DEFAULT\":\n            if (_isDevelop()) {\n                return path.join(getDirName(), \"frontend/default\"); // 開発環境の場合\n            }\n            else {\n                return path.join(getDirName(), \"frontend/default\"); // 本番環境の場合\n            }\n        case \"STATIC_DATA\":\n            if (_isDevelop()) {\n                return path.join(getDirName(), \"static_data\"); // 開発環境の場合\n            }\n            else {\n                return path.join(getDirName(), \"static_data\"); // 本番環境の場合\n            }\n        case \"CACHE\":\n            if (_isDevelop()) {\n                return path.join(getDirName(), \"cache\"); // 開発環境の場合\n            }\n            else {\n                return path.join(getDirName(), \"cache\"); // 本番環境の場合\n            }\n        case \"SAVEDATA\":\n            if (_isDevelop()) {\n                return path.join(getDirName(), \"savedata\"); // 開発環境の場合\n            }\n            else {\n                return path.join(getDirName(), \"savedata\"); // 本番環境の場合\n            }\n        case \"SHARE\":\n            return \"C:\\\\Users\\\\Public\\\\Documents\\\\ui_db\";\n        default:\n            throw `パラメーター「directoryCode」にサポートされていない値が指定されています。directoryCode=${directoryCode}`;\n    }\n","afterCode":""},{"functionNameJP":"プログラム起動","functionNameEN":"startUp","parametersName":["localUrl"],"parametersDataType":["string_nullable"],"returnValue":"void","functionId":"01HM2T08XKPH1KZ1AFTM4PKG6F","beforeCode":"\n\n","innerCode":"\n  //\n  if (_isDevelop() === false) {\n      // 本番環境の場合\n      const exeFilePath = path.join(getDirName(), 'office_system.exe');\n      if (!fs.existsSync(exeFilePath)) {\n          throw `カレントディレクトリが不正です。exeファイルと同じ場所から起動してください。`;\n      }\n  }\n  //\n  await startUp(localUrl);   // 下層の関数を呼び出す\n  //\n  const frontendPath = await getPath_core(\"FRONTEND\");\n  if (!fs.existsSync(frontendPath)) {\n      await _mkdir(frontendPath);   // フォルダが存在しなかったら、作成する\n  }\n  //\n  const frontendCustomPath = await getPath_core(\"FRONTEND_CUSTOM\");\n  if (!fs.existsSync(frontendCustomPath)) {\n      await _mkdir(frontendCustomPath);   // フォルダが存在しなかったら、作成する\n  }\n  //\n  const frontendDefaultPath = await getPath_core(\"FRONTEND_DEFAULT\");\n  if (!fs.existsSync(frontendDefaultPath)) {\n      await _mkdir(frontendDefaultPath);   // フォルダが存在しなかったら、作成する\n  }\n  //\n  const staticPath = await getPath_core(\"STATIC_DATA\");\n  if (!fs.existsSync(staticPath)) {\n      throw `staticフォルダが存在しません`;\n  }\n  //\n  const cachePath = await getPath_core(\"CACHE\");\n  if (!fs.existsSync(cachePath)) {\n      await _mkdir(cachePath);   // フォルダが存在しなかったら、作成する\n  }\n  //\n  const saveDataPath = await getPath_core(\"SAVEDATA\");\n  if (!fs.existsSync(saveDataPath)) {\n      await _mkdir(saveDataPath);   // フォルダが存在しなかったら、作成する\n  }\n  //\n  const documentPath = \"C:\\\\Users\\\\Public\\\\Documents\";\n  if (!fs.existsSync(documentPath)) {\n      throw `エクセルファイルの保存先フォルダが存在しません ${documentPath}`;\n  }\n  //\n  const sharePath = await getPath_core(\"SHARE\");\n  if (!fs.existsSync(sharePath)) {\n      await _mkdir(sharePath);   // フォルダが存在しなかったら、作成する\n  }\n","afterCode":"\n\nasync function _mkdir(path) {\n    try {\n        await fs.promises.mkdir(path);\n    }\n    catch (err) {\n        throw `フォルダを作成できませんでした。${path}`;\n    }\n}\n\n\n//【サブ関数】開発環境か本番環境かを判別する関数\nfunction _isDevelop() {\n    if (process.pkg) {\n        return false;   // 本番環境\n    }\n    else {\n        return true;    // 開発環境\n    }\n}"}]