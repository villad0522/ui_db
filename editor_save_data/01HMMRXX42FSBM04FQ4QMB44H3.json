[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n  await startUp(\"http://localhost:3000/\", true);\n  //\n  const { tableId: tableId1 } = await createTable(\"学年\");\n  const { columnId: columnId1 } = await createColumn( tableId1, \"学年\", \"INTEGER\", null );\n  const { recordId: recordId } = await createRecord( tableId1, {\n    [columnId1]: 3,\n  });\n  //\n  const { tableId: tableId2 } = await createTable(\"名簿\");\n  const { columnId: columnId2  } = await createColumn( tableId2, \"学年\", \"POINTER\", tableId1 );\n  const { columnId: columnId3  } = await createColumn( tableId2, \"氏名\", \"TEXT\", null );\n  await createRecord( tableId2, {\n    [columnId2]: recordId,\n    [columnId3]: \"田中太郎\",\n  });\n  //\n  const { pageId: pageId1 } = await createPage( 1, \"ページ１\" );\n  const { pageId: pageId2 } = await createPage( pageId1, \"ページ2\" );\n  const { pageId: pageId3 } = await createPage( pageId2, \"ページ3\" );\n  const { pageId: pageId4 } = await createPage( pageId3, \"ページ4\" );\n  const { pageId: pageId5 } = await createPage( pageId4, \"ページ5\" );\n  const { pageId: pageId6 } = await createPage( pageId5, \"ページ6\" );\n  const { pageId: pageId7 } = await createPage( pageId6, \"ページ7\" );\n  //\n  await createJoinedTable( pageId6, tableId1, `SELECT * FROM ${tableId1};` );\n  await updatePageName([\n    {\n      id: pageId1,\n      name: \"ページ１改\",\n      memo: \"メモ\",\n    }\n  ]);\n  //const info1 = await getPageInfo();\n  //const info2 = await getPageInfo( pageId1 );\n  //const info5 = await getPageInfo( pageId5 );\n  await close();\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"プログラム起動","functionNameEN":"startUp","parametersName":["localUrl","isDebug"],"parametersDataType":["string_nullable","boolean"],"returnValue":"void","functionId":"01HMMRXX48W43R1WD2MZ0HJ1PF","beforeCode":"\n\n\n","innerCode":"\n  await startUp( localUrl, isDebug );   // 下層の関数を呼び出す\n  //\n  // テーブルを作成する\n  await reserveWord(\"pages\"); // 予約語に登録\n  await runSqlWriteOnly(\n    `CREATE TABLE IF NOT EXISTS pages (\n      \"page_id\" INTEGER PRIMARY KEY AUTOINCREMENT,\n      \"static_parent_id\" INTEGER,\n      \"dynamic_parent_id\" INTEGER UNIQUE,\n      \"page_name\" TEXT NOT NULL,\n      \"memo\" TEXT NOT NULL DEFAULT '',\n      \"sort_number\" REAL NOT NULL DEFAULT 1,\n      \"created_at\" INTEGER UNIQUE,\n      FOREIGN KEY (static_parent_id) REFERENCES pages(page_id),\n      FOREIGN KEY (dynamic_parent_id) REFERENCES joined_tables(joined_table_id)\n    );`, {},\n  );\n  await reserveWord(\"joined_tables\"); // 予約語に登録\n  await runSqlWriteOnly(\n    `CREATE TABLE IF NOT EXISTS joined_tables (\n      \"joined_table_id\" INTEGER PRIMARY KEY,\n      \"page_id\" INTEGER NOT NULL,\n      \"table_id\" TEXT NOT NULL,\n      \"sql_query\" TEXT NOT NULL,\n      \"one_page_max_size\" NUMBER NOT NULL DEFAULT 23,\n      \"joined_table_type\" TEXT NOT NULL DEFAULT 'TABLE',\n      \"sort_number\" REAL NOT NULL DEFAULT 1,\n      \"created_at\" INTEGER UNIQUE,\n      FOREIGN KEY (page_id) REFERENCES pages(page_id)\n    );`, {},\n  );\n  const pages = await runSqlReadOnly(\n    `SELECT * FROM pages LIMIT 1;`, {},\n  );\n  if( pages.length===0 ){\n    const timestamp = new Date().getTime();\n    // ページが１つも無い場合は、トップページを作成する\n    await runSqlWriteOnly(\n      `INSERT INTO pages( page_id, page_name, created_at )\n          VALUES ( 1, 'トップ', :createdAt );`,\n      {\n        \":createdAt\": timestamp,    // 作成日時\n      },\n    );\n  }\n","afterCode":""},{"functionNameJP":"ページを作成","functionNameEN":"createPage","parametersName":["parentPageId","pageName"],"parametersDataType":["number","string"],"returnValue":{"pageId":"number"},"functionId":"01HMN2ZYD5KSV8PT5V1S0AG1HV","beforeCode":"\n\n\n// joined_table_type\n//   ・ICONS\n//   ・TABLE\n//   ・CARDS_LANDSCAPE\n//   ・CARDS_SQUARE\n\n\n// 木構造の整合性を確認\nasync function _checkTree(){\n  const matrix1 = await runSqlReadOnly(\n    `SELECT * FROM pages\n      WHERE static_parent_id IS NOT NULL\n      AND dynamic_parent_id IS NOT NULL;`, {},\n  );\n  if(matrix1.length>0){\n    console.error(`親を複数もつページがあります`);\n  }\n}\n\n\n\n","innerCode":"\n  const timestamp = new Date().getTime();\n  await runSqlWriteOnly(\n    `INSERT INTO pages( static_parent_id, page_name, created_at )\n        VALUES ( :staticParentId, :pageName, :createdAt );`,\n    {\n      \":staticParentId\": parentPageId,\n      \":pageName\": pageName,\n      \":createdAt\": timestamp,    // 作成日時\n    },\n  );\n  // ページIDを取得する\n  const pages = await runSqlReadOnly(\n    `SELECT page_id AS pageId\n      FROM pages\n      WHERE created_at = :createdAt\n      LIMIT 1;`,\n    {\n      \":createdAt\": timestamp,    // 作成日時\n    },\n  );\n  if(pages.length===0){\n    throw \"登録したはずのページが見つかりません。\";\n  }\n  const pageId = pages[0][\"pageId\"];\n  if(isNaN(pageId)){\n    throw \"新しく発行されたページIDが見つかりません。\";\n  }\n  await _checkTree();\n  return {\n    pageId: pageId,\n  };\n","afterCode":""},{"functionNameJP":"ページ名やメモを変更","functionNameEN":"updatePageName","parametersName":["pages"],"parametersDataType":[[{"id":"number","name":"string","memo":"string"}]],"returnValue":"string","functionId":"01HMN6052QAD54A25S6DATTK49","beforeCode":"\n\n\n","innerCode":"\n  for (const { id, name, memo } of pages ) {\n    await runSqlWriteOnly(\n      `UPDATE pages\n          SET page_name = :pageName,\n            memo = :memo\n          WHERE page_id = :pageId;`,\n      {\n          \":pageId\": id,\n          \":pageName\": name,\n          \":memo\": memo,\n      },\n    );\n  }\n  return \"ページ名を変更しました\";\n","afterCode":""},{"functionNameJP":"１ページの情報を取得","functionNameEN":"getPageInfo","parametersName":["pageId"],"parametersDataType":["number_nullable"],"returnValue":{"pageId":"number_nullable","pageName":"string","memo":"string","parentPages":[{"id":"number","name":"string"}],"staticPages":[{"id":"number","name":"string"}],"dynamicPages":[{"id":"number","name":"string"}],"joinedTableType":"string"},"functionId":"01HMN7CMA805FG89GHHEGXKMRK","beforeCode":"\n\n\n\n","innerCode":"\n  if( !pageId ){\n    throw ``;\n  }\n  // トップページ以外の情報を取得する場合\n  const pages = await runSqlReadOnly(\n    `SELECT \n        pages.page_id AS pageId,\n        pages.page_name AS pageName,\n        pages.memo AS memo,\n        joined_tables.page_id AS parentPageId\n      FROM pages\n      LEFT OUTER JOIN joined_tables\n        ON pages.dynamic_parent_id = joined_tables.joined_table_id\n      WHERE pages.page_id = :pageId\n      LIMIT 1;`,\n    {\n      \":pageId\": pageId,    // 作成日時\n    },\n  );\n  if(pages.length===0){\n    throw \"ページが見つかりません。\";\n  }\n  const pageInfo = pages[0];\n  //\n  // 子ページの情報を取得する\n  const childrenPages = await runSqlReadOnly(\n    `SELECT \n        page_id AS id,\n        page_name AS name,\n        dynamic_parent_id IS NOT NULL AS isDynamic\n      FROM pages\n      WHERE static_parent_id = :pageId\n        OR dynamic_parent_id = :pageId\n      ORDER BY static_parent_id ASC, sort_number ASC;`,\n    {\n      \":pageId\": pageId,\n    },\n  );\n  const staticPages = [];\n  const dynamicPages = [];\n  for( const { id, name, isDynamic } of childrenPages ){\n    if( isDynamic ){\n      dynamicPages.push({\n        id: id,\n        name: name,\n      });\n    }\n    else{\n      staticPages.push({\n        id: id,\n        name: name,\n      });\n    }\n  }\n  return {\n    \"pageId\": pageInfo[\"pageId\"],\n    \"pageName\": pageInfo[\"pageName\"],\n    \"memo\": pageInfo[\"memo\"] ?? \"\",\n    \"tableId\": pageInfo[\"tableId\"] ?? null,\n    \"joinedTableType\": pageInfo[\"joinedTableType\"] ?? \"NONE\",\n    \"parentPages\": parentPages,\n    \"staticPages\": staticPages,\n    \"dynamicPages\": dynamicPages,\n  };\n","afterCode":""},{"functionNameJP":"テーブルIDからjoinedTableIdを取得する","functionNameEN":"listJoinsFromTableId","parametersName":["tableId"],"parametersDataType":["string"],"returnValue":["number"],"functionId":"01HMTN87RTPZ4YRBF7EM9P9Z5H","beforeCode":"\n\n\n\n","innerCode":"\n  const pages = await runSqlReadOnly(\n    `SELECT joined_table_id AS joinedTableId\n      FROM joined_tables\n      WHERE table_id = :tableId;`,\n    {\n      \":tableId\": tableId,    // 作成日時\n    },\n  );\n  return pages.map( ({ joinedTableId }) => joinedTableId );\n","afterCode":""},{"functionNameJP":"joinedTableIdからテーブルIDを取得する","functionNameEN":"getTableFromJoin","parametersName":["joinedTableId"],"parametersDataType":["number"],"returnValue":"string_nullable","functionId":"01HMTPWKSTA4JDK3V2MMEB8WAA","beforeCode":"\n\n\n\n","innerCode":"\n  const pages = await runSqlReadOnly(\n    `SELECT table_id AS tableId\n      FROM joined_tables\n      WHERE joined_table_id = :joinedTableId;`,\n    {\n      \":joinedTableId\": joinedTableId,\n    },\n  );\n  if( pages.length===0 ){\n    return null;\n  }\n  return pages[0].tableId;\n","afterCode":""},{"functionNameJP":"結合済みテーブルを作成","functionNameEN":"createJoinedTable","parametersName":["pageId","tableId","sqlQuery"],"parametersDataType":["number","string","string"],"returnValue":"void","functionId":"01HMTQJ8KRYQMYJP2VKP32TCE8","beforeCode":"\n\n\n\n\n","innerCode":"\n  const tableName = await getTableName( tableId );\n  if(!tableName){\n    throw `テーブル名を取得できません。\\ntableId = ${tableId}`;\n  }\n  const timestamp = new Date().getTime();\n  await runSqlWriteOnly(\n    `INSERT INTO joined_tables( page_id, table_id, sql_query, created_at )\n        VALUES ( :pageId, :tableId, :sqlQuery, :createdAt );`,\n    {\n      \":pageId\": pageId,\n      \":tableId\": tableId,\n      \":sqlQuery\": sqlQuery,\n      \":createdAt\": timestamp,    // 作成日時\n    },\n  );\n  // IDを取得する\n  const pages = await runSqlReadOnly(\n    `SELECT joined_table_id AS joinedTableId\n      FROM joined_tables\n      WHERE created_at = :createdAt\n      LIMIT 1;`,\n    {\n      \":createdAt\": timestamp,    // 作成日時\n    },\n  );\n  if(pages.length===0){\n    throw \"登録したはずのページが見つかりません。\";\n  }\n  const joinedTableId = pages[0][\"joinedTableId\"];\n  if(isNaN(joinedTableId)){\n    throw \"新しく発行されたjoinedTableIdが見つかりません。\";\n  }\n  //\n  // 動的リストの子を作る\n  await runSqlWriteOnly(\n    `INSERT INTO pages( dynamic_parent_id, page_name, created_at )\n        VALUES ( :dynamicParentId, :pageName, :createdAt );`,\n    {\n      \":dynamicParentId\": joinedTableId,\n      \":pageName\": tableName,\n      \":createdAt\": timestamp,    // 作成日時\n    },\n  );\n  await _checkTree();\n  return {\n    joinedTableId: joinedTableId,\n  };\n","afterCode":""},{"functionNameJP":"結合済みテーブルを削除","functionNameEN":"deleteJoinedTable","parametersName":["joinedTableId"],"parametersDataType":["number"],"returnValue":"void","functionId":"01HMWB57T99F71PJH749VEA01H","beforeCode":"\n\n\n\n\n","innerCode":"\n  throw \"この関数は未実装です。\";\n","afterCode":""},{"functionNameJP":"ページを削除","functionNameEN":"deletePage","parametersName":["pageId"],"parametersDataType":["string"],"returnValue":"void","functionId":"01HMWB75NVYVY2MVBNJYNQY20B","beforeCode":"\n\n\n\n\n","innerCode":"\n  throw \"この関数は未実装です。\";\n","afterCode":""},{"functionNameJP":"パンくずリストを再帰的に取得","functionNameEN":"getBreadcrumbs","parametersName":["pageId"],"parametersDataType":["number"],"returnValue":[{"pageId":"number","pageName":"string"}],"functionId":"01HMWBRSYJKGS69KBT85034YQX","beforeCode":"\n\n\n\n","innerCode":"\n  if( !pageId ){\n    return [];\n  }\n  const pages = await runSqlReadOnly(\n    `SELECT \n        pages.page_name AS pageName,\n        pages.static_parent_id AS parentPageId1,\n        joined_tables.page_id AS parentPageId2\n      FROM pages\n      LEFT OUTER JOIN joined_tables\n        ON pages.dynamic_parent_id = joined_tables.joined_table_id\n      WHERE pages.page_id = :pageId\n      LIMIT 1;`,\n    {\n      \":pageId\": pageId,\n    },\n  );\n  if(pages.length===0){\n    throw \"ページが見つかりません。\";\n  }\n  // 親ページのID\n  const parentPageId1 = pages[0][\"parentPageId1\"];\n  const parentPageId2 = pages[0][\"parentPageId2\"];\n  if( pageId===parentPageId1 || pageId===parentPageId2 ){\n    throw `ページIDの循環参照が発生しました。\\npageId = ${pageId}`;\n  }\n  let list = [];\n  if( parentPageId1 ){\n    // 関数を再帰呼び出し\n    list = await getBreadcrumbs_core( parentPageId1 );\n  }\n  else if( parentPageId2 ){\n    // 関数を再帰呼び出し\n    list = await getBreadcrumbs_core( parentPageId2 );\n  }\n  return [\n    ...list,\n    {\n      \"pageId\": pageId,\n      \"pageName\": pages[0][\"pageName\"],\n    }\n  ];\n","afterCode":""},{"functionNameJP":"ページを切り取る","functionNameEN":"cutPage","parametersName":["pageId"],"parametersDataType":["number"],"returnValue":"void","functionId":"01HMWD8XPY8G5PD2MN1WAKX4GF","beforeCode":"\n\n","innerCode":"\n  throw \"この関数は未実装です。\";\n","afterCode":""},{"functionNameJP":"ページをコピーする","functionNameEN":"copyPage","parametersName":["pageId"],"parametersDataType":["number"],"returnValue":"void","functionId":"01HMWDPNNBDQ2ZQB8NCVPJF1AK","beforeCode":"\n\n","innerCode":"\n  throw \"この関数は未実装です。\";\n","afterCode":""},{"functionNameJP":"ページを貼り付ける","functionNameEN":"pastePage","parametersName":["parentPageId","afterPageId"],"parametersDataType":["number","number_nullable"],"returnValue":"void","functionId":"01HMWDZ8R7Z2TT2K6RER08450M","beforeCode":"\n\n","innerCode":"\n  throw \"この関数は未実装です。\";\n","afterCode":""},{"functionNameJP":"切り取り中のページを取得する","functionNameEN":"getCuttingPage","parametersName":[],"parametersDataType":[],"returnValue":"number_nullable","functionId":"01HMWE1C5W4YTSG61Y8WED2G9E","beforeCode":"\n\n","innerCode":"\n  throw \"この関数は未実装です。\";\n","afterCode":""},{"functionNameJP":"コピー中のページを取得する","functionNameEN":"getCopyingPage","parametersName":[],"parametersDataType":[],"returnValue":"number_nullable","functionId":"01HMWEBAQ2RPCXBFFJ1CTAP9DH","beforeCode":"\n\n","innerCode":"\n  throw \"この関数は未実装です。\";\n","afterCode":""},{"functionNameJP":"ページを全て取得する関数","functionNameEN":"listAllPages","parametersName":[],"parametersDataType":[],"returnValue":["number"],"functionId":"01HMWYVRCGRHZFP0J1TG7JVRRP","beforeCode":"\n\n\n\n","innerCode":"\n  const matrix = await runSqlReadOnly(\n    `SELECT page_id AS pageId FROM pages;`, {},\n  );\n  return matrix.map(({pageId})=>pageId);\n","afterCode":"\n"}]