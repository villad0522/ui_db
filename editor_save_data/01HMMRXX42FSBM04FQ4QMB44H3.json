[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n  await startUp(\"http://localhost:3000/\", true);\n  const { pageId: pageId1 } = await createPage( null, \"ページ１\", false );\n  const { pageId: pageId2 } = await createPage( pageId1, \"ページ2\", false );\n  const { pageId: pageId3 } = await createPage( pageId2, \"ページ3\", false );\n  const { pageId: pageId4 } = await createPage( pageId3, \"ページ4\", false );\n  const { pageId: pageId5 } = await createPage( pageId4, \"ページ5\", false );\n  const { pageId: pageId6 } = await createPage( pageId5, \"ページ6\", false );\n  const { pageId: pageId7 } = await createPage( pageId6, \"ページ7\", false );\n  await updatePageName([\n    {\n      id: pageId1,\n      name: \"ページ１改\",\n      memo: \"メモ\",\n    }\n  ]);\n  const info1 = await getPageInfo();\n  const info2 = await getPageInfo( pageId1 );\n  const info5 = await getPageInfo( pageId5 );\n  console.log(info5);\n  await close();\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"プログラム起動","functionNameEN":"startUp","parametersName":["localUrl","isDebug"],"parametersDataType":["string_nullable","boolean"],"returnValue":"void","functionId":"01HMMRXX48W43R1WD2MZ0HJ1PF","beforeCode":"\n\n\n","innerCode":"\n  await startUp( localUrl, isDebug );   // 下層の関数を呼び出す\n  //\n  // テーブルを作成する\n  await reserveWord(\"pages\"); // 予約語に登録\n  await runSqlWriteOnly(\n    `CREATE TABLE IF NOT EXISTS pages (\n      \"page_id\" INTEGER PRIMARY KEY AUTOINCREMENT,\n      \"static_parent_id\" INTEGER,\n      \"dynamic_parent_id\" INTEGER,\n      \"page_name\" TEXT NOT NULL,\n      \"memo\" TEXT NOT NULL DEFAULT '',\n      \"sort_number\" REAL NOT NULL DEFAULT 1,\n      \"created_at\" INTEGER UNIQUE,\n      FOREIGN KEY (static_parent_id) REFERENCES pages(page_id),\n      FOREIGN KEY (dynamic_parent_id) REFERENCES dynamic_lists(page_id)\n    );`, {},\n  );\n  await reserveWord(\"dynamic_lists\"); // 予約語に登録\n  await runSqlWriteOnly(\n    `CREATE TABLE IF NOT EXISTS dynamic_lists (\n      \"page_id\" INTEGER PRIMARY KEY,\n      \"table_id\" TEXT NOT NULL,\n      \"dynamic_list_type\" TEXT NOT NULL,\n      FOREIGN KEY (page_id) REFERENCES pages(page_id)\n    );`, {},\n  );\n","afterCode":""},{"functionNameJP":"ページを作成","functionNameEN":"createPage","parametersName":["parentPageId","pageName","isInDynamicList"],"parametersDataType":["number_nullable","string","boolean"],"returnValue":{"pageId":"number"},"functionId":"01HMN2ZYD5KSV8PT5V1S0AG1HV","beforeCode":"\n\n\n// dynamic_list_type\n//   ・ICONS\n//   ・TABLE\n//   ・CARDS_LANDSCAPE\n//   ・CARDS_SQUARE\n\n\n// 木構造の整合性を確認\nasync function _checkTree(){\n  const matrix1 = await runSqlReadOnly(\n    `SELECT * FROM pages\n      WHERE static_parent_id IS NOT NULL\n      AND dynamic_parent_id IS NOT NULL;`, {},\n  );\n  if(matrix1.length>0){\n    console.error(`親を複数もつページがあります`);\n  }\n}\n\n\n\n","innerCode":"\n  const timestamp = new Date().getTime();\n  if( isInDynamicList ){\n    // 動的リストの子を作る場合\n    if(!parentPageId){\n      throw `親ページが指定されていません`;\n    }\n    await runSqlWriteOnly(\n      `INSERT INTO pages( dynamic_parent_id, page_name, created_at )\n          VALUES ( :dynamicParentId, :pageName, :createdAt );`,\n      {\n        \":dynamicParentId\": parentPageId,\n        \":pageName\": pageName,\n        \":createdAt\": timestamp,    // 作成日時\n      },\n    );\n  }\n  else {\n    // 静的メニューの子を作る場合\n    if(parentPageId){\n      // 親ページが存在する場合\n      await runSqlWriteOnly(\n        `INSERT INTO pages( static_parent_id, page_name, created_at )\n            VALUES ( :staticParentId, :pageName, :createdAt );`,\n        {\n          \":staticParentId\": parentPageId,\n          \":pageName\": pageName,\n          \":createdAt\": timestamp,    // 作成日時\n        },\n      );\n    }\n    else{\n      // トップメニューに追加する場合\n      await runSqlWriteOnly(\n        `INSERT INTO pages( page_name, created_at )\n            VALUES ( :pageName, :createdAt );`,\n        {\n          \":pageName\": pageName,\n          \":createdAt\": timestamp,    // 作成日時\n        },\n      );\n    }\n  }\n  // ページIDを取得する\n  const pages = await runSqlReadOnly(\n    `SELECT page_id AS pageId\n      FROM pages\n      WHERE created_at = :createdAt\n      LIMIT 1;`,\n    {\n      \":createdAt\": timestamp,    // 作成日時\n    },\n  );\n  if(pages.length===0){\n    throw \"登録したはずのページが見つかりません。\";\n  }\n  const pageId = pages[0][\"pageId\"];\n  if(isNaN(pageId)){\n    throw \"新しく発行されたページIDが見つかりません。\";\n  }\n  await _checkTree();\n  return {\n    pageId: pageId,\n  };\n","afterCode":""},{"functionNameJP":"ページ名やメモを変更","functionNameEN":"updatePageName","parametersName":["pages"],"parametersDataType":[[{"id":"number","name":"string","memo":"string"}]],"returnValue":"string","functionId":"01HMN6052QAD54A25S6DATTK49","beforeCode":"\n\n\n","innerCode":"\n  for (const { id, name, memo } of pages ) {\n    await runSqlWriteOnly(\n      `UPDATE pages\n          SET page_name = :pageName,\n            memo = :memo\n          WHERE page_id = :pageId;`,\n      {\n          \":pageId\": id,\n          \":pageName\": name,\n          \":memo\": memo,\n      },\n    );\n  }\n  return \"ページ名を変更しました\";\n","afterCode":""},{"functionNameJP":"１ページの情報を取得","functionNameEN":"getPageInfo","parametersName":["pageId"],"parametersDataType":["number_nullable"],"returnValue":{"pageId":"number_nullable","pageName":"string","memo":"string","parentPages":[{"id":"number","name":"string"}],"staticPages":[{"id":"number","name":"string"}],"dynamicPages":[{"id":"number","name":"string"}],"dynamicListType":"string"},"functionId":"01HMN7CMA805FG89GHHEGXKMRK","beforeCode":"\n\n\n\n","innerCode":"  if( !pageId ){\n    // トップページの情報を取得する場合\n    const staticPages = await runSqlReadOnly(\n      `SELECT \n          page_id AS id,\n          page_name AS name\n        FROM pages\n        WHERE static_parent_id IS NULL\n          AND dynamic_parent_id IS NULL\n        ORDER BY sort_number ASC;`,\n      {},\n    );\n    return {\n      \"pageId\": 0,\n      \"pageName\": \"トップ\",\n      \"memo\": \"\",\n      \"tableId\": null,\n      \"dynamicListType\": \"NONE\",\n      \"parentPages\": [],\n      \"staticPages\": staticPages,\n      \"dynamicPages\": [],\n    };\n  }\n  // トップページ以外の情報を取得する場合\n  const pages = await runSqlReadOnly(\n    `SELECT \n        page1.page_id AS pageId,\n        page1.page_name AS pageName,\n        page1.memo AS memo,\n        dynamic_lists.table_id AS tableId,\n        dynamic_lists.dynamic_list_type AS dynamicListType,\n        page2.page_id AS pageId2,\n        page2.page_name AS pageName2,\n        page3.page_id AS pageId3,\n        page3.page_name AS pageName3,\n        page4.page_id AS pageId4,\n        page4.page_name AS pageName4,\n        page5.page_id AS pageId5,\n        page5.page_name AS pageName5,\n        page6.page_id AS pageId6,\n        page6.page_name AS pageName6\n      FROM pages AS page1\n        LEFT OUTER JOIN dynamic_lists\n          ON dynamic_lists.page_id = page1.page_id\n        LEFT OUTER JOIN pages AS page2\n          ON ( page1.static_parent_id = page2.page_id ) OR ( page1.dynamic_parent_id = page2.page_id )\n        LEFT OUTER JOIN pages AS page3\n          ON ( page2.static_parent_id = page3.page_id ) OR ( page2.dynamic_parent_id = page3.page_id )\n        LEFT OUTER JOIN pages AS page4\n          ON ( page3.static_parent_id = page4.page_id ) OR ( page3.dynamic_parent_id = page4.page_id )\n        LEFT OUTER JOIN pages AS page5\n          ON ( page4.static_parent_id = page5.page_id ) OR ( page4.dynamic_parent_id = page5.page_id )\n        LEFT OUTER JOIN pages AS page6\n          ON ( page5.static_parent_id = page6.page_id ) OR ( page5.dynamic_parent_id = page6.page_id )\n      WHERE page1.page_id = :pageId\n      LIMIT 1;`,\n    {\n      \":pageId\": pageId,    // 作成日時\n    },\n  );\n  if(pages.length===0){\n    throw \"ページが見つかりません。\";\n  }\n  const pageInfo = pages[0];\n  //\n  const parentPages = [];\n  for( let  i=2; i<=6; i++ ){\n    if( !pageInfo[\"pageId\"+i] ){\n      break;\n    }\n    parentPages.push({\n      \"id\": pageInfo[\"pageId\"+i],\n      \"name\": pageInfo[\"pageName\"+i],\n    });\n  }\n  //\n  // 子ページの情報を取得する\n  const childrenPages = await runSqlReadOnly(\n    `SELECT \n        page_id AS id,\n        page_name AS name,\n        dynamic_parent_id IS NOT NULL AS isDynamic\n      FROM pages\n      WHERE static_parent_id = :pageId\n        OR dynamic_parent_id = :pageId\n      ORDER BY static_parent_id ASC, sort_number ASC;`,\n    {\n      \":pageId\": pageId,    // 作成日時\n    },\n  );\n  const staticPages = [];\n  const dynamicPages = [];\n  for( const { id, name, isDynamic } of childrenPages ){\n    if( isDynamic ){\n      dynamicPages.push({\n        id: id,\n        name: name,\n      });\n    }\n    else{\n      staticPages.push({\n        id: id,\n        name: name,\n      });\n    }\n  }\n  return {\n    \"pageId\": pageInfo[\"pageId\"],\n    \"pageName\": pageInfo[\"pageName\"],\n    \"memo\": pageInfo[\"memo\"] ?? \"\",\n    \"tableId\": pageInfo[\"tableId\"] ?? null,\n    \"dynamicListType\": pageInfo[\"dynamicListType\"] ?? \"NONE\",\n    \"parentPages\": parentPages,\n    \"staticPages\": staticPages,\n    \"dynamicPages\": dynamicPages,\n  };\n","afterCode":"\n"}]