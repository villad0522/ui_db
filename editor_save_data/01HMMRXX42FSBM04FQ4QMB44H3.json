[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n  await startUp(\"http://localhost:3000/\", true);\n  //\n  // テーブルを作成\n  const { tableId: tableId1 } = await createTable(\"学年\");\n  // カラムを作成\n  const { columnId: columnId1 } = await createColumn( tableId1, \"学年\", \"INTEGER\", null );\n  // レコードを作成\n  const { recordId: recordId } = await createRecord( tableId1, {\n    [columnId1]: 3,\n  });\n  //\n  // テーブルを作成\n  const { tableId: tableId2 } = await createTable(\"名簿\");\n  // カラムを作成\n  const { columnId: columnId2  } = await createColumn( tableId2, \"学年\", \"POINTER\", tableId1 );\n  const { columnId: columnId3  } = await createColumn( tableId2, \"氏名\", \"TEXT\", null );\n  // レコードを作成\n  await createRecord( tableId2, {\n    [columnId2]: recordId,\n    [columnId3]: \"田中太郎\",\n  });\n  //\n  // ページを作成\n  const { pageId: pageId1 } = await createPage( 1 );\n  await updatePageName( pageId1, \"ページ1\",  \"メモ\" );\n  //\n  const { pageId: pageId2 } = await createPage( pageId1 );\n  await updatePageName( pageId2, \"ページ2\",  \"メモ\" );\n  //\n  const { pageId: pageId3 } = await createPage( pageId2 );\n  await updatePageName( pageId3, \"ページ3\",  \"メモ\" );\n  //\n  const { pageId: pageId4 } = await createPage( pageId3 );\n  await updatePageName( pageId4, \"ページ4\",  \"メモ\" );\n  //\n  const { pageId: pageId5 } = await createPage( pageId4 );\n  await updatePageName( pageId5, \"ページ5\",  \"メモ\" );\n  //\n  const { pageId: pageId6 } = await createPage( pageId5 );\n  await updatePageName( pageId6, \"ページ6\",  \"メモ\" );\n  //\n  const { pageId: pageId7 } = await createPage( pageId6 );\n  await updatePageName( pageId7, \"ページ7\",  \"メモ\" );\n  //\n  //\n  await getBreadcrumbs( pageId7 );\n  //\n  // ビューを作成\n  const { viewId: viewId1 } = await createView( pageId6, tableId1, `SELECT * FROM ${tableId1};` );\n  //\n  const views = await listViewsFromTableId( tableId1 );\n  if(views[0] !== viewId1 ){\n    throw `関数「listViewsFromTableId」の実行結果が想定とは異なります。\\nviews = ${JSON.stringify(views)}`;\n  }\n  if( (await getTableFromView( viewId1 )) !== tableId1 ){\n    throw `関数「getTableFromView」の実行結果が想定とは異なります。`;\n  }\n  //\n  // ビューを削除\n  await deleteView( viewId1 );\n  //\n  // 子ページの一覧を再帰的に取得\n  const children = await listChildrenPage( pageId1 );\n  if( children[0] !== pageId2 ){\n    throw `関数「listChildrenPage」の実行結果が想定とは異なります。`;\n  }\n  if( children[1] !== pageId3 ){\n    throw `関数「listChildrenPage」の実行結果が想定とは異なります。`;\n  }\n  if( children[2] !== pageId4 ){\n    throw `関数「listChildrenPage」の実行結果が想定とは異なります。`;\n  }\n  if( children[3] !== pageId5 ){\n    throw `関数「listChildrenPage」の実行結果が想定とは異なります。`;\n  }\n  if( children[4] !== pageId6 ){\n    throw `関数「listChildrenPage」の実行結果が想定とは異なります。`;\n  }\n  if( children[5] !== pageId7 ){\n    throw `関数「listChildrenPage」の実行結果が想定とは異なります。`;\n  }\n  //\n  // ページの情報を取得\n  const info1 = await getPageInfo( pageId1 );\n  const info5 = await getPageInfo( pageId5 );\n  //\n  // ページ５をページ３の直下に移動\n  await cutPage( pageId5 );\n  await pastePage( pageId3, null );\n  //\n  // ページ５をページ４の直前に移動\n  await cutPage( pageId5 );\n  await pastePage( pageId3, pageId4 );\n  //\n  // ページを削除\n  await deletePage( pageId2 );\n  //\n  await close();\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"プログラム起動","functionNameEN":"startUp","parametersName":["localUrl","isDebug"],"parametersDataType":["string_nullable","boolean"],"returnValue":"void","functionId":"01HMMRXX48W43R1WD2MZ0HJ1PF","beforeCode":"\n\n\n","innerCode":"\n  await startUp( localUrl, isDebug );   // 下層の関数を呼び出す\n  //\n  // テーブルを作成する\n  await reserveWord(\"pages\"); // 予約語に登録\n  await runSqlWriteOnly(\n    `CREATE TABLE IF NOT EXISTS pages (\n      \"page_id\" INTEGER PRIMARY KEY AUTOINCREMENT,\n      \"static_parent_id\" INTEGER,\n      \"dynamic_parent_id\" INTEGER UNIQUE,\n      \"page_name\" TEXT NOT NULL DEFAULT '新しいページ',\n      \"memo\" TEXT NOT NULL DEFAULT '',\n      \"sort_number\" REAL NOT NULL DEFAULT 64,\n      \"created_at\" INTEGER UNIQUE,\n      FOREIGN KEY (static_parent_id) REFERENCES pages(page_id),\n      FOREIGN KEY (dynamic_parent_id) REFERENCES views(view_id)\n    );`, {},\n  );\n  await reserveWord(\"views\"); // 予約語に登録\n  await runSqlWriteOnly(\n    `CREATE TABLE IF NOT EXISTS views (\n      \"view_id\" INTEGER PRIMARY KEY,\n      \"view_name\" TEXT NOT NULL,\n      \"page_id\" INTEGER NOT NULL,\n      \"table_id\" TEXT NOT NULL,\n      \"one_page_max_size\" NUMBER NOT NULL DEFAULT 23,\n      \"view_type\" TEXT NOT NULL DEFAULT 'TABLE',\n      \"sort_number\" REAL NOT NULL DEFAULT 64,\n      \"created_at\" INTEGER UNIQUE,\n      FOREIGN KEY (page_id) REFERENCES pages(page_id)\n    );`, {},\n  );\n  const pages = await runSqlReadOnly(\n    `SELECT * FROM pages LIMIT 1;`, {},\n  );\n  if( pages.length===0 ){\n    const timestamp = new Date().getTime();\n    // ページが１つも無い場合は、トップページを作成する\n    await runSqlWriteOnly(\n      `INSERT INTO pages( page_id, page_name, created_at )\n          VALUES ( 1, 'トップ', :createdAt );`,\n      {\n        \":createdAt\": timestamp,    // 作成日時\n      },\n    );\n  }\n","afterCode":""},{"functionNameJP":"ページを作成","functionNameEN":"createPage","parametersName":["parentPageId"],"parametersDataType":["number"],"returnValue":{"pageId":"number"},"functionId":"01HMN2ZYD5KSV8PT5V1S0AG1HV","beforeCode":"\n\n\n// view_type\n//   ・ICONS\n//   ・TABLE\n//   ・CARDS_LANDSCAPE\n//   ・CARDS_SQUARE\n\n\n// 木構造の整合性を確認\nasync function _checkTree(){\n  const matrix1 = await runSqlReadOnly(\n    `SELECT * FROM pages\n      WHERE static_parent_id IS NOT NULL\n      AND dynamic_parent_id IS NOT NULL;`, {},\n  );\n  if(matrix1.length>0){\n    console.error(`親を複数もつページがあります`);\n  }\n  const matrix2 = await runSqlReadOnly(\n    `SELECT *\n      FROM views\n      LEFT OUTER JOIN pages\n        ON views.view_id = pages.dynamic_parent_id\n      WHERE pages.page_id IS NULL;`, {},\n  );\n  if(matrix2.length>0){\n    console.error(`子ページを持たないビューがあります`);\n  }\n}\n\n\n\n","innerCode":"\n  // ソート番号を何にするべきか決める\n  const sortNumber = await _generatePageSortNumber_core( parentPageId, null );\n  const timestamp = new Date().getTime();\n  await runSqlWriteOnly(\n    `INSERT INTO pages( static_parent_id, sort_number, created_at )\n        VALUES ( :staticParentId, :sortNumber, :createdAt );`,\n    {\n      \":staticParentId\": parentPageId,\n      \":sortNumber\": sortNumber,\n      \":createdAt\": timestamp,    // 作成日時\n    },\n  );\n  // ページIDを取得する\n  const pages = await runSqlReadOnly(\n    `SELECT page_id AS pageId\n      FROM pages\n      WHERE created_at = :createdAt\n      LIMIT 1;`,\n    {\n      \":createdAt\": timestamp,    // 作成日時\n    },\n  );\n  if(pages.length===0){\n    throw \"登録したはずのページが見つかりません。\";\n  }\n  const pageId = pages[0][\"pageId\"];\n  if(isNaN(pageId)){\n    throw \"新しく発行されたページIDが見つかりません。\";\n  }\n  await _checkTree();\n  return {\n    pageId: pageId,\n  };\n","afterCode":""},{"functionNameJP":"ページ名やメモを変更","functionNameEN":"updatePageName","parametersName":["pageId","pageName","memo"],"parametersDataType":["number","string","string"],"returnValue":"string","functionId":"01HMN6052QAD54A25S6DATTK49","beforeCode":"\n\n\n","innerCode":"\n  await runSqlWriteOnly(\n    `UPDATE pages\n        SET page_name = :pageName,\n          memo = :memo\n        WHERE page_id = :pageId;`,\n    {\n        \":pageId\": pageId,\n        \":pageName\": pageName,\n        \":memo\": memo,\n    },\n  );\n  return \"ページ名を変更しました\";\n","afterCode":""},{"functionNameJP":"１ページの情報を取得","functionNameEN":"getPageInfo","parametersName":["pageId"],"parametersDataType":["number"],"returnValue":{"pageName":"string","memo":"string"},"functionId":"01HMN7CMA805FG89GHHEGXKMRK","beforeCode":"\n\n\n\n","innerCode":"\n  if( !pageId ){\n    throw `ページIDは1以上の整数を指定してください。\\npageId = ${pageId}`;\n  }\n  const pages = await runSqlReadOnly(\n    `SELECT\n        pages.page_name AS pageName,\n        pages.memo AS memo\n      FROM pages\n      WHERE pages.page_id = :pageId\n      LIMIT 1;`,\n    {\n      \":pageId\": pageId,\n    },\n  );\n  if(pages.length===0){\n    throw \"ページが見つかりません。\";\n  }\n  return {\n    \"pageName\": pages[0][\"pageName\"],\n    \"memo\": pages[0][\"memo\"] ?? \"\",\n  };\n","afterCode":""},{"functionNameJP":"テーブルIDからviewIdを取得する","functionNameEN":"listViewsFromTableId","parametersName":["tableId"],"parametersDataType":["string"],"returnValue":["number"],"functionId":"01HMTN87RTPZ4YRBF7EM9P9Z5H","beforeCode":"\n\n\n\n","innerCode":"\n  const pages = await runSqlReadOnly(\n    `SELECT view_id AS viewId\n      FROM views\n      WHERE table_id = :tableId;`,\n    {\n      \":tableId\": tableId,    // 作成日時\n    },\n  );\n  return pages.map( ({ viewId }) => viewId );\n","afterCode":""},{"functionNameJP":"viewIdからテーブルIDを取得する","functionNameEN":"getTableFromView","parametersName":["viewId"],"parametersDataType":["number"],"returnValue":"string","functionId":"01HMTPWKSTA4JDK3V2MMEB8WAA","beforeCode":"\n\n\n\n","innerCode":"\n  const pages = await runSqlReadOnly(\n    `SELECT table_id AS tableId\n      FROM views\n      WHERE view_id = :viewId;`,\n    {\n      \":viewId\": viewId,\n    },\n  );\n  if( pages.length===0 ){\n    throw `指定されたビューが存在しません。\\nviewId = ${viewId}`;\n  }\n  return pages[0].tableId;\n","afterCode":""},{"functionNameJP":"ビューを作成","functionNameEN":"createView","parametersName":["pageId","tableId"],"parametersDataType":["number","string"],"returnValue":"void","functionId":"01HMTQJ8KRYQMYJP2VKP32TCE8","beforeCode":"\n\n\n\n\n","innerCode":"\n  const tableName = await getTableName( tableId );\n  if(!tableName){\n    throw `テーブル名を取得できません。\\ntableId = ${tableId}`;\n  }\n  const timestamp = new Date().getTime();\n  await runSqlWriteOnly(\n    `INSERT INTO views( view_name, page_id, table_id, created_at )\n        VALUES ( :viewName, :pageId, :tableId, :createdAt );`,\n    {\n      \":viewName\": tableName,\n      \":pageId\": pageId,\n      \":tableId\": tableId,\n      \":createdAt\": timestamp,    // 作成日時\n    },\n  );\n  // IDを取得する\n  const views = await runSqlReadOnly(\n    `SELECT view_id AS viewId\n      FROM views\n      WHERE created_at = :createdAt\n      LIMIT 1;`,\n    {\n      \":createdAt\": timestamp,    // 作成日時\n    },\n  );\n  if(views.length===0){\n    throw \"登録したはずのページが見つかりません。\";\n  }\n  const viewId = views[0][\"viewId\"];\n  if(isNaN(viewId)){\n    throw \"新しく発行されたviewIdが見つかりません。\";\n  }\n  //\n  // 動的リストの子を作る\n  await runSqlWriteOnly(\n    `INSERT INTO pages( dynamic_parent_id, page_name, created_at )\n        VALUES ( :dynamicParentId, :pageName, :createdAt );`,\n    {\n      \":dynamicParentId\": viewId,\n      \":pageName\": tableName,\n      \":createdAt\": timestamp,    // 作成日時\n    },\n  );\n  await _checkTree();\n  return {\n    viewId: viewId,\n  };\n","afterCode":""},{"functionNameJP":"ビューを削除","functionNameEN":"deleteView","parametersName":["viewId"],"parametersDataType":["number"],"returnValue":"void","functionId":"01HMWB57T99F71PJH749VEA01H","beforeCode":"\n\n\n\n\n","innerCode":"\n  // 子ページを取得する（１個のはず）\n  const pages = await runSqlReadOnly(\n    `SELECT page_id AS pageId\n      FROM pages\n      WHERE dynamic_parent_id = :viewId;`,\n    {\n      \":viewId\": viewId,\n    },\n  );\n  for( const { pageId } of pages ){\n    // 子ページを再帰的に削除する\n    await deletePage_core( pageId );\n  }\n  //\n  // 対象のビューを削除する\n  await runSqlWriteOnly(\n    `DELETE FROM views WHERE view_id = :viewId;`,\n    {\n      \":viewId\": viewId,\n    },\n  );\n  await deleteView( viewId ); // 下層の関数を呼び出す\n","afterCode":""},{"functionNameJP":"ページを再帰的に削除","functionNameEN":"deletePage","parametersName":["pageId"],"parametersDataType":["number"],"returnValue":"void","functionId":"01HMWB75NVYVY2MVBNJYNQY20B","beforeCode":"\n\n\n\n\n","innerCode":"\n  // 子ページの一覧を取得する\n  const children = await listChildrenPage_core( pageId );\n  // 子ページを削除する\n  //  （子→親の順番になるように削除する）\n  for( let i=children.length-1; i>=0; i-- ){\n    await _deletePageInner( children[i] );\n  }\n  // 対象のページを削除する\n  await _deletePageInner( pageId );\n","afterCode":""},{"functionNameJP":"パンくずリストを再帰的に取得","functionNameEN":"getBreadcrumbs","parametersName":["pageId"],"parametersDataType":["number"],"returnValue":[{"pageId":"number","pageName":"string"}],"functionId":"01HMWBRSYJKGS69KBT85034YQX","beforeCode":"\n\n\nasync function _deletePageInner( pageId ){\n  // 対象のページを削除する\n  await runSqlWriteOnly(\n    `DELETE FROM pages WHERE page_id = :pageId;`,\n    {\n      \":pageId\": pageId,\n    },\n  );\n  // もし親のビューが存在したら、削除する\n  const view = await runSqlReadOnly(\n    `SELECT dynamic_parent_id AS viewId\n      FROM pages\n      WHERE page_id = :pageId\n      LIMIT 1;`,\n    {\n      \":pageId\": pageId,\n    },\n  );\n  if(view.length>=1){\n    await deleteView( view[0][\"viewId\"] );\n  }\n}\n\n","innerCode":"\n  if( !pageId ){\n    return [];\n  }\n  const pages = await runSqlReadOnly(\n    `SELECT \n        pages.page_name AS pageName,\n        pages.static_parent_id AS parentPageId1,\n        views.page_id AS parentPageId2\n      FROM pages\n      LEFT OUTER JOIN views\n        ON pages.dynamic_parent_id = views.view_id\n      WHERE pages.page_id = :pageId\n      LIMIT 1;`,\n    {\n      \":pageId\": pageId,\n    },\n  );\n  if(pages.length===0){\n    throw \"ページが見つかりません。\";\n  }\n  // 親ページのID\n  const parentPageId1 = pages[0][\"parentPageId1\"];\n  const parentPageId2 = pages[0][\"parentPageId2\"];\n  if( pageId===parentPageId1 || pageId===parentPageId2 ){\n    throw `ページIDの循環参照が発生しました。\\npageId = ${pageId}`;\n  }\n  let list = [];\n  if( parentPageId1 ){\n    // 関数を再帰呼び出し\n    list = await getBreadcrumbs_core( parentPageId1 );\n  }\n  else if( parentPageId2 ){\n    // 関数を再帰呼び出し\n    list = await getBreadcrumbs_core( parentPageId2 );\n  }\n  return [\n    ...list,\n    {\n      \"pageId\": pageId,\n      \"pageName\": pages[0][\"pageName\"],\n    }\n  ];\n","afterCode":""},{"functionNameJP":"ページを切り取る","functionNameEN":"cutPage","parametersName":["pageId"],"parametersDataType":["number"],"returnValue":"void","functionId":"01HMWD8XPY8G5PD2MN1WAKX4GF","beforeCode":"\n\nlet cuttingPageId = null;\nlet copyingPageId = null;\n\n\n\n","innerCode":"\n  cuttingPageId = pageId;\n  copyingPageId = null;\n","afterCode":""},{"functionNameJP":"ページをコピーする","functionNameEN":"copyPage","parametersName":["pageId"],"parametersDataType":["number"],"returnValue":"void","functionId":"01HMWDPNNBDQ2ZQB8NCVPJF1AK","beforeCode":"\n\n\n\n","innerCode":"\n  copyingPageId = pageId;\n  cuttingPageId = null;\n","afterCode":""},{"functionNameJP":"ページを貼り付ける","functionNameEN":"pastePage","parametersName":["parentPageId","afterPageId"],"parametersDataType":["number","number_nullable"],"returnValue":{"pageId":"number"},"functionId":"01HMWDZ8R7Z2TT2K6RER08450M","beforeCode":"\n\n\n\n\n","innerCode":"\n  if( copyingPageId ){\n    // ページをコピーする場合\n    await _copyPage( copyingPageId, parentPageId, afterPageId );\n    return {\n      \"pageId\":copyingPageId\n    };\n  }\n  else if( cuttingPageId ){\n    // 事前に切り取ったページを貼り付ける場合\n    await _movePage_core( cuttingPageId, parentPageId, afterPageId );\n    return {\n      \"pageId\":cuttingPageId\n    };\n  }\n  else{\n    throw new Error(`貼り付け操作を行う前に、切り取り または コピーを行ってください。`);\n  }\n","afterCode":""},{"functionNameJP":"切り取り中のページを取得する","functionNameEN":"getCuttingPage","parametersName":[],"parametersDataType":[],"returnValue":"number_nullable","functionId":"01HMWE1C5W4YTSG61Y8WED2G9E","beforeCode":"\n\n\n\n","innerCode":"\n  return cuttingPageId;\n","afterCode":""},{"functionNameJP":"コピー中のページを取得する","functionNameEN":"getCopyingPage","parametersName":[],"parametersDataType":[],"returnValue":"number_nullable","functionId":"01HMWEBAQ2RPCXBFFJ1CTAP9DH","beforeCode":"\n\n\n\n\n","innerCode":"\n  return copyingPageId;\n","afterCode":""},{"functionNameJP":"ページを全て取得する関数","functionNameEN":"listAllPages","parametersName":[],"parametersDataType":[],"returnValue":["number"],"functionId":"01HMWYVRCGRHZFP0J1TG7JVRRP","beforeCode":"\n\n\n\n","innerCode":"\n  const matrix = await runSqlReadOnly(\n    `SELECT page_id AS pageId FROM pages;`, {},\n  );\n  return matrix.map(({pageId})=>pageId);\n","afterCode":""},{"functionNameJP":"子ページの一覧を取得","functionNameEN":"listStaticChildren","parametersName":["pageId"],"parametersDataType":["number"],"returnValue":[{"pageId":"number","pageName":"string"}],"functionId":"01HMZSBSSY7TNG6KY5G17E6J43","beforeCode":"\n\n\n\n\n","innerCode":"\n  return await runSqlReadOnly(\n    `SELECT \n        page_id AS pageId,\n        page_name AS pageName\n      FROM pages\n      WHERE static_parent_id = :parentPageId\n      ORDER BY sort_number ASC;`,\n    {\n      \":parentPageId\": pageId,\n    },\n  );\n","afterCode":""},{"functionNameJP":"ビューの一覧を取得","functionNameEN":"listChildrenView","parametersName":["pageId"],"parametersDataType":["number"],"returnValue":[{"viewId":"number","childPageId":"number","tableId":"string","onePageMaxSize":"number","viewType":"string"}],"functionId":"01HMZSCY5KWH0VE1D72CDG8HAK","beforeCode":"\n\n\n\n\n","innerCode":"\n  return await runSqlReadOnly(\n    `SELECT \n        pages.page_id AS childPageId,\n        views.view_id AS viewId,\n        views.table_id AS tableId,\n        views.one_page_max_size AS onePageMaxSize,\n        views.view_type AS viewType\n      FROM pages\n      INNER JOIN views\n        ON pages.dynamic_parent_id = views.view_id\n      WHERE views.page_id = :parentPageId\n      ORDER BY views.sort_number ASC;`,\n    {\n      \":parentPageId\": pageId,\n    },\n  );\n","afterCode":""},{"functionNameJP":"親ページのIDを取得","functionNameEN":"getParentPage","parametersName":["pageId"],"parametersDataType":["number"],"returnValue":"number_nullable","functionId":"01HN0HXHA9F46664H7GT8SGXAX","beforeCode":"\n\n\n\n","innerCode":"\n  const pages = await runSqlReadOnly(\n    `SELECT \n        pages.page_name AS pageName,\n        pages.static_parent_id AS parentPageId1,\n        views.page_id AS parentPageId2\n      FROM pages\n      LEFT OUTER JOIN views\n        ON pages.dynamic_parent_id = views.view_id\n      WHERE pages.page_id = :pageId\n      LIMIT 1;`,\n    {\n      \":pageId\": pageId,\n    },\n  );\n  if(pages.length===0){\n    throw \"ページが見つかりません。\";\n  }\n  // 親ページのID\n  const parentPageId1 = pages[0][\"parentPageId1\"];\n  const parentPageId2 = pages[0][\"parentPageId2\"];\n  if( pageId===parentPageId1 || pageId===parentPageId2 ){\n    throw `ページIDの循環参照が発生しました。\\npageId = ${pageId}`;\n  }\n  if(parentPageId1){\n    return parentPageId1;\n  }\n  else if(parentPageId2){\n    return parentPageId2;\n  }\n  return 0;\n","afterCode":""},{"functionNameJP":"子ページの一覧を再帰的に取得","functionNameEN":"listChildrenPage","parametersName":["parentId"],"parametersDataType":["number"],"returnValue":["number"],"functionId":"01HN1HPJYREFG241M5ZY803B13","beforeCode":"\n\n","innerCode":"\n  // 戻り値はページIDの配列。親→子の順番になるように配列を構築する。\n  if( !parentId ){\n    return [];\n  }\n  const pages = await runSqlReadOnly(\n    `SELECT \n        pages.page_id AS childId\n      FROM pages\n      LEFT OUTER JOIN views\n        ON pages.dynamic_parent_id = views.view_id\n      WHERE pages.static_parent_id = :parentId\n        OR views.page_id = :parentId;`,\n    {\n      \":parentId\": parentId,\n    },\n  );\n  if(pages.length===0){\n    return [];\n  }\n  const pageIds = [];\n  for( const {childId} of pages ){\n    if( parentId===childId ){\n      throw `ページIDの循環参照が発生しました。\\npageId = ${parentId}`;\n    }\n    // 順序が親→子になるように気を付ける。\n    // もしページの順序を間違えると、この関数は削除処理に使われているため、親が先に消滅してしまう。\n    pageIds.push( childId );\n    //\n    // 関数を再帰呼び出し\n    const list = await listChildrenPage_core( childId );\n    for( const pageId of list ){\n      if( pageIds.includes(pageId)){\n        throw `子ページの重複が発生しました。\\npageId = ${pageId}`;\n      }\n      pageIds.push( pageId );\n    }\n  }\n  return pageIds;\n","afterCode":""},{"functionNameJP":"【サブ関数】ページを移動する","functionNameEN":"_movePage","parametersName":["pageId","destParentPageId","destAfterPageId"],"parametersDataType":["number","number","number_nullable"],"returnValue":"void","functionId":"01HN1PYCDWPV5F707Z568TSH9Y","beforeCode":"\n\n\n\n\n","innerCode":"\n  // ソート番号を何にするべきか決める\n  const sortNumber = await _generatePageSortNumber_core( destParentPageId, destAfterPageId );\n  await runSqlWriteOnly(\n    `UPDATE pages\n        SET static_parent_id = :parentId,\n          sort_number = :sortNumber\n        WHERE page_id = :pageId;`,\n    {\n        \":pageId\": pageId,\n        \":sortNumber\": sortNumber,\n        \":parentId\": destParentPageId,\n    },\n  );\n","afterCode":""},{"functionNameJP":"【サブ関数】ソート番号を発行する","functionNameEN":"_generatePageSortNumber","parametersName":["destParentPageId","destAfterPageId"],"parametersDataType":["number","number_nullable"],"returnValue":"number","functionId":"01HN1X394HJG5NPQJP4P6HP54S","beforeCode":"\n\n\n\n","innerCode":"\n  if( destAfterPageId ){\n    // 特定のページの直前に挿入する場合\n    const pages = await runSqlReadOnly(\n      `SELECT sort_number AS sortNumber\n        FROM pages\n        WHERE static_parent_id = :parentId\n          AND sort_number <= ( SELECT sort_number FROM pages WHERE page_id = :afterId )\n        ORDER BY sort_number DESC\n        LIMIT 2;`,\n      {\n        \":afterId\" : destAfterPageId,\n        \":parentId\": destParentPageId,\n      },\n    );\n    if( pages.length===2 ){\n      // 移動先の、直前と直後のページが両方取得できた場合\n      const sortNumberBefore = pages[1][\"sortNumber\"];\n      const sortNumberAfter = pages[0][\"sortNumber\"];\n      if( sortNumberBefore > sortNumberAfter ){\n        throw `ソート番号の大小関係が想定外です。`;\n      }\n      return sortNumberBefore + ((sortNumberAfter-sortNumberBefore)/2);\n    }\n    else if( pages.length===1 ){\n      // 移動先の直後のページしか取得できなかった場合\n      // （先頭に挿入する場合）\n      const sortNumberAfter = pages[0][\"sortNumber\"];\n      if( sortNumberAfter < 0 ){\n        throw `ソート番号が負の数です。`;\n      }\n      return sortNumberAfter / 2;\n    }\n    else{\n      throw `ページを移動しようとしましたが、移動先の「直後のページ」が取得できませんでした`;\n    }\n  }\n  else{\n    // 末尾に追加する場合\n    const pages = await runSqlReadOnly(\n      `SELECT sort_number AS sortNumber\n        FROM pages\n        WHERE static_parent_id = :parentId\n        ORDER BY sort_number DESC\n        LIMIT 1;`,\n      {\n        \":parentId\": destParentPageId,\n      },\n    );\n    if( pages.length===0 ){\n      // 兄弟が存在しない場合\n      // （空のページに挿入する場合）\n      return 64;\n    }\n    else{\n      // 既に兄弟が存在する場合\n      const sortNumberBefore = pages[0][\"sortNumber\"];\n      return sortNumberBefore + 8;\n    }\n  }\n","afterCode":""},{"functionNameJP":"【サブ関数】ページをコピーする","functionNameEN":"_copyPage","parametersName":["pageId","destParentPageId","destAfterPageId"],"parametersDataType":["number","number","number_nullable"],"returnValue":"void","functionId":"01HN29GKA4W9502N0KH8SJB8VM","beforeCode":"\n\n\n","innerCode":"\n  // ソート番号を何にするべきか決める\n  const sortNumber = await _generatePageSortNumber_core( destParentPageId, destAfterPageId );\n  throw \"この関数は未実装です。\";\n","afterCode":"\n"}]