[{"functionNameJP":"joinIdを決定","functionNameEN":"getJoinIdMap","parametersName":["displayColumns"],"parametersDataType":[[{"displayColumnId":"string","type":"string","path":"string","as":"string"}]],"returnValue":"void","functionId":"01HME31RWYS5W1MY1TCQQJYFVZ","beforeCode":"\n\n","innerCode":"\n  // 【変換前】\n  // main.c12\n  // main.c45 > c88 > c66\n  // main.c2 > c53 > c1\n  // main.c2 > c53 > c67\n  // c89 > main\n  //\n  const foreignKeys = new Set();\n  for( const { displayColumnId, type, path, as } of displayColumns ){\n    const pathLength = await getPathLength( path );\n    if( type===\"RAW\" ){\n      if(pathLength>=2){\n        for( let i = 1; i < pathLength; i++ ){\n          const path2 = await slicePath( path, i );\n          foreignKeys.add(path2);\n        }\n      }\n    }\n    else{\n      for( let i = 2; i < pathLength; i++ ){\n        const path2 = await slicePath( path, i );\n        foreignKeys.add(path2);\n      }\n    }\n  }\n  const array = Array.from(foreignKeys);\n  // 例\n  // array = [\n  //   \"main.c45\",\n  //   \"main.c45 > c88\",\n  //   \"main.c2\",\n  //   \"main.c2 > c53\",\n  //   \"c89 > main\",\n  // ];\n  const joinMap = {};\n  for( let i=0; i<array.length; i++ ){\n    joinMap[array[i]] =  \"j\" + i;\n  }\n  // 例\n  // joinMap = {\n  //   \"main.c45\" : \"j0\",\n  //   \"main.c45 > c88\" : \"j1\",\n  //   \"main.c2\" : \"j2\",\n  //   \"main.c2 > c53\" : \"j3\",\n  //   \"c89 > main\" : \"j4\",\n  // };\n  return joinMap;\n","afterCode":""},{"functionNameJP":"テーブルの重複を確認","functionNameEN":"checkTableDuplication","parametersName":["tableId","joinIdMap"],"parametersDataType":["string",{"string":"string"}],"returnValue":"boolean","functionId":"01HME348GV2DY1ZC1XYWVN1C4N","beforeCode":"\n\n\n\n","innerCode":"\n  const tables = new Set();\n  tables.add(tableId);\n  for( const path in joinIdMap ){\n    const columnId = await pathToColumnId( path );\n    const parentTableId = await getParentTableId( columnId );\n    if( !parentTableId ){\n      // 通常のカラムの場合\n      continue;\n    }\n    // 外部キーの場合\n    if( tables.has(parentTableId) ){\n      // 重複あり\n      return true;\n    }\n    tables.add(parentTableId);\n  }\n  // 重複無し\n  return false;\n","afterCode":""},{"functionNameJP":"SELECT句のデータ構築","functionNameEN":"getSelectData","parametersName":["displayColumns","joinIdMap"],"parametersDataType":[[{"displayColumnId":"string","type":"string","path":"string","as":"string"}],{"string":"string"}],"returnValue":[{"type":"string","joinId":"string","columnName":"string","as":"string"}],"functionId":"01HMDZTDCPF3509HB8X1V7H2VX","beforeCode":"\n\n\n\n\n","innerCode":"\n  const selectData = [];\n  for( const { type, path, as } of displayColumns ){\n    const pathLength = await getPathLength( path );\n    let joinId;\n    if( pathLength >= 2 ){\n      const path2 = await slicePath( path, pathLength-1 );\n      joinId = joinIdMap[path2];\n      if(!joinId) throw \"表別名(joinId)が未定義です\";\n    }\n    else{\n      joinId = \"main\";\n    }\n    const columnId = await pathToColumnId( path );\n    selectData.push({\n      type: type,\n      joinId: joinId,\n      columnName: await getColumnName( columnId ),\n      as: as\n    });\n  }\n  return selectData;\n  // 戻り値の例\n  //  [\n  //    {\n  //      type: \"COUNT\",    // RAW, SUM、MAX、MIN、AVG、COUNT のいずれか\n  //      joinId: \"j2\",\n  //      columnName: \"実際の列の名前\",\n  //      as: \"表示する際の列の名前\"\n  //    },\n  //  ]\n","afterCode":""},{"functionNameJP":"JOIN句のデータ構築","functionNameEN":"getJoinData","parametersName":["joinIdMap"],"parametersDataType":[{"string":"string"}],"returnValue":[{"fromJoinId":"string","fromColumnName":"string","toJoinId":"string","toTableName":"string","toColumnName":"string"}],"functionId":"01HME01WG4S7XKM2RXSGF091TY","beforeCode":"\n\n\n\n","innerCode":"\n  const joinData = [];\n  for( const path in joinIdMap ){\n    const pathLength = await getPathLength( path );\n    let fromJoinId;\n    if( pathLength >= 2 ){\n      const path2 = await slicePath( path, pathLength-1 );\n      fromJoinId = joinIdMap[path2];\n      if(!fromJoinId) throw \"表別名(fromJoinId)が未定義です\";\n    }\n    else{\n      fromJoinId = \"main\";\n    }\n    const toJoinId = joinIdMap[path];\n    if(!toJoinId) throw \"表別名(toJoinId)が未定義です\";\n    const fromColumnId = await pathToColumnId( path );\n    const toTableId = await getParentTableId(fromColumnId);\n    const toColumnId = await getPrimaryKey( toTableId );\n    joinData.push({\n      fromJoinId: fromJoinId,\n      fromColumnName: await getColumnName(fromColumnId),\n      toJoinId: toJoinId,\n      toTableName: await getTableName( toTableId ),\n      toColumnName:  await getColumnName(toColumnId),\n    });\n  }\n  return joinData;\n  // 戻り値の例\n  //  [\n  //    {\n  //      fromJoinId: \"j1\",\n  //      fromColumnName: \"参照元のカラム名（外部キー）\",\n  //      toJoinId: \"j2\",\n  //      toTableName: \"参照先のテーブル名（マスターテーブル）\",\n  //      toColumnName: \"参照先のカラム名（プライマリキー）\",\n  //    }\n  //  ]\n","afterCode":""},{"functionNameJP":"WHERE句のデータ構築","functionNameEN":"getWhereData","parametersName":["displayColumns","conditions","joinIdMap"],"parametersDataType":[[{"displayColumnId":"string","type":"string","path":"string","as":"string"}],[{"displayColumnId":"string","type":"string","value":"number"}],{"string":"string"}],"returnValue":[{"displayColumnId":"string","type":"string","joinId":"string","columnName":"string","as":"string"}],"functionId":"01HME0X41M2ZNESRC27SN4W9Y5","beforeCode":"\n\n\n\n\n\n","innerCode":"\n  const pathMap = {\n    // 代入例\n    //  \"d34\": \"c45 > c56 > main\",\n    //  \"d99\": \"c45 > c56 > main\",\n  };\n  for( const { displayColumnId, type, path, as } of displayColumns ){\n    pathMap[displayColumnId] = path;\n  }\n  //-------------------------------------------------------\n  const whereData = [];\n  for( const { displayColumnId, type, value } of conditions ){\n    const path = pathMap[displayColumnId];\n    const pathLength = await getPathLength( path );\n    let joinId;\n    if( pathLength >= 2 ){\n      const path2 = await slicePath( path, pathLength-1 );\n      joinId = joinIdMap[path2];\n      if(!joinId) throw \"表別名(joinId)が未定義です\";\n    }\n    else{\n      joinId = \"main\";\n    }\n    whereData.push({\n      displayColumnId: displayColumnId,\n      joinId: joinId,\n      columnName: await pathToColumnId( path ),\n      type: type,\n      value: value,\n    });\n  }\n  return whereData;\n  // 戻り値の例\n  //  [\n  //    {\n  //      displayColumnId: \"d3\",\n  //      joinId: \"j2\",\n  //      columnName: \"カラム名\",\n  //      type: \"=\",\n  //      value: 32,\n  //    }\n  //  ]\n","afterCode":""},{"functionNameJP":"ORDER句のデータ構築","functionNameEN":"getOrderData","parametersName":["displayColumns","sortOrder","joinIdMap"],"parametersDataType":[[{"displayColumnId":"string","type":"string","path":"string","as":"string"}],[{"displayColumnId":"string","isAscending":"boolean"}],{"string":"string"}],"returnValue":[{"type":"string","joinId":"string","columnName":"string","as":"string"}],"functionId":"01HME0X5FM590D21F9XTZHT94G","beforeCode":"\n\n\n\n\n","innerCode":"\n  const pathMap = {\n    // 代入例\n    //  \"d34\": \"c45 > c56 > main\",\n    //  \"d99\": \"c45 > c56 > main\",\n  };\n  for( const { displayColumnId, type, path, as } of displayColumns ){\n    pathMap[displayColumnId] = path;\n  }\n  //-------------------------------------------------------\n  const orderData = [];\n  for( const { displayColumnId, isAscending } of sortOrder ){\n    const path = pathMap[displayColumnId];\n    const pathLength = await getPathLength( path );\n    let joinId;\n    if( pathLength >= 2 ){\n      const path2 = await slicePath( path, pathLength-1 );\n      joinId = joinIdMap[path2];\n      if(!joinId) throw \"表別名(joinId)が未定義です\";\n    }\n    else{\n      joinId = \"main\";\n    }\n    orderData.push({\n      joinId: joinId,\n      columnName: await pathToColumnId( path ),\n      isAscending: isAscending,\n    });\n  }\n  return orderData;\n  // 戻り値の例\n  //  [\n  //    {\n  //      joinId: \"j2\",\n  //      columnName: \"カラム名\",\n  //      isAscending: true,\n  //    }\n  //  ]\n","afterCode":"\n"}]