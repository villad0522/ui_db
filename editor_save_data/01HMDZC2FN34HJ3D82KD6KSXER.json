[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"joinIdを決定","functionNameEN":"getJoinIdMap","parametersName":["viewColumns"],"parametersDataType":[[{"viewColumnId":"string","viewColumnType":"string","columnPath":"string","viewColumnName":"string"}]],"returnValue":"void","functionId":"01HME31RWYS5W1MY1TCQQJYFVZ","beforeCode":"\n\n\n","innerCode":"\n  // 【変換前】\n  // main.c12\n  // main.c45 > c88 > c66\n  // main.c2 > c53 > c1\n  // main.c2 > c53 > c67\n  // c89 > main\n  //\n  const foreignKeys = new Set();\n  for( const { viewColumnId, viewColumnType, columnPath, viewColumnName } of viewColumns ){\n    const pathLength = await getPathLength( columnPath );\n    if( viewColumnType===\"RAW\" ){\n      if(pathLength>=2){\n        for( let i = 1; i < pathLength; i++ ){\n          const path2 = await slicePath( columnPath, i );\n          foreignKeys.add(path2);\n        }\n      }\n    }\n    else if(\n      viewColumnType===\"SUM\"\n      || viewColumnType===\"MAX\"\n      || viewColumnType===\"MIN\"\n      || viewColumnType===\"AVG\"\n      || viewColumnType===\"COUNT\"\n    ){\n      for( let i = 2; i <= pathLength; i++ ){\n        const path2 = await slicePath( columnPath, i );\n        foreignKeys.add(path2);\n      }\n    }\n    else{\n      throw `サポートされていない集合関数です。\\nviewColumnType = ${viewColumnType}`;\n    }\n  }\n  const array = Array.from(foreignKeys);\n  // 例\n  // array = [\n  //   \"main.c45\",\n  //   \"main.c45 > c88\",\n  //   \"main.c2\",\n  //   \"main.c2 > c53\",\n  //   \"c89 > main\",\n  // ];\n  const joinMap = {};\n  for( let i=0; i<array.length; i++ ){\n    joinMap[array[i]] =  \"j\" + i;\n  }\n  // 例\n  // joinMap = {\n  //   \"main.c45\" : \"j0\",\n  //   \"main.c45 > c88\" : \"j1\",\n  //   \"main.c2\" : \"j2\",\n  //   \"main.c2 > c53\" : \"j3\",\n  //   \"c89 > main\" : \"j4\",\n  // };\n  return joinMap;\n","afterCode":""},{"functionNameJP":"テーブルの重複を確認","functionNameEN":"checkTableDuplication","parametersName":["tableId","joinIdMap"],"parametersDataType":["string",{"string":"string"}],"returnValue":"boolean","functionId":"01HME348GV2DY1ZC1XYWVN1C4N","beforeCode":"\n\n\n\n","innerCode":"\n  const tables = new Set();\n  tables.add(tableId);\n  for( const columnPath in joinIdMap ){\n    const columnId = await pathToColumnId( columnPath );\n    const parentTableId = await getParentTableId( columnId );\n    if( !parentTableId ){\n      // 通常のカラムの場合\n      continue;\n    }\n    // 外部キーの場合\n    if( tables.has(parentTableId) ){\n      // 重複あり\n      return true;\n    }\n    tables.add(parentTableId);\n  }\n  // 重複無し\n  return false;\n","afterCode":""},{"functionNameJP":"SELECT句のデータ構築","functionNameEN":"getSelectData","parametersName":["viewColumns","joinIdMap"],"parametersDataType":[[{"viewColumnId":"string","viewColumnType":"string","columnPath":"string","viewColumnName":"string"}],{"string":"string"}],"returnValue":[{"viewColumnId":"string","viewColumnType":"string","joinId":"string","columnName":"string","viewColumnName":"string"}],"functionId":"01HMDZTDCPF3509HB8X1V7H2VX","beforeCode":"\n\n\n\n\n","innerCode":"\n  const selectData = [];\n  for( const { viewColumnId, viewColumnType, columnPath, viewColumnName } of viewColumns ){\n    const pathLength = await getPathLength( columnPath );\n    let joinId;\n    if( viewColumnType===\"RAW\" ){\n      if( pathLength >= 2 ){\n        const path2 = await slicePath( columnPath, pathLength-1 );\n        joinId = joinIdMap[path2];\n        if(!joinId) throw `表別名(joinId)が未定義です。\\npath2 = ${path2}\\njoinIdMap = ${JSON.stringify(joinIdMap,null,2)}`;\n      }\n      else{\n        joinId = \"main\";\n      }\n    }\n    else if(\n      viewColumnType===\"SUM\"\n      || viewColumnType===\"MAX\"\n      || viewColumnType===\"MIN\"\n      || viewColumnType===\"AVG\"\n      || viewColumnType===\"COUNT\"\n    ){\n      const path2 = await slicePath( columnPath, pathLength );\n      joinId = joinIdMap[path2];\n      if(!joinId) throw `表別名(joinId)が未定義です。\\npath2 = ${path2}\\njoinIdMap = ${JSON.stringify(joinIdMap,null,2)}`;\n    }\n    else{\n      throw `サポートされていない集合関数です。\\nviewColumnType = ${viewColumnType}`;\n    }\n    const columnId = await pathToColumnId( columnPath );\n    selectData.push({\n      viewColumnId: viewColumnId,\n      viewColumnType: viewColumnType,\n      joinId: joinId,\n      columnName: await getColumnName( columnId ),\n      viewColumnName: viewColumnName\n    });\n  }\n  return selectData;\n  // 戻り値の例\n  //  [\n  //    {\n  //      viewColumnType: \"COUNT\",    // RAW, SUM、MAX、MIN、AVG、COUNT のいずれか\n  //      joinId: \"j2\",\n  //      columnName: \"実際の列の名前\",\n  //      viewColumnName: \"表示する際の列の名前\"\n  //    },\n  //  ]\n","afterCode":""},{"functionNameJP":"JOIN句のデータ構築","functionNameEN":"getJoinData","parametersName":["joinIdMap"],"parametersDataType":[{"string":"string"}],"returnValue":[{"fromJoinId":"string","fromColumnName":"string","toJoinId":"string","toTableName":"string","toColumnName":"string"}],"functionId":"01HME01WG4S7XKM2RXSGF091TY","beforeCode":"\n\n\n\n","innerCode":"\n  const joinData = [];\n  for( const columnPath in joinIdMap ){\n    const pathLength = await getPathLength( columnPath );\n    let fromJoinId;\n    if( columnPath.startsWith(\"main\") ){\n      if( pathLength >= 2 ){\n        const path2 = await slicePath( columnPath, pathLength-1 );\n        fromJoinId = joinIdMap[path2];\n        if(!fromJoinId) throw `表別名(fromJoinId)が未定義です。path2 = ${path2}`;\n      }\n      else{\n        fromJoinId = \"main\";\n      }\n    }\n    else{\n      if( pathLength >= 3 ){\n        const path2 = await slicePath( columnPath, pathLength-1 );\n        fromJoinId = joinIdMap[path2];\n        if(!fromJoinId) throw `表別名(fromJoinId)が未定義です。path2 = ${path2}`;\n      }\n      else{\n        fromJoinId = \"main\";\n      }\n    }\n    const toJoinId = joinIdMap[columnPath];\n    if(!toJoinId) throw `表別名(toJoinId)が未定義です。columnPath = ${columnPath}`;\n    let fromColumnName;\n    let toTableId;\n    let toColumnName;\n    if( columnPath.startsWith(\"main\") ){\n      const fromColumnId = await pathToColumnId( columnPath );\n      fromColumnName = await getColumnName(fromColumnId);\n      toTableId = await getParentTableId(fromColumnId);\n      toColumnName = await getPrimaryKey( toTableId );\n    }\n    else{\n      const toColumnId = await pathToColumnId( columnPath );\n      const fromTableId = await getParentTableId(toColumnId);\n      fromColumnName = await getPrimaryKey( fromTableId );\n      toTableId = await getTableId(toColumnId);\n      toColumnName = await getColumnName(toColumnId);\n    }\n    joinData.push({\n      fromJoinId: fromJoinId,\n      fromColumnName: fromColumnName,\n      toJoinId: toJoinId,\n      toTableName: await getTableName( toTableId ),\n      toColumnName: toColumnName,\n    });\n  }\n  return joinData;\n  // 戻り値の例\n  //  [\n  //    {\n  //      fromJoinId: \"j1\",\n  //      fromColumnName: \"参照元のカラム名（外部キー）\",\n  //      toJoinId: \"j2\",\n  //      toTableName: \"参照先のテーブル名（マスターテーブル）\",\n  //      toColumnId: \"参照先のカラム名（プライマリキー）\",\n  //    }\n  //  ]\n","afterCode":""},{"functionNameJP":"WHERE句のデータ構築","functionNameEN":"getWhereData","parametersName":["viewColumns","conditionInfoList","joinIdMap"],"parametersDataType":[[{"viewColumnId":"string","viewColumnType":"string","columnPath":"string","viewColumnName":"string"}],[{"viewColumnId":"string","conditionId":"string","conditionalExpression":"string"}],{"string":"string"}],"returnValue":[{"conditionId":"string","viewColumnId":"string","conditionalExpression":"string","joinId":"string","columnName":"string"}],"functionId":"01HME0X41M2ZNESRC27SN4W9Y5","beforeCode":"\n\n\n\n\n\n","innerCode":"\n  const pathMap = {\n    // 代入例\n    //  \"d34\": \"c45 > c56 > main\",\n    //  \"d99\": \"c45 > c56 > main\",\n  };\n  for( const { viewColumnId, viewColumnType, columnPath, viewColumnName } of viewColumns ){\n    pathMap[viewColumnId] = columnPath;\n  }\n  //-------------------------------------------------------\n  const whereData = [];\n  for( const { conditionId, viewColumnId, conditionalExpression } of conditionInfoList ){\n    const columnPath = pathMap[viewColumnId];\n    const pathLength = await getPathLength( columnPath );\n    let joinId;\n    if( pathLength >= 2 ){\n      const path2 = await slicePath( columnPath, pathLength-1 );\n      joinId = joinIdMap[path2];\n      if(!joinId) throw \"表別名(joinId)が未定義です\";\n    }\n    else{\n      joinId = \"main\";\n    }\n    whereData.push({\n      conditionId: conditionId,\n      viewColumnId: viewColumnId,\n      joinId: joinId,\n      columnName: await pathToColumnId( columnPath ),\n      conditionalExpression: conditionalExpression,\n    });\n  }\n  return whereData;\n  // 戻り値の例\n  //  [\n  //    {\n  //      viewColumnId: \"d3\",\n  //      joinId: \"j2\",\n  //      columnName: \"カラム名\",\n  //      conditionalExpression: \"=\",\n  //    }\n  //  ]\n","afterCode":""},{"functionNameJP":"ORDER句のデータ構築","functionNameEN":"getOrderData","parametersName":["viewColumns","sortOrder","joinIdMap"],"parametersDataType":[[{"viewColumnId":"string","viewColumnType":"string","columnPath":"string","viewColumnName":"string"}],[{"viewColumnId":"string","isAscending":"boolean"}],{"string":"string"}],"returnValue":[{"joinId":"string","columnName":"string","isAscending":"boolean"}],"functionId":"01HME0X5FM590D21F9XTZHT94G","beforeCode":"\n\n\n\n\n","innerCode":"\n  const pathMap = {\n    // 代入例\n    //  \"d34\": \"c45 > c56 > main\",\n    //  \"d99\": \"c45 > c56 > main\",\n  };\n  for( const { viewColumnId, viewColumnType, columnPath, viewColumnName } of viewColumns ){\n    pathMap[viewColumnId] = columnPath;\n  }\n  //-------------------------------------------------------\n  const orderData = [];\n  for( const { viewColumnId, isAscending } of sortOrder ){\n    const columnPath = pathMap[viewColumnId];\n    const pathLength = await getPathLength( columnPath );\n    let joinId;\n    if( pathLength >= 2 ){\n      const path2 = await slicePath( columnPath, pathLength-1 );\n      joinId = joinIdMap[path2];\n      if(!joinId) throw \"表別名(joinId)が未定義です\";\n    }\n    else{\n      joinId = \"main\";\n    }\n    orderData.push({\n      joinId: joinId,\n      columnName: await pathToColumnId( columnPath ),\n      isAscending: isAscending,\n    });\n  }\n  return orderData;\n  // 戻り値の例\n  //  [\n  //    {\n  //      joinId: \"j2\",\n  //      columnName: \"カラム名\",\n  //      isAscending: true,\n  //    }\n  //  ]\n","afterCode":"\n"}]