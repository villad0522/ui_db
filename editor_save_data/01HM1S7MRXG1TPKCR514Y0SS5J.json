[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n  await startUp(\"http://localhost:3000/\", true);\n  const { tableId: tableId } = await createTable(\"名簿\");\n  const { columnId: columnId } = await createColumn( tableId, \"氏名\", \"TEXT\", null );\n  await createRecord( tableId, {\n    [columnId]: \"データベースの最大サイズの項目によれば、データベースは最大281TBまでとなっています。\",\n  });\n  //\n  await close();\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"プログラム起動","functionNameEN":"startUp","parametersName":["localUrl","isDebug"],"parametersDataType":["string_nullable","boolean"],"returnValue":"void","functionId":"01HM3CXQAQB0T6ZWRPVGKY5S1J","beforeCode":"\n\n\nimport Kuroshiro from \"kuroshiro\";\n// 形態素解析器\nimport KuromojiAnalyzer from \"kuroshiro-analyzer-kuromoji\";\n\nconst kuroshiro = new Kuroshiro();\n\n\n","innerCode":"\n  await startUp( localUrl, isDebug );   // 下層の関数を呼び出す\n  try {\n    // テーブルを作成する（検索のため）\n    await reserveWord(\"search_text\"); // 予約語に登録\n    await runSqlWriteOnly(\n      `CREATE TABLE IF NOT EXISTS search_text (\n        table_id TEXT NOT NULL,\n        column_id TEXT NOT NULL,\n        record_id TEXT NOT NULL,\n        original_text TEXT NOT NULL,\n        roman_alphabet TEXT NOT NULL\n      );`,\n      {},\n    );\n  }\n  catch (err) {\n    throw `システム管理用テーブルの作成に失敗しました。\\n${String(err)}`;\n  }\n  await kuroshiro.init(new KuromojiAnalyzer());\n","afterCode":""},{"functionNameJP":"レコードを作成","functionNameEN":"createRecord","parametersName":["tableId","recordData"],"parametersDataType":["string",{"string":"any"}],"returnValue":{"recordId":"number","message":"string"},"functionId":"01HM3CVF88PG607YS6EBN57FD8","beforeCode":"\n\n\n// 検索ワードを登録する関数\nasync function _saveKeyword({ tableId, recordId, recordData }){\n  // 過去に登録したデータを削除する\n  await runSqlWriteOnly(\n    `DELETE FROM search_text\n    WHERE table_id = :tableId\n      AND record_id = :recordId;`,\n    {\n      \":tableId\": tableId,\n      \":recordId\": recordId,\n    },\n  );\n  //\n  const columns = await listColumnsAll( tableId );\n  //\n  // カラムごとに繰り返す\n  for( const columnData of columns ){\n    switch(columnData.dataType){\n      case \"INTEGER\":\n        break;    // 文字列検索に登録する（処理を続行する）\n      case \"REAL\":\n        break;    // 文字列検索に登録する（処理を続行する）\n      case \"TEXT\":\n        break;    // 文字列検索に登録する（処理を続行する）\n      case \"BOOL\":\n        continue; // 文字列検索に登録しない\n      case \"FILE\":\n        continue; // 文字列検索に登録しない\n      default:\n        throw `データ型「${columnData.dataType}」はサポートされていません。`;\n    }\n    const value = recordData[columnData.id];\n    if (!value && value !== 0) {\n      continue;\n    }\n    const originalText = String(value);\n    //\n    // 文字列をローマ字に変換する\n    const romanAlphabet = await kuroshiro.convert(\n      originalText,\n      {\n        to: \"hiragana\",\n        mode: \"spaced\",\n      }\n    );\n    const words = romanAlphabet.split(\" \");\n    console.log(words);\n    //\n    // 検索ワードを登録する\n    await runSqlWriteOnly(\n      `INSERT INTO search_text (\n        table_id,\n        column_id,\n        record_id,\n        original_text,\n        roman_alphabet\n      ) VALUES (\n        :tableId,\n        :columnId,\n        :recordId,\n        :originalText,\n        :romanAlphabet\n      );`,\n      {\n        \":tableId\": tableId,\n        \":columnId\": columnData.id,\n        \":recordId\": recordId,\n        \":originalText\": originalText,\n        \":romanAlphabet\": romanAlphabet\n      },\n    );\n  }\n}\n\n\n","innerCode":"\n  const result = await createRecord( tableId, recordData ); // 下層の関数を呼び出す\n  // 検索キーワードを登録する\n  await _saveKeyword({\n    tableId: tableId,\n    recordId: result.recordId,\n    recordData: recordData,\n  });\n  return result;\n","afterCode":""},{"functionNameJP":"レコードを上書き","functionNameEN":"updateRecord","parametersName":["tableId","records"],"parametersDataType":["string",[{"string":"any"}]],"returnValue":"string","functionId":"01HM3CXA95HMH2Y1THNA5TQFJ2","beforeCode":"\n\n\n","innerCode":"\n  const result = await updateRecord( tableId, records );  // 下層の関数を呼び出す\n  const primaryKey = await getPrimaryKey( tableId );\n  //\n  // 上書きしたいレコードごとに繰り返す\n  for( const recordData of records ){\n    let recordId;\n    if( recordData[primaryKey] ){\n      recordId = recordData[primaryKey];\n    }\n    else if( recordData[\"recordId\"] ){\n      recordId = recordData[\"recordId\"];\n    }\n    else if( recordData[\"id\"] ){\n      recordId = recordData[\"id\"];\n    }\n    else{\n      throw \"削除対象のプライマリキーが指定されていません。\";\n    }\n    // 検索キーワードを登録する\n    await _saveKeyword({\n      tableId: tableId,\n      recordId: recordId,\n      recordData: recordData,\n    });\n  }\n  return result;\n","afterCode":""},{"functionNameJP":"不可逆的にテーブルを削除","functionNameEN":"delete_table","parametersName":["tableId"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HM3D4M3889YS41VCSWM9SQYQ","beforeCode":"\n\n\n\n","innerCode":"\n  await runSqlWriteOnly(\n    `DELETE FROM search_text\n      WHERE table_id = :tableId;`,\n    {\n      \":tableId\": tableId,\n    },\n  );\n  return await delete_table( tableId );  // 下層の関数を呼び出す\n","afterCode":""},{"functionNameJP":"レコードを削除","functionNameEN":"deleteRecord","parametersName":["tableId","records"],"parametersDataType":["string",[{"string":"any"}]],"returnValue":"string","functionId":"01HMJ8KFAR6DN56S64CARGQ82M","beforeCode":"\n\n\n\n","innerCode":"\n  const primaryKey = await getPrimaryKey( tableId );\n  for( const recordData of records ){\n    let recordId;\n    if( recordData[primaryKey] ){\n      recordId = recordData[primaryKey];\n    }\n    else if( recordData[\"recordId\"] ){\n      recordId = recordData[\"recordId\"];\n    }\n    else if( recordData[\"id\"] ){\n      recordId = recordData[\"id\"];\n    }\n    else{\n      throw \"削除対象のプライマリキーが指定されていません。\";\n    }\n    await runSqlWriteOnly(\n      `DELETE FROM search_text\n      WHERE table_id = :tableId\n        AND record_id = :recordId;`,\n      {\n        \":tableId\": tableId,\n        \":recordId\": recordId,\n      },\n    );\n  }\n  return await deleteRecord( tableId, records );  // 下層の関数を呼び出す\n","afterCode":""},{"functionNameJP":"テーブルを無効化","functionNameEN":"disableTable","parametersName":["tableId"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HMJKHY761W0WE0NAZJKPVYV9","beforeCode":"\n\n\n","innerCode":"\n  throw \"この関数は未実装です。\";\n","afterCode":""},{"functionNameJP":"テーブルを再度有効化","functionNameEN":"enableTable","parametersName":["tableId"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HMJKJJ3NJ47ASC3P2BRZR47E","beforeCode":"\n\n\n\n","innerCode":"\n  throw \"この関数は未実装です。\";\n","afterCode":""},{"functionNameJP":"カラムを無効化","functionNameEN":"disableColumn","parametersName":["columnId"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HMJKK08SX3CXXHGT3D2VHMFE","beforeCode":"\n\n\n\n","innerCode":"\n  throw \"この関数は未実装です。\";\n","afterCode":""},{"functionNameJP":"カラムを再度有効化","functionNameEN":"enableColumn","parametersName":["columnId"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HMJKKQ7QERZZAACTMZH601V1","beforeCode":"\n\n\n\n","innerCode":"\n  throw \"この関数は未実装です。\";\n","afterCode":"\n"}]