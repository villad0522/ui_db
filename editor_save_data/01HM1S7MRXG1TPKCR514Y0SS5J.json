[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n  await startUp(\"http://localhost:3000/\", true);\n  const { tableId: tableId } = await createTable(\"名簿\");\n  const { columnId: columnId1 } = await createColumn( tableId, \"学年\", \"INTEGER\", null );\n  const { columnId: columnId2 } = await createColumn( tableId, \"氏名\", \"TEXT\", null );\n  await createRecord( tableId, {\n    [columnId1]: 3,\n    [columnId2]: \"田中次郎\",\n  });\n  await createRecord( tableId, {\n    [columnId1]: 1,\n    [columnId2]: \"田中太郎\",\n  });\n  await createRecord( tableId, {\n    [columnId1]: 3,\n    [columnId2]: \"佐藤\",\n  });\n  const suggestions = await autoCorrect( \n    tableId, \n    columnId2, \n    \"た\",\n    {\n      [columnId1]: 3,\n    }\n  );\n  console.log(suggestions);\n  await close();\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"プログラム起動","functionNameEN":"startUp","parametersName":["localUrl","isDebug"],"parametersDataType":["string_nullable","boolean"],"returnValue":"void","functionId":"01HM3CXQAQB0T6ZWRPVGKY5S1J","beforeCode":"\n\nimport path from 'path';\n\n// カタカナ変換ライブラリ\nimport Kuroshiro from \"kuroshiro\";\nimport KuromojiAnalyzer from \"kuroshiro-analyzer-kuromoji\";\nconst kuroshiro = new Kuroshiro();\n\n// 形態素解析ライブラリ\nimport kuromoji from 'kuromoji';\nlet tokenizer;\n\n// 形態素解析器を初期化する関数\nasync function _buildTokenizer() {\n  const staticPath = await getPath( \"STATIC_DATA\" );\n  const dicPath = path.join( staticPath,'light/kuromoji_dict');\n  const defaultBuilder = kuromoji.builder({ dicPath: dicPath });\n  return await new Promise((resolve, reject) => {\n    defaultBuilder.build((err, tokenizer) => {\n      if (err) {\n        reject(err);\n      }\n      else{\n        resolve(tokenizer);\n      }\n    });\n  });\n}\n\n// 文字列から名刺を抽出して、カタカナに変換する関数\nasync function _convertKeywords( originalText ) {\n  if(!isNaN(originalText)){\n    // 数値に変換可能な場合\n    return [\n      String(Number(originalText)),\n    ];\n  }\n  if( originalText.length <= 5 ){\n    // ５文字以下の場合\n    return [\n      await kuroshiro.convert(originalText, { to: \"katakana\" }),\n    ];\n  }\n  const tokens = tokenizer.tokenize(originalText);\n  const keywords = new Set();\n  for( const token of tokens ){\n    if( token.pos !== \"名詞\" ) continue;\n    if( token.reading ){\n      keywords.add(token.reading);\n    }\n    else if( token.surface_form ){\n      keywords.add(token.surface_form);\n    }\n  }\n  return Array.from(keywords);\n}\n\n","innerCode":"\n  await startUp( localUrl, isDebug );   // 下層の関数を呼び出す\n  try {\n    // テーブルを作成する（検索のため）\n    await reserveWord(\"search_text\"); // 予約語に登録\n    await runSqlWriteOnly(\n      `CREATE TABLE IF NOT EXISTS search_text (\n        table_id TEXT NOT NULL,\n        column_id TEXT NOT NULL,\n        record_id INTEGER NOT NULL,\n        original_text TEXT NOT NULL,\n        keyword TEXT NOT NULL,\n        is_enable_column INTEGER NOT NULL DEFAULT 1,\n        is_enable_table INTEGER NOT NULL DEFAULT 1\n      );`,\n      {},\n    );\n  }\n  catch (err) {\n    throw `システム管理用テーブルの作成に失敗しました。\\n${String(err)}`;\n  }\n  tokenizer = await _buildTokenizer();\n  await kuroshiro.init(new KuromojiAnalyzer());\n","afterCode":""},{"functionNameJP":"レコードを作成","functionNameEN":"createRecord","parametersName":["tableId","recordData"],"parametersDataType":["string",{"string":"any"}],"returnValue":{"recordId":"number","message":"string"},"functionId":"01HM3CVF88PG607YS6EBN57FD8","beforeCode":"\n\n\n// 検索ワードを登録する関数\nasync function _saveKeyword({ tableId, recordId, recordData }){\n  // 過去に登録したデータを削除する\n  await runSqlWriteOnly(\n    `DELETE FROM search_text\n    WHERE table_id = :tableId\n      AND record_id = :recordId;`,\n    {\n      \":tableId\": tableId,\n      \":recordId\": recordId,\n    },\n  );\n  //\n  const columns = await listColumnsAll( tableId );\n  //\n  // カラムごとに繰り返す\n  for( const columnData of columns ){\n    const value = recordData[columnData.id];\n    if (!value && value !== 0) {\n      continue;\n    }\n    let originalText = String(value);\n    let keywords = [];\n    switch (columnData.dataType) {\n      case \"INTEGER\":\n        keywords = [String(value)];\n        break;    // 文字列検索に登録する（処理を続行する）\n      case \"REAL\":\n        keywords = [String(value)];\n        break;    // 文字列検索に登録する（処理を続行する）\n      case \"TEXT\":\n        // 形態素解析を行う\n        keywords = await _convertKeywords(originalText);\n        break;    // 文字列検索に登録する（処理を続行する）\n      case \"BOOL\":\n        continue; // 文字列検索に登録しない\n      case \"FILE\":\n        continue; // 文字列検索に登録しない\n      case \"POINTER\":\n        continue; // 文字列検索に登録しない\n      default:\n        throw `データ型「${columnData.dataType}」はサポートされていません。`;\n    }\n    for( const keyword of keywords ){\n      // 検索ワードを登録する\n      await runSqlWriteOnly(\n        `INSERT INTO search_text (\n          table_id,\n          column_id,\n          record_id,\n          original_text,\n          keyword\n        ) VALUES (\n          :tableId,\n          :columnId,\n          :recordId,\n          :originalText,\n          :keyword\n        );`,\n        {\n          \":tableId\": tableId,\n          \":columnId\": columnData.id,\n          \":recordId\": recordId,\n          \":originalText\": originalText,\n          \":keyword\": keyword\n        },\n      );\n    }\n    //\n  }\n}\n\n\n","innerCode":"\n  const result = await createRecord( tableId, recordData ); // 下層の関数を呼び出す\n  // 検索キーワードを登録する\n  await _saveKeyword({\n    tableId: tableId,\n    recordId: result.recordId,\n    recordData: recordData,\n  });\n  return result;\n","afterCode":""},{"functionNameJP":"レコードを上書き","functionNameEN":"updateRecord","parametersName":["tableId","records"],"parametersDataType":["string",[{"string":"any"}]],"returnValue":"string","functionId":"01HM3CXA95HMH2Y1THNA5TQFJ2","beforeCode":"\n\n\n","innerCode":"\n  const result = await updateRecord( tableId, records );  // 下層の関数を呼び出す\n  //\n  // 上書きしたいレコードごとに繰り返す\n  for( const recordData of records ){\n    let recordId;\n    if( recordData[\"id\"] ){\n      recordId = recordData[\"id\"];\n    }\n    else{\n      throw \"削除対象のプライマリキーが指定されていません。\";\n    }\n    // 検索キーワードを登録する\n    await _saveKeyword({\n      tableId: tableId,\n      recordId: recordId,\n      recordData: recordData,\n    });\n  }\n  return result;\n","afterCode":""},{"functionNameJP":"不可逆的にテーブルを削除","functionNameEN":"delete_table","parametersName":["tableId"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HM3D4M3889YS41VCSWM9SQYQ","beforeCode":"\n\n\n\n","innerCode":"\n  await runSqlWriteOnly(\n    `DELETE FROM search_text\n      WHERE table_id = :tableId;`,\n    {\n      \":tableId\": tableId,\n    },\n  );\n  return await delete_table( tableId );  // 下層の関数を呼び出す\n","afterCode":""},{"functionNameJP":"レコードを削除","functionNameEN":"deleteRecord","parametersName":["tableId","records"],"parametersDataType":["string",[{"string":"any"}]],"returnValue":"string","functionId":"01HMJ8KFAR6DN56S64CARGQ82M","beforeCode":"\n\n\n\n","innerCode":"\n  for( const recordData of records ){\n    let recordId;\n    if( recordData[\"id\"] ){\n      recordId = recordData[\"id\"];\n    }\n    else{\n      throw \"削除対象のプライマリキーが指定されていません。\";\n    }\n    await runSqlWriteOnly(\n      `DELETE FROM search_text\n      WHERE table_id = :tableId\n        AND record_id = :recordId;`,\n      {\n        \":tableId\": tableId,\n        \":recordId\": recordId,\n      },\n    );\n  }\n  return await deleteRecord( tableId, records );  // 下層の関数を呼び出す\n","afterCode":""},{"functionNameJP":"テーブルを無効化","functionNameEN":"disableTable","parametersName":["tableId"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HMJKHY761W0WE0NAZJKPVYV9","beforeCode":"\n\n\n","innerCode":"\n  await runSqlWriteOnly(\n    `UPDATE search_text\n      SET is_enable_table = 0\n      WHERE table_id = :tableId;`,\n    {\n      \":tableId\": tableId,\n    },\n  );\n  return await disableTable( tableId );  // 下層の関数を呼び出す\n","afterCode":""},{"functionNameJP":"テーブルを再度有効化","functionNameEN":"enableTable","parametersName":["tableId"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HMJKJJ3NJ47ASC3P2BRZR47E","beforeCode":"\n\n\n\n","innerCode":"\n  await runSqlWriteOnly(\n    `UPDATE search_text\n      SET is_enable_table = 1\n      WHERE table_id = :tableId;`,\n    {\n      \":tableId\": tableId,\n    },\n  );\n  return await enableTable( tableId );  // 下層の関数を呼び出す\n","afterCode":""},{"functionNameJP":"カラムを無効化","functionNameEN":"disableColumn","parametersName":["columnId"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HMJKK08SX3CXXHGT3D2VHMFE","beforeCode":"\n\n\n\n","innerCode":"\n  await runSqlWriteOnly(\n    `UPDATE search_text\n      SET is_enable_column = 0\n      WHERE column_id = :columnId;`,\n    {\n      \":columnId\": columnId,\n    },\n  );\n  return await disableColumn( columnId );  // 下層の関数を呼び出す\n","afterCode":""},{"functionNameJP":"カラムを再度有効化","functionNameEN":"enableColumn","parametersName":["columnId"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HMJKKQ7QERZZAACTMZH601V1","beforeCode":"\n\n\n\n","innerCode":"\n  await runSqlWriteOnly(\n    `UPDATE search_text\n      SET is_enable_column = 1\n      WHERE column_id = :columnId;`,\n    {\n      \":columnId\": columnId,\n    },\n  );\n  return await enableColumn( columnId );  // 下層の関数を呼び出す\n","afterCode":""},{"functionNameJP":"予測変換","functionNameEN":"autoCorrect","parametersName":["tableId","columnId","inputText","conditions"],"parametersDataType":["string","string","string",{"string":"any"}],"returnValue":["string"],"functionId":"01HMJQ2SRWQC8SD9G4K1DCDVNP","beforeCode":"\n\n\n\n","innerCode":"\n  const primaryKey = await getPrimaryKey( tableId );\n  //\n  // 文字列から名刺を抽出して、カタカナに変換する\n  const inputWords = await _convertKeywords( inputText );\n  console.log(inputWords.join(\", \"));\n  //\n  let sql = `\n    SELECT ${tableId}.${columnId} AS originalText\n      FROM ${tableId}\n      INNER JOIN search_text\n        ON ${tableId}.${primaryKey} = search_text.record_id\n        AND search_text.table_id = :tableId\n        AND search_text.column_id = :columnId\n      WHERE search_text.is_enable_table = 1\n        AND search_text.is_enable_column = 1`;\n  //\n  const statements = {};\n  const searchList = [];\n  for( let i=0; i<inputWords.length; i++ ){\n    searchList.push(`keyword LIKE :word${i}`);\n    searchList.push(`original_text LIKE :word${i}`);\n    statements[`:word${i}`] = \"%\" + inputWords[i] + \"%\";\n  }\n  if( searchList.length > 0 ){\n    sql += `\\n        AND (\n          ${searchList.join(`\\n          OR `)}\n        )`;\n  }\n  //\n  for( const columnId in conditions ){\n    sql += `\\n        AND ${columnId} = :${columnId}`;\n    statements[`:${columnId}`] = conditions[columnId];\n  }\n  sql += `\\n      GROUP BY original_text;`;\n  const matrix = await runSqlReadOnly( sql, {\n    ...statements,\n    \":tableId\": tableId,\n    \":columnId\": columnId,\n  });\n  const suggestions = new Set();\n  for( const { originalText } of matrix ){\n    suggestions.add(originalText);\n  }\n  return Array.from(suggestions);\n","afterCode":"\n"}]