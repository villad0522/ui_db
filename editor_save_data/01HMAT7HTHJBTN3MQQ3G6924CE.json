[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"レコードを切り取る","functionNameEN":"cutRecord","parametersName":["tableId","recordId"],"parametersDataType":["string","number"],"returnValue":"void","functionId":"01HP1H5SNCWEBDNTMY4104XTHZ","beforeCode":"\n\nconst copyingRecords = {};\nconst cuttingRecords = {};\n\n","innerCode":"\n  copyingRecords[tableId] = null;\n  cuttingRecords[tableId] = recordId;\n","afterCode":""},{"functionNameJP":"レコードをコピーする","functionNameEN":"copyRecord","parametersName":["tableId","recordId"],"parametersDataType":["string","number"],"returnValue":"void","functionId":"01HP1H6YP8XQKTV4CSTVXGNRNK","beforeCode":"\n\n","innerCode":"\n  copyingRecords[tableId] = recordId;\n  cuttingRecords[tableId] = null;\n","afterCode":""},{"functionNameJP":"レコードを貼り付ける","functionNameEN":"pasteRecord","parametersName":["tableId","beforeRecordId","afterRecordId"],"parametersDataType":["string","number_nullable","number_nullable"],"returnValue":"void","functionId":"01HP1H8CYSRXYRRREH9FEEFEJ2","beforeCode":"\n\n","innerCode":"\n  const copyingRecordId = copyingRecords[tableId];\n  const cuttingRecordId = cuttingRecords[tableId];\n  if( copyingRecordId ){\n    // レコードをコピーする場合\n    await _copyRecord_core( tableId, copyingRecordId, beforeRecordId, afterRecordId );\n    return;\n  }\n  else if( cuttingRecordId ){\n    // 事前に切り取ったレコードを貼り付ける場合\n    await _moveRecord_core( tableId, cuttingRecordId, beforeRecordId, afterRecordId );\n    return;\n  }\n  else{\n    throw new Error(`貼り付け操作を行う前に、切り取り または コピーを行ってください。`);\n  }\n","afterCode":""},{"functionNameJP":"切り取り中のレコードを取得する","functionNameEN":"getCuttingRecord","parametersName":["tableId"],"parametersDataType":["string"],"returnValue":"number_nullable","functionId":"01HP1HD9ZYWDN6P67M6NJZZQG5","beforeCode":"\n\n","innerCode":"\n  return cuttingRecords[tableId];\n","afterCode":""},{"functionNameJP":"コピー中のレコードを取得する","functionNameEN":"getCopyingRecord","parametersName":["tableId"],"parametersDataType":["string"],"returnValue":"number_nullable","functionId":"01HP1HEHSJ89XPZSZPDDR8H3KJ","beforeCode":"\n\n","innerCode":"\n  return copyingRecords[tableId];\n","afterCode":""},{"functionNameJP":"【サブ関数】レコードを移動する","functionNameEN":"_moveRecord","parametersName":["tableId","recordId","beforeRecordId","afterRecordId"],"parametersDataType":["string","number","number_nullable","number_nullable"],"returnValue":"void","functionId":"01HP1HFXMW6YFJ1RW7YBTDTXBD","beforeCode":"\n\n","innerCode":"\n  const primaryKey = await getPrimaryKey( tableId );\n  // ソート番号を何にするべきか決める\n  const sortNumber = await _generateRecordSortNumber_core( tableId, beforeRecordId, afterRecordId );\n  await runSqlWriteOnly(\n    `UPDATE ${tableId}\n        SET sort_number = :sortNumber\n        WHERE ${primaryKey} = :recordId;`,\n    {\n        \":recordId\": recordId,\n        \":sortNumber\": sortNumber,\n    },\n  );\n","afterCode":""},{"functionNameJP":"【サブ関数】レコードをコピーする","functionNameEN":"_copyRecord","parametersName":["tableId","recordId","beforeRecordId","afterRecordId"],"parametersDataType":["string","number","number_nullable","number_nullable"],"returnValue":"void","functionId":"01HP1HM2Q6K42BHNM2SAQVT9MN","beforeCode":"\n\n","innerCode":"\n  const primaryKey = await getPrimaryKey( tableId );\n  // ソート番号を何にするべきか決める\n  const sortNumber = await _generateRecordSortNumber_core( tableId, beforeRecordId, afterRecordId );\n  // コピー元のデータを取得する\n  const records = await runSqlReadOnly(\n    `SELECT *\n      FROM ${tableId}\n      WHERE ${primaryKey} = :recordId\n      LIMIT 1;`,\n    {\n      \":recordId\" : recordId,\n    },\n  );\n  if( records.length===0 ){\n    throw \"コピー元のデータが見つかりません\";\n  }\n  const recordData = records[0];\n  delete recordData[primaryKey];\n  recordData[\"sort_number\"] = sortNumber;\n  recordData[\"created_at\"] = new Date().getTime();\n  recordData[\"updated_at\"] = new Date().getTime();\n  const placeholders = {};\n  for( const columnId in recordData ){\n    placeholders[\":\"+columnId] = recordData[columnId];\n  }\n  const columnIds = Object.keys(recordData);\n  await runSqlWriteOnly(\n    `INSERT INTO ${tableId}\n      ( ${columnIds} )\n      VALUES ( ${columnIds.map(columnId=>(\":\"+columnId))} );`,\n    placeholders,\n  );\n","afterCode":""},{"functionNameJP":"【サブ関数】ソート番号を発行する","functionNameEN":"_generateRecordSortNumber","parametersName":["tableId","beforeRecordId","afterRecordId"],"parametersDataType":["string","number_nullable","number_nullable"],"returnValue":"void","functionId":"01HP1HNM847X8NJ17BSJ84TAZ5","beforeCode":"\n\n","innerCode":"\n  const primaryKey = await getPrimaryKey( tableId );\n  if( beforeRecordId ){\n    // 特定のレコードの直後に挿入する場合\n    const records = await runSqlReadOnly(\n      `SELECT sort_number AS sortNumber\n        FROM ${tableId}\n        WHERE sort_number <= ( SELECT sort_number FROM ${tableId} WHERE ${primaryKey} = :beforeId )\n        ORDER BY sort_number DESC\n        LIMIT 2;`,\n      {\n        \":beforeId\" : beforeRecordId,\n      },\n    );\n    if( records.length===2 ){\n      // 移動先の、直前と直後のレコードが両方取得できた場合\n      const sortNumberBefore = records[0][\"sortNumber\"];\n      const sortNumberAfter = records[1][\"sortNumber\"];\n      if( sortNumberBefore < sortNumberAfter ){\n        throw `ソート番号の大小関係が想定外です。`;\n      }\n      return sortNumberAfter + ((sortNumberBefore-sortNumberAfter)/2);\n    }\n    else if( records.length===1 ){\n      // 移動先の直前のレコードしか取得できなかった場合\n      // （末尾に挿入する場合）\n      const sortNumberBefore = records[0][\"sortNumber\"];\n      if( sortNumberBefore <= 0 ){\n        throw `ソート番号が負の数です。`;\n      }\n      return sortNumberBefore / 2;\n    }\n    else{\n      throw `レコードを移動しようとしましたが、移動先の「直前のレコード」が取得できませんでした`;\n    }\n  }\n  else if( afterRecordId ){\n    // 特定のレコードの直前に挿入する場合\n    const records = await runSqlReadOnly(\n      `SELECT sort_number AS sortNumber\n        FROM ${tableId}\n        WHERE sort_number >= ( SELECT sort_number FROM ${tableId} WHERE ${primaryKey} = :afterId )\n        ORDER BY sort_number ASC\n        LIMIT 2;`,\n      {\n        \":afterId\" : afterRecordId,\n      },\n    );\n    if( records.length===2 ){\n      // 移動先の、直前と直後のレコードが両方取得できた場合\n      const sortNumberBefore = records[1][\"sortNumber\"];\n      const sortNumberAfter = records[0][\"sortNumber\"];\n      if( sortNumberBefore < sortNumberAfter ){\n        throw `ソート番号の大小関係が想定外です。`;\n      }\n      return sortNumberAfter + ((sortNumberBefore-sortNumberAfter)/2);\n    }\n    else if( records.length===1 ){\n      // 移動先の直後のレコードしか取得できなかった場合\n      // （先頭に挿入する場合）\n      const sortNumberAfter = records[0][\"sortNumber\"];\n      return sortNumberAfter + 8;\n    }\n    else{\n      throw `レコードを移動しようとしましたが、移動先の「直後のレコード」が取得できませんでした`;\n    }\n  }\n  else{\n    throw `レコードを移動しようとしましたが、移動先が指定されていません`;\n  }\n","afterCode":"\n"}]