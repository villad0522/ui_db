[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"プログラム起動","functionNameEN":"startUp","parametersName":["localUrl","isDebug"],"parametersDataType":["string_nullable","boolean"],"returnValue":"void","functionId":"01HMAT9SHW4NHC2V2AJ8XEZHTQ","beforeCode":"\n\n\n","innerCode":"\n  await startUp( localUrl, isDebug );   // 下層の関数を呼び出す\n","afterCode":""},{"functionNameJP":"レコードを切り取る","functionNameEN":"cutRecord","parametersName":["tableId","recordId"],"parametersDataType":["string","number"],"returnValue":"void","functionId":"01HP1H5SNCWEBDNTMY4104XTHZ","beforeCode":"\n\n","innerCode":"\n  throw \"この関数は未実装です。\";\n","afterCode":""},{"functionNameJP":"レコードをコピーする","functionNameEN":"copyRecord","parametersName":["tableId","recordId"],"parametersDataType":["string","number"],"returnValue":"void","functionId":"01HP1H6YP8XQKTV4CSTVXGNRNK","beforeCode":"\n\n","innerCode":"\n  throw \"この関数は未実装です。\";\n","afterCode":""},{"functionNameJP":"レコードを貼り付ける","functionNameEN":"pasteRecord","parametersName":["tableId","beforeRecordId","afterRecordId"],"parametersDataType":["string","number_nullable","number_nullable"],"returnValue":"void","functionId":"01HP1H8CYSRXYRRREH9FEEFEJ2","beforeCode":"\n\n","innerCode":"\n  throw \"この関数は未実装です。\";\n","afterCode":""},{"functionNameJP":"切り取り中のレコードを取得する","functionNameEN":"getCuttingRecord","parametersName":["tableId"],"parametersDataType":["string"],"returnValue":"number_nullable","functionId":"01HP1HD9ZYWDN6P67M6NJZZQG5","beforeCode":"\n\n","innerCode":"\n  throw \"この関数は未実装です。\";\n","afterCode":""},{"functionNameJP":"コピー中のレコードを取得する","functionNameEN":"getCopyingRecord","parametersName":["tableId"],"parametersDataType":["string"],"returnValue":"number_nullable","functionId":"01HP1HEHSJ89XPZSZPDDR8H3KJ","beforeCode":"\n\n","innerCode":"\n  throw \"この関数は未実装です。\";\n","afterCode":""},{"functionNameJP":"【サブ関数】レコードを移動する","functionNameEN":"_moveRecord","parametersName":["tableId","recordId","beforeRecordId","afterRecordId"],"parametersDataType":["string","number","number_nullable","number_nullable"],"returnValue":"void","functionId":"01HP1HFXMW6YFJ1RW7YBTDTXBD","beforeCode":"\n\n","innerCode":"\n  throw \"この関数は未実装です。\";\n","afterCode":""},{"functionNameJP":"【サブ関数】レコードをコピーする","functionNameEN":"_copyRecord","parametersName":["tableId","recordId","beforeRecordId","afterRecordId"],"parametersDataType":["string","number","number_nullable","number_nullable"],"returnValue":"void","functionId":"01HP1HM2Q6K42BHNM2SAQVT9MN","beforeCode":"\n\n","innerCode":"\n  throw \"この関数は未実装です。\";\n","afterCode":""},{"functionNameJP":"【サブ関数】ソート番号を発行する","functionNameEN":"_generateRecordSortNumber","parametersName":["tableId","beforeRecordId","afterRecordId"],"parametersDataType":["string","number_nullable","number_nullable"],"returnValue":"void","functionId":"01HP1HNM847X8NJ17BSJ84TAZ5","beforeCode":"\n\n","innerCode":"\n  if( afterRecordId ){\n    // 特定のページの直前に挿入する場合\n    const pages = await runSqlReadOnly(\n      `SELECT sort_number AS sortNumber\n        FROM pages\n        WHERE static_parent_id = :parentId\n          AND sort_number <= ( SELECT sort_number FROM pages WHERE page_id = :afterId )\n        ORDER BY sort_number DESC\n        LIMIT 2;`,\n      {\n        \":afterId\" : afterRecordId,\n        \":tableId\": tableId,\n      },\n    );\n    if( pages.length===2 ){\n      // 移動先の、直前と直後のページが両方取得できた場合\n      const sortNumberBefore = pages[1][\"sortNumber\"];\n      const sortNumberAfter = pages[0][\"sortNumber\"];\n      if( sortNumberBefore > sortNumberAfter ){\n        throw `ソート番号の大小関係が想定外です。`;\n      }\n      return sortNumberBefore + ((sortNumberAfter-sortNumberBefore)/2);\n    }\n    else if( pages.length===1 ){\n      // 移動先の直後のページしか取得できなかった場合\n      // （先頭に挿入する場合）\n      const sortNumberAfter = pages[0][\"sortNumber\"];\n      if( sortNumberAfter < 0 ){\n        throw `ソート番号が負の数です。`;\n      }\n      return sortNumberAfter / 2;\n    }\n    else{\n      throw `ページを移動しようとしましたが、移動先の「直後のページ」が取得できませんでした`;\n    }\n  }\n  else{\n    // 末尾に追加する場合\n    const pages = await runSqlReadOnly(\n      `SELECT sort_number AS sortNumber\n        FROM pages\n        WHERE static_parent_id = :parentId\n        ORDER BY sort_number DESC\n        LIMIT 1;`,\n      {\n        \":tableId\": tableId,\n      },\n    );\n    if( pages.length===0 ){\n      // 兄弟が存在しない場合\n      // （空のページに挿入する場合）\n      return 64;\n    }\n    else{\n      // 既に兄弟が存在する場合\n      const sortNumberBefore = pages[0][\"sortNumber\"];\n      return sortNumberBefore + 8;\n    }\n  }\n","afterCode":"\n"}]