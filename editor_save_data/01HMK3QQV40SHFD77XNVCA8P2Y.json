[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n  await startUp(\"http://localhost:3000/\", true);\n  //\n  const { tableId: tableId1 } = await createTable(\"学年\");\n  const { columnId: columnId1 } = await createColumn( tableId1, \"学年\", \"INTEGER\", null );\n  await setTitleColumn( columnId1 );\n  await createRecord( tableId1, {\n    [columnId1]: 1,\n  });\n  await createRecord( tableId1, {\n    [columnId1]: 2,\n  });\n  await createRecord( tableId1, {\n    [columnId1]: 3,\n  });\n  //\n  const { tableId: tableId2 } = await createTable(\"名簿\");\n  const { columnId: columnId2  } = await createColumn( tableId2, \"学年\", \"POINTER\", tableId1 );\n  const { columnId: columnId3  } = await createColumn( tableId2, \"氏名\", \"TEXT\", null );\n  const { recordId: recordId } = await createRecord( tableId2, {\n    [columnId2+\"_text\"]: \"3\",\n    [columnId3]: \"田中太郎\",\n  });\n  //\n  const matrix = await runSqlReadOnly(`SELECT * FROM ${tableId2}`,{});\n  if( matrix.length !== 1 ){\n    throw \"テスト結果が想定とは異なります。\";\n  }\n  if( matrix[0][columnId2] !== 3 ){\n    throw \"テスト結果が想定とは異なります。\";\n  }\n  if( matrix[0][columnId3] !== \"田中太郎\" ){\n    throw \"テスト結果が想定とは異なります。\";\n  }\n  await updateRecord( tableId2, [\n    {\n      [tableId2+\"_id\"]: recordId,\n      [columnId2+\"_text\"]: \"2\",\n      [columnId3]: \"佐藤太郎\",\n    }\n  ]);\n  await close();\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"レコードを作成","functionNameEN":"createRecord","parametersName":["tableId","recordData"],"parametersDataType":["string",{"string":"any"}],"returnValue":{"recordId":"number","message":"string"},"functionId":"01HMK40WYDZHW5CNV7JESTGYTA","beforeCode":"\n\n\n","innerCode":"\n  const columns = await listColumnsAll( tableId );\n  const newRecordData = {};\n  for( const { id, name, dataType, parentTableId } of columns ){\n    if( dataType!==\"POINTER\" ){\n      newRecordData[id] = recordData[id];\n      continue;\n    }\n    if( !parentTableId ){\n      throw `親テーブルが不明です。\\nテーブルID=${tableId}\\nカラムID=${id}`;\n    }\n    const value = recordData[id];\n    const text = recordData[id+\"_text\"];\n    if( value && text ){\n      throw `レコードを追加しようとしましたが、リクエストが不正です。マスターデータのIDと文字列が両方指定されています。\\nテーブルID=${tableId}\\nカラムID=${id}`;\n    }\n    else if(value){\n      newRecordData[id] = recordData[id];\n      continue;\n    }\n    if(!text){\n      // 空欄の場合\n      continue;\n    }\n    // 文字列でマスターデータを指定された場合\n    if( typeof text !== \"string\" ){\n      throw `レコードを追加しようとしましたが、リクエストが不正です。「${id}_text」に文字列以外が指定されました。`;\n    }\n    const parentRecordId = await getRecordIdFromTitle( parentTableId, text );\n    if(!parentRecordId){\n      const parentTableName = await getTableName(parentTableId);\n      throw `「${text}」は「${parentTableName}」に登録されていません。`;\n    }\n    newRecordData[id] = parentRecordId;\n  }\n  return await createRecord( tableId, newRecordData );  // 下層の関数を呼び出す\n","afterCode":""},{"functionNameJP":"レコードを上書き","functionNameEN":"updateRecord","parametersName":["tableId","records"],"parametersDataType":["string",[{"string":"any"}]],"returnValue":"string","functionId":"01HMK43R2NJE49BF0QZE6GB15P","beforeCode":"\n\n\n","innerCode":"\n  const columns = await listColumnsAll( tableId );\n  const newRecords = [];\n  const primaryKey = await getPrimaryKey( tableId );\n  for( let i=0; i<records.length; i++ ){\n    newRecords[i] = {\n      [primaryKey]: records[i][primaryKey],\n    };\n    for( const { id: columnId, name, dataType, parentTableId } of columns ){\n      if( dataType!==\"POINTER\" ){\n        newRecords[i][columnId] = records[i][columnId];\n        continue;\n      }\n      if( !parentTableId ){\n        throw `親テーブルが不明です。\\nテーブルID=${tableId}\\nカラムID=${columnId}`;\n      }\n      const value = records[i][columnId];\n      const text = records[i][columnId+\"_text\"];\n      if( value && text ){\n        throw `レコードを上書きしようとしましたが、リクエストが不正です。マスターデータのIDと文字列が両方指定されています。\\nテーブルID=${tableId}\\nカラムID=${columnId}`;\n      }\n      else if(value){\n        newRecords[i][columnId] = records[i][columnId];\n        continue;\n      }\n      if(!text){\n        // 空欄の場合\n        continue;\n      }\n      // 文字列でマスターデータを指定された場合\n      if( typeof text !== \"string\" ){\n        throw `レコードを上書きしようとしましたが、リクエストが不正です。「${columnId}_text」に文字列以外が指定されました。`;\n      }\n      const parentRecordId = await getRecordIdFromTitle( parentTableId, text );\n      if(!parentRecordId){\n        const parentTableName = await getTableName(parentTableId);\n        throw `「${text}」は「${parentTableName}」に登録されていません。`;\n      }\n      newRecords[i][columnId] = parentRecordId;\n    }\n  }\n  return await updateRecord( tableId, newRecords );  // 下層の関数を呼び出す\n","afterCode":""},{"functionNameJP":"フィールドを検証","functionNameEN":"checkField","parametersName":["columnId","value"],"parametersDataType":["string","any"],"returnValue":{"isOK":"boolean","message":"string"},"functionId":"01HMK46XC4QDWFR77YPAF296V0","beforeCode":"\n\n","innerCode":"\n  throw \"この関数は未実装です。\";\n","afterCode":""},{"functionNameJP":"レコードを検証","functionNameEN":"checkRecord","parametersName":["tableId","recordData"],"parametersDataType":["string",{"string":"any"}],"returnValue":{"isOK":"boolean","message":"string"},"functionId":"01HMK49BAT63QX6CX7Q1NPZDEM","beforeCode":"\n\n","innerCode":"\n  throw \"この関数は未実装です。\";\n\n","afterCode":""}]