[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n    await startUp(\"http://localhost:3000/\", true);\n    await getDebugMode();\n    await close();\n    //\n    await startUp(\"http://localhost:3000/\", true);\n    //\n    // わざと再接続\n    await startUp(\"localhost:3000\", true);\n    //\n    await close();\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"プログラム起動","functionNameEN":"startUp","parametersName":["localUrl","isDebug"],"parametersDataType":["string_nullable","boolean"],"returnValue":"void","functionId":"01HM2TE8CJ7CMTPVVNCZV4H3F6","beforeCode":"\n\n\nimport path from 'path';\nimport sqlite3 from 'sqlite3'\nimport { Database } from 'sqlite'\nimport fs from 'fs';\n\n// 使用したnpmパッケージ「sqlite」\n//  https://github.com/kriasoft/node-sqlite#readme\n\n//【グローバル変数】データベースとの接続情報\nlet db = null;\n\n//【グローバル変数】接続中？\nlet isConnect = false;\n\n//【グローバル変数】デバッグモード\nlet isDebug = false;\n\n","innerCode":"\n  if (isConnect === true) {\n    await db.close();\n    isConnect = false;\n  }\n  //\n  await startUp( localUrl );   // 下層の関数を呼び出す\n  //\n  // フォルダのパス\n  const directoryPath = await getPath(\"SAVEDATA\");\n  //\n  // データベースファイルのパス\n  const mainFilePath = path.join(directoryPath, \"main.db\");\n  //\n  let filePath;\n  if (isDebug) {\n    // デバッグモードの場合\n    const practiceFilePath = path.join(directoryPath, \"practice.db\");\n    if (fs.existsSync(practiceFilePath)) {\n      await fs.promises.rm(practiceFilePath);\n    }\n    if (fs.existsSync(mainFilePath)) {\n      // メインデータを汚さないようにコピーする\n      //await fs.promises.copyFile(mainFilePath, practiceFilePath);\n    }\n    // コピーしたデータを使用する\n    filePath = practiceFilePath;\n  }\n  else {\n    // 通常動作の場合、メインデータを直接操作する\n    filePath = mainFilePath;\n  }\n  //\n  db = new Database({\n    filename: filePath,\n    driver: sqlite3.Database\n  });\n  await db.open();\n  isConnect = true;\n  db.configure('busyTimeout', 3000);  // 3 seconds\n  await db.exec(\"PRAGMA foreign_keys = 1;\"); // 外部キー制約を有効にする\n","afterCode":""},{"functionNameJP":"デバッグモード判定","functionNameEN":"getDebugMode","parametersName":[],"parametersDataType":[],"returnValue":"boolean","functionId":"01HM2TS4QQ71Q6ADAHK9QJBHRS","beforeCode":"\n\n\n\n","innerCode":"\n  return isDebug;\n","afterCode":""},{"functionNameJP":"SQLクエリ実行（読み取り専用）","functionNameEN":"runSqlReadOnly","parametersName":["sql","params"],"parametersDataType":["string",{"string":"any"}],"returnValue":[{"string":"any"}],"functionId":"01HM2V9F07NZY3B5YTVH71A381","beforeCode":"\n\n\n\n","innerCode":"\n  if(!db){\n    throw \"データベースオブジェクト(db)がNULLです。\";\n  }\n  if (!params) {\n    // パラメータなし\n    try {\n      return await db.all(sql);\n    }\n    catch (err) {\n      throw `SQL文の実行中にエラーが発生しました。\\n\\n${err}\\n\\n${sql}`;\n    }\n  }\n  else {\n    // パラメータあり\n    try {\n      return await db.all(sql, params);\n    }\n    catch (err) {\n      throw `SQL文の実行中にエラーが発生しました。\\n\\n${err}\\n\\n${sql}\\n\\n${_getErrorText(params)}`;\n    }\n  }\n","afterCode":""},{"functionNameJP":"SQLクエリ実行（書き込み専用）","functionNameEN":"runSqlWriteOnly","parametersName":["sql","params"],"parametersDataType":["string",{"string":"any"}],"returnValue":"void","functionId":"01HM2VCWFXG7KVV4EMJRME4MM9","beforeCode":"\n\nfunction _getErrorText(params){\n  const newParams = structuredClone(params);\n  for( const key in newParams ){\n    const value = newParams[key];\n    if( !value ){\n    }\n    else if( Array.isArray(value) ){\n      if( value.length > 20 ){\n        newParams[key] = [ \"配列のサイズが大きいので表示できません\" ];\n      }\n    }\n    else if( Object.values(value)?.length > 20 ){\n        newParams[key] = { \"xxx\":\"連想配列のサイズが大きいので表示できません\" };\n    }\n  }\n  return JSON.stringify(newParams, null, 2);\n}\n\n\n\n","innerCode":"\n  if(!db){\n    throw \"データベースオブジェクト(db)がNULLです。\";\n  }\n  if (!params) {\n    // パラメータなし\n    try {\n      return await db.run(sql);\n    }\n    catch (err) {\n      throw `SQL文の実行中にエラーが発生しました。\\n\\n${err}\\n\\n${sql}`;\n    }\n  }\n  else {\n    // パラメータあり\n    try {\n      return await db.run(sql, params);\n    }\n    catch (err) {\n      throw `SQL文の実行中にエラーが発生しました。\\n\\n${err}\\n\\n${sql}\\n\\n${_getErrorText(params)}`;\n    }\n  }\n","afterCode":""},{"functionNameJP":"バックエンドプログラム終了","functionNameEN":"close","parametersName":[],"parametersDataType":[],"returnValue":"void","functionId":"01HM2WJ7WYS82N34N3J3ZTH8E7","beforeCode":"\n\n\n\n","innerCode":"\n  if (isConnect === true) {\n    await db.close();\n    isConnect = false;\n  }\n","afterCode":""},{"functionNameJP":"データベースオブジェクトを取得","functionNameEN":"getDB","parametersName":[],"parametersDataType":[],"returnValue":"any","functionId":"01HNBHN1CGSRZ9M412ZMJRTMYC","beforeCode":"\n\n\n\n","innerCode":"\n  return db;\n","afterCode":"\n"}]