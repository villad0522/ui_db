[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n    await startUp(\"http://localhost:3000/\", true);\n    //\n    const { tableId: tableId1 } = await createTable(\"学年テーブル\");\n    const { columnId: columnId1 } = await createColumn( tableId1, \"学年\", \"INTEGER\", null );\n    await setTitleColumn( columnId1 );    // 見出しの役割を果たすカラムを登録する\n    const { recordId: recordId } = await createRecord( tableId1, {\n        [columnId1]: 3,\n    });\n    //\n    const { tableId: tableId2 } = await createTable(\"名簿テーブル\");\n    const { columnId: columnId2  } = await createColumn( tableId2, \"学年\", \"POINTER\", tableId1 );\n    const { columnId: columnId3  } = await createColumn( tableId2, \"氏名\", \"TEXT\", null );\n    await setTitleColumn( columnId3 );    // 見出しの役割を果たすカラムを登録する\n    const { recordId: recordId2 } = await createRecord( tableId2, {\n        [columnId2]: recordId,\n        [columnId3]: \"田中太郎\",\n    });\n    //\n    const { tableId: tableId3 } = await createTable(\"成績表テーブル\");\n    const { columnId: columnId4  } = await createColumn( tableId3, \"学生\", \"POINTER\", tableId2 );\n    const { columnId: columnId5  } = await createColumn( tableId3, \"科目\", \"TEXT\", null );\n    const { columnId: columnId6  } = await createColumn( tableId3, \"得点\", \"INTEGER\", null );\n    await createRecord( tableId3, {\n        [columnId4]: recordId2,\n        [columnId5]: \"国語\",\n        [columnId6]: 34,\n    });\n    //\n    // ページを作成（親ページのIDを指定する。この場合はトップページ。）\n    const { pageId: pageId3 } = await createPage( 1 );\n    //\n    // ページにビューを追加\n    const { viewId: viewId3 } = await createView( pageId3, \"成績表テーブル\" );\n    //\n    // ビューカラムを追加\n    await addViewColumn(\n        viewId3,\n        \"RAW\",  // viewColumnType\n        `main.${columnId4} > ${columnId2} > ${columnId1}`,     // columnPath\n        \"学年\",   // viewColumnName\n    );\n    //\n    // ビューカラムの一覧を取得\n    const viewColumns3 = await listViewColumns( viewId3 );\n    if( viewColumns3.length !== 4 ){\n        console.error(viewColumns3);\n        throw `ビューカラムの個数が想定外です`;\n    }\n    //\n    // 予測変換\n    const inputTexts = {};\n    for( const { viewColumnId, viewColumnName } of viewColumns3 ){\n        if( viewColumnName === \"氏名\" ){\n            inputTexts[viewColumnId] = \"田\";\n        }\n        else if( viewColumnName === \"学年\" ){\n            inputTexts[viewColumnId] = 3;\n        }\n    }\n    const result3 = await autoFill(\n        viewId3,\n        inputTexts,\n        true, // isClick\n    );\n    /*\n    これが返ってくるはず。\n    {\n        \"d3\": \"田中太郎\",\n        \"d4\": 3,\n        \"d4_option\": [\n            3\n        ],\n        \"d3_option\": [\n            \"田中太郎\"\n        ],\n        \"d1\": \"\",\n        \"d2\": \"\",\n        \"d1_option\": [\n            34\n        ],\n        \"d2_option\": [\n            \"国語\"\n        ]\n    }  */\n    for( const { viewColumnId, viewColumnName } of viewColumns3 ){\n        if( viewColumnName === \"氏名\" ){\n            if( result3[viewColumnId]!==\"田中太郎\" ){\n                throw new Error(`実行結果が想定外です。\\n`+JSON.stringify(result3, null, 2));\n            }\n            if( result3[viewColumnId+\"_option\"][0]!==\"田中太郎\" ){\n                throw new Error(`実行結果が想定外です。\\n`+JSON.stringify(result3, null, 2));\n            }\n        }\n        else if( viewColumnName === \"学年\" ){\n            if( result3[viewColumnId]!==3 ){\n                throw new Error(`実行結果が想定外です。\\n`+JSON.stringify(result3, null, 2));\n            }\n            if( result3[viewColumnId+\"_option\"][0]!==3 ){\n                throw new Error(`実行結果が想定外です。\\n`+JSON.stringify(result3, null, 2));\n            }\n        }\n        else if( viewColumnName === \"科目\" ){\n            if( result3[viewColumnId]!==\"\" ){\n                throw new Error(`実行結果が想定外です。\\n`+JSON.stringify(result3, null, 2));\n            }\n            if( result3[viewColumnId+\"_option\"][0]!==\"国語\" ){\n                throw new Error(`実行結果が想定外です。\\n`+JSON.stringify(result3, null, 2));\n            }\n        }\n        else if( viewColumnName === \"得点\" ){\n            if( result3[viewColumnId]!==\"\" ){\n                throw new Error(`実行結果が想定外です。\\n`+JSON.stringify(result3, null, 2));\n            }\n            if( result3[viewColumnId+\"_option\"][0]!==34 ){\n                throw new Error(`実行結果が想定外です。\\n`+JSON.stringify(result3, null, 2));\n            }\n        }\n    }\n    //\n    //\n    await close();\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"プログラム起動","functionNameEN":"startUp","parametersName":["localUrl","isDebug"],"parametersDataType":["string_nullable","boolean"],"returnValue":"void","functionId":"01HND4RF77E0JZT1DC776RWQ1C","beforeCode":"\n\n\n\n\n\n","innerCode":"\n    await startUp( localUrl, isDebug );   // 下層の関数を呼び出す\n    //\n    await reserveWord(\"view_columns\"); // 予約語に登録\n    await runSqlWriteOnly(\n        `CREATE TABLE IF NOT EXISTS view_columns (\n            \"view_column_id\" INTEGER PRIMARY KEY AUTOINCREMENT,\n            \"view_id\" INTEGER NOT NULL,\n            \"view_column_type\" TEXT NOT NULL,\n            \"column_path\" TEXT NOT NULL,\n            \"view_column_name\" TEXT NOT NULL,\n            \"excel_column_index\" INTEGER NOT NULL,\n            FOREIGN KEY (view_id) REFERENCES views(view_id),\n            UNIQUE (view_id, excel_column_index)\n        );`,\n        {},\n    );\n","afterCode":""},{"functionNameJP":"ビューカラムを作成","functionNameEN":"addViewColumn","parametersName":["viewId","viewColumnType","columnPath","viewColumnName"],"parametersDataType":["number","string","string","string"],"returnValue":"void","functionId":"01HND5FBPF4PFEM8Q7R0SPY4Q6","beforeCode":"\n\n\n\n","innerCode":"\n    await _addViewColumn_core( viewId, viewColumnType, columnPath, viewColumnName );\n    if( viewColumnType===\"RAW\" ){\n        // 入力要素を再構築する\n        await regenerateInputElements_core( viewId );\n    }\n","afterCode":""},{"functionNameJP":"カラムを作成","functionNameEN":"createColumn","parametersName":["tableId","columnName","dataType","parentTableId"],"parametersDataType":["string","string","string","string_nullable"],"returnValue":{"message":"string","columnId":"string"},"functionId":"01HMTKZQT8DD7R8S03Q0EV0F0D","beforeCode":"\n\n\n// 文字列からアンダーバー（_）以降を切り取る関数\nfunction _cutStringAfterUnderscore(inputString) {\n    // アンダーバーのインデックスを検索\n    const underscoreIndex = inputString.indexOf('_');\n    // アンダーバーが見つかった場合\n    if (underscoreIndex !== -1) {\n        // アンダーバー以降の部分を取得して出力\n        const resultString = inputString.substring(underscoreIndex + 1);\n        return resultString;\n    } else {\n        // アンダーバーが見つからなかった場合はそのまま出力\n        return inputString;\n    }\n}\n\n\n\n","innerCode":"\n    const result = await createColumn( tableId, columnName, dataType, parentTableId );    // 下層の関数を呼び出す\n    //\n    const viewIdList = await listViewsFromTableId( tableId );\n    if( dataType !== \"POINTER\" ){\n        // 列を表示設定にする\n        for( const viewId of viewIdList ){\n            await _addViewColumn_core(\n                viewId,\n                \"RAW\",\n                `main.${result.columnId}`,\n                columnName,\n            );\n            // 入力要素を再構築する\n            await regenerateInputElements_core( viewId );\n        }\n        return result;\n    }\n    const parentColumnId = await getTitleColumnId( parentTableId );\n    if(!parentColumnId){\n        console.error(`タイトル列が設定されていません。${parentTableId}`);\n        return result;\n    }\n    // 列を表示設定にする\n    for( const viewId of viewIdList ){\n        await _addViewColumn_core(\n            viewId,\n            \"RAW\",\n            `main.${result.columnId} > ${parentColumnId}`,\n            columnName,\n        );\n        // 入力要素を再構築する\n        await regenerateInputElements_core( viewId );\n    }\n    return result;\n","afterCode":""},{"functionNameJP":"ビューを作成","functionNameEN":"createView","parametersName":["pageId","tableName"],"parametersDataType":["number","string"],"returnValue":"void","functionId":"01HM3FA7KYR69753F0SEZNV80C","beforeCode":"\n\n\n\n","innerCode":"\n    const tableId = await getTableIdFromName(tableName);\n    if(!tableId){\n        throw new Error(`指定されたテーブル名「${tableName}」は存在しません。`);\n    }\n    const result = await createView( pageId, tableId );  // 下層の関数を実行する\n    //\n    //\n    // 自動的に列を表示設定にしてあげる\n    await _deleteViewColumns_core( result.viewId );\n    const columns = await listColumnsAll( tableId );\n    for( const { id, name, dataType, parentTableId } of columns ){\n        // 文字列からアンダーバー（_）以降を切り取る\n        const columnName = _cutStringAfterUnderscore(name);\n        if( dataType !== \"POINTER\" ){\n            // 列を表示設定にする\n            await _addViewColumn_core(\n                result.viewId,\n                \"RAW\",\n                `main.${id}`,\n                columnName,\n            );\n            continue;\n        }\n        if( !parentTableId ){\n            throw `親テーブルが不明です。\\nテーブルID=${tableId}\\nカラムID=${id}`;\n        }\n        const parentColumnId = await getTitleColumnId( parentTableId );\n        if(!parentColumnId){\n            console.error(`createView > タイトル列が設定されていません。${parentTableId}`);\n            continue;\n        }\n        // 列を表示設定にする\n        await _addViewColumn_core(\n            result.viewId,\n            \"RAW\",\n            `main.${id} > ${parentColumnId}`,\n            columnName,\n        );\n    }\n    // 入力要素を再構築する\n    await regenerateInputElements_core( result.viewId );\n    return result;\n","afterCode":""},{"functionNameJP":"ビューカラムの一覧を取得","functionNameEN":"listViewColumns","parametersName":["viewId"],"parametersDataType":["number"],"returnValue":[{"viewColumnId":"string","viewColumnType":"string","columnPath":"string","viewColumnName":"string","excelColumnText":"string"}],"functionId":"01HND0SW6XW0NKKA7WD1D0ARJ6","beforeCode":"\n\n\n\n","innerCode":"\n    const viewColumns1 = await runSqlReadOnly(\n        `SELECT\n            \"d\" || view_column_id AS viewColumnId,\n            view_column_type AS viewColumnType,\n            column_path AS columnPath,\n            view_column_name AS viewColumnName,\n            excel_column_index AS excelColumnIndex\n        FROM view_columns\n        WHERE view_id = :viewId\n        ORDER BY excel_column_index ASC;`,\n        {\n            \":viewId\": viewId,\n        },\n    );\n    //\n    const { excelStartColumn } = await getViewInfo( viewId );\n    //\n    const viewColumns2 = [];\n    for( const viewColumn of viewColumns1 ){\n        const offset = viewColumn.excelColumnIndex;\n        viewColumns2.push({\n            \"viewColumnId\": viewColumn.viewColumnId,\n            \"viewColumnName\": viewColumn.viewColumnName,\n            \"viewColumnType\": viewColumn.viewColumnType,\n            \"excelColumnText\": _convertToExcelColumn(excelStartColumn + offset),\n            \"columnPath\": viewColumn.columnPath\n        });\n    }\n    return viewColumns2;\n","afterCode":""},{"functionNameJP":"ビューを削除","functionNameEN":"deleteView","parametersName":["viewId"],"parametersDataType":["number"],"returnValue":"void","functionId":"01HND69RB8G3ET01TVARSKC9AP","beforeCode":"\n\n// Excelの列番号（数値）をAからAZの列名に変換する関数\nfunction _convertToExcelColumn(number) {\n    let columnName = '';\n    const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    while (number > 0) {\n        const remainder = (number - 1) % 26;\n        columnName = alphabet.charAt(remainder) + columnName;\n        number = Math.floor((number - 1) / 26);\n    }\n    return columnName;\n}\n\n","innerCode":"\n    await _deleteViewColumns_core( viewId );\n    return await deleteView( viewId );  // 下層の関数を実行する\n","afterCode":""},{"functionNameJP":"【サブ関数】ビューカラムを一括削除","functionNameEN":"_deleteViewColumns","parametersName":["viewId"],"parametersDataType":["number"],"returnValue":"void","functionId":"01HND6N7FWYDS9K2AWFEQYA6MA","beforeCode":"\n\n","innerCode":"\n    await runSqlWriteOnly(\n        `DELETE FROM view_columns\n            WHERE view_id = :viewId;`,\n        {\n            \":viewId\": viewId,\n        },\n    );\n    // 入力要素と入力グループを全て消し去る\n    await deleteViewInput(viewId);\n    //\n    if(await isExistView(viewId)===false) return;\n    // ビューの情報を取得する\n    const { childPageId } = await getViewInfo( viewId );\n    const views = await listChildrenView( childPageId );\n    for( const { viewId } of views ){\n        // ビューカラムを一括削除（再帰呼び出し）\n        await _deleteViewColumns_core( viewId );\n    }\n","afterCode":""},{"functionNameJP":"【サブ関数】入力要素を全て作り直す","functionNameEN":"regenerateInputElements","parametersName":["viewId"],"parametersDataType":["number"],"returnValue":"void","functionId":"01HNDEE0FMYBQ2JJ9RNKYG5PZK","beforeCode":"\n\n","innerCode":"\n    // 入力要素と入力グループを全て消し去る\n    await deleteViewInput(viewId);\n    //\n    const mainTableId = await getTableFromView( viewId );\n    // 入力グループを作成\n    await createInputGroup(\n        viewId + \"/main\",     // inputGroupId\n        viewId,\n        mainTableId,\n        null,   // nextGroupId\n        null,   // nextColumnId\n        100, // processingOrder\n    );\n    //\n    const viewColumns = await listViewColumns_core( viewId );\n    //\n    // 入力要素をグループ分けするために、外部キーの一覧を作成する（重複しないように）\n    const joinIdMap = await getJoinIdMap( viewColumns );\n    // 例\n    // joinIdMap = {\n    //   \"main.c45\" : \"j0\",\n    //   \"main.c45 > c88\" : \"j1\",\n    //   \"main.c2\" : \"j2\",\n    //   \"main.c2 > c53\" : \"j3\",\n    //   \"c89 > main\" : \"j4\",\n    // };\n    //\n    for( const columnPath in joinIdMap ){\n        const inputGroupId = viewId + \"/\" + joinIdMap[columnPath];\n        const columnId = await pathToColumnId( columnPath );\n        const tableId = await getParentTableId(columnId);\n        //\n        // 子（参照元）のグループID\n        let nextGroupId = null;\n        let nextColumnId = null;\n        const pathLength = await getPathLength( columnPath );\n        if( pathLength >= 2 ){\n            const childColumnPath = await slicePath( columnPath, pathLength-1 );\n            const childColumnId = await pathToColumnId( childColumnPath );\n            //\n            // 子（参照元）のグループID\n            nextGroupId =  viewId + \"/\" + joinIdMap[childColumnPath];\n            nextColumnId = childColumnId;\n        }\n        else{\n            nextGroupId = viewId + \"/main\";\n            nextColumnId = columnId;\n        }\n        //\n        // 処理順序を決める（入力フォームの解析の際には、親→子の順で処理する。）\n        const processingOrder = 100 - pathLength - 1;\n        //\n        // 入力グループを作成\n        await createInputGroup(\n            inputGroupId,\n            viewId,\n            tableId,\n            nextGroupId,\n            nextColumnId,\n            processingOrder\n        );\n    }\n    //\n    for( const { viewColumnId, viewColumnType, columnPath, viewColumnName } of viewColumns ){\n        let inputGroupId = viewId + \"/main\";\n        const pathLength = await getPathLength( columnPath );\n        if( pathLength >= 2 ){\n            // 子（参照元）のカラムパス\n            const childColumnPath = await slicePath( columnPath, pathLength-1 );\n            inputGroupId = viewId + \"/\" + joinIdMap[childColumnPath];\n            if( !inputGroupId ){\n                throw `入力要素を作り直そうとしましたが、所属している入力グループが見つかりません。\\ncolumnPath = ${columnPath}\\njoinIdMap = ${JSON.stringify(joinIdMap,null,2)}`;\n            }\n        }\n        const columnId = await pathToColumnId( columnPath );\n        //\n        // 入力要素を作成\n        await createInputElement(\n            viewColumnId,\n            inputGroupId,\n            columnId,\n            \"TEXTBOX\", // inputType\n        );\n    }\n","afterCode":""},{"functionNameJP":"【サブ関数】ビューカラムを作成","functionNameEN":"_addViewColumn","parametersName":["viewId","viewColumnType","columnPath","viewColumnName"],"parametersDataType":["number","string","string","string"],"returnValue":"void","functionId":"01HNEDET9NN7CK6GMEG55ZWKZ1","beforeCode":"\n\n\n\n","innerCode":"\n    if( typeof viewId !== \"number\" || isNaN(viewId) ){\n        throw `ビューIDが数値ではありません`;\n    }\n    // RAW, SUM、MAX、MIN、AVG、COUNT \n    if( viewColumnType!==\"RAW\" && viewColumnType!==\"SUM\" && viewColumnType!==\"MAX\"\n        && viewColumnType!==\"MIN\" && viewColumnType!==\"AVG\" && viewColumnType!==\"COUNT\" ){\n        throw `サポートされていない集合関数です。\\nviewColumnType = ${viewColumnType}`;\n    }\n    //\n    // excelの空いている列を見つける\n    const matrix = await runSqlReadOnly(\n        `SELECT excel_column_index AS excelColumnIndex\n            FROM view_columns\n            WHERE view_id = :viewId\n            ORDER BY excel_column_index ASC;`,\n        {\n            \":viewId\": viewId,\n        },\n    );\n    const numbers = new Set();\n    for( const { excelColumnIndex } of matrix ){\n        numbers.add( excelColumnIndex );\n    }\n    let excelColumnIndex;\n    for( let i=0; i<=numbers.size; i++ ){\n        if(!numbers.has(i)){\n            excelColumnIndex = i;\n            break;\n        }\n    }\n    // 列を表示設定にする\n    await runSqlWriteOnly(\n        `INSERT INTO view_columns(\n            view_id,\n            view_column_type,\n            column_path,\n            view_column_name,\n            excel_column_index\n        ) VALUES (\n            :viewId,\n            :viewColumnType,\n            :columnPath,\n            :viewColumnName,\n            :excelColumnIndex\n        );`,\n        {\n            \":viewId\": viewId,\n            \":viewColumnType\": viewColumnType,\n            \":columnPath\": columnPath,\n            \":viewColumnName\": viewColumnName,\n            \":excelColumnIndex\": excelColumnIndex,\n        },\n    );\n","afterCode":""},{"functionNameJP":"ページを削除","functionNameEN":"deletePage","parametersName":["pageId"],"parametersDataType":["number"],"returnValue":"void","functionId":"01HNXS5FYB1BHTM3D2RHS13X1E","beforeCode":"\n\n","innerCode":"\n  //\n  // ビューの一覧を取得する\n  const views = await listChildrenView( pageId );\n  for( const { viewId } of views ){\n    // ビューカラムを一括削除\n    await _deleteViewColumns_core( viewId );\n  }\n  // 親のビューを取得\n  const view = await runSqlReadOnly(\n    `SELECT dynamic_parent_id AS viewId\n      FROM pages\n      WHERE page_id = :pageId\n      LIMIT 1;`,\n    {\n      \":pageId\": pageId,\n    },\n  );\n  // もし親のビューが存在したら\n  if(view.length>=1){\n    const parentViewId = view[0][\"viewId\"];\n    if( parentViewId && !isNaN(parentViewId) ){\n        // ビューカラムを一括削除\n        await _deleteViewColumns_core( parentViewId );\n    }\n  }\n  await deletePage( pageId );   // 下層の関数を呼び出す\n","afterCode":""},{"functionNameJP":"不可逆的にテーブルを削除","functionNameEN":"deleteTable","parametersName":["tableId"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HP3HY8TGYXXSD9S0S3GDD3XK","beforeCode":"\n\n","innerCode":"\n    const views = await listViewsFromTableId( tableId );\n    for( const viewId of views ){\n        await runSqlWriteOnly(\n            `DELETE FROM view_columns WHERE view_id = :viewId;`,\n            {\n                \":viewId\": viewId,\n            },\n        );\n    }\n    return await deleteTable( tableId );\n","afterCode":""},{"functionNameJP":"ビューの情報を更新","functionNameEN":"updateView","parametersName":["params"],"parametersDataType":[{"viewName":"string","isTableHeader":"boolean","sheetName":"string","viewType":"string","excelStartRow":"number","excelStartColumn":"number","viewColumns":[{"viewColumnId":"string","viewColumnName":"string"}]}],"returnValue":"string","functionId":"01HPN8KXKHH3D5ZRDCVZDDN7E7","beforeCode":"\n\n","innerCode":"\n    const viewColumns = params.viewColumns;\n    for( const { viewColumnId, viewColumnName } of viewColumns ){\n        await runSqlWriteOnly(\n            `UPDATE view_columns\n                SET view_column_name = :viewColumnName\n                WHERE view_column_id = :viewColumnId;`,\n            {\n                \":viewColumnId\": viewColumnId.replace(\"d\",\"\"),\n                \":viewColumnName\": viewColumnName,\n            },\n        );\n    }\n    //\n    delete params[\"viewColumns\"];\n    return await updateView( params );\n","afterCode":""},{"functionNameJP":"ビューカラムを削除","functionNameEN":"deleteViewColumn","parametersName":["viewColumnId"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HPNN0KWEAEJ26QV510YTZ9SF","beforeCode":"\n\n","innerCode":"\n    // 削除\n\n    if(true/*一番左のビューカラムを削除する場合 */){\n        // Excelデータの開始位置を、ひとつ右にずらす\n        // すべてのビューカラムのオフセットを、ひとつ左にずらす\n        \n    }\n    await runSqlWriteOnly(\n        `DELETE FROM view_columns\n            WHERE view_column_id = :viewId;`,\n        {\n            \":viewId\": viewId,\n        },\n    );\n    // 入力要素と入力グループを全て消し去る\n    await deleteViewInput(viewId);\n    return \"ビューカラムを削除しました\";\n","afterCode":""},{"functionNameJP":"ビューカラムを右へ移動","functionNameEN":"reorderViewColumnToRight","parametersName":["viewColumnId"],"parametersDataType":["string"],"returnValue":"void","functionId":"01HPNNC5BKXZ171RA8SDWEHPNY","beforeCode":"\n\n","innerCode":"\n    // もし隣のビューカラムとの間に隙間があったら、そこへ移動。\n    // もし隙間がなかったら、隣のビューカラムと交換。\n","afterCode":""},{"functionNameJP":"ビューカラムを左へ移動","functionNameEN":"reorderViewColumnToLeft","parametersName":["viewColumnId"],"parametersDataType":["string"],"returnValue":"void","functionId":"01HPNNP6GKATJ4AXAVZE2XSATV","beforeCode":"\n\n","innerCode":"\n    // もし、すでにA列にいるなら、\n\n\n    // もし、すでにビューカラムの中で一番左にいるなら、\n    //\n        //   Excelデータの開始位置を、ひとつ左にずらす\n        //   すべてのビューカラムのオフセットを、ひとつ右にずらす\n        //   このビューカラムのオフセットをゼロにする\n        \n    // もし隣のビューカラムとの間に隙間があったら、そこへ移動。\n    // もし隙間がなかったら、隣のビューカラムと交換。\n","afterCode":"\n"}]