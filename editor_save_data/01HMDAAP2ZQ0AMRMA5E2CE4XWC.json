[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n  if( await getPathLength(\"main.c2 > c53 > c1\") !== 3 ){\n    throw \"関数が想定通りの動作をしませんでした。\";\n  }\n  if( await getPathLength(\"c2 > c53 > c1 > main\") !== 4 ){\n    throw \"関数が想定通りの動作をしませんでした。\";\n  }\n  if( await slicePath(\"main.c2 > c53 > c1\", 1 ) !== \"main.c2\" ){\n    throw \"関数が想定通りの動作をしませんでした。\";\n  }\n  if( await slicePath(\"main.c2 > c53 > c1\", 2 ) !== \"main.c2 > c53\" ){\n    throw \"関数が想定通りの動作をしませんでした。\";\n  }\n  if( await slicePath(\"main.c2 > c53 > c1\", 3 ) !== \"main.c2 > c53 > c1\" ){\n    throw \"関数が想定通りの動作をしませんでした。\";\n  }\n  if( await slicePath(\"c2 > c53 > c1 > main\", 1 ) !== \"main\" ){\n    throw \"関数が想定通りの動作をしませんでした。\";\n  }\n  if( await slicePath(\"c2 > c53 > c1 > main\", 2 ) !== \"c1 > main\" ){\n    throw \"関数が想定通りの動作をしませんでした。\";\n  }\n  if( await slicePath(\"c2 > c53 > c1 > main\", 3 ) !== \"c53 > c1 > main\" ){\n    throw \"関数が想定通りの動作をしませんでした。\";\n  }\n  if( await slicePath(\"c2 > c53 > c1 > main\", 4 ) !== \"c2 > c53 > c1 > main\" ){\n    throw \"関数が想定通りの動作をしませんでした。\";\n  }\n  await checkPath(\"main.c2 > c53 > c1\");\n  await checkPath(\"main.c2\");\n  await checkPath(\"c2 > c53 > c1 > main\");\n  //\n  if( await pathToColumnId(\"main.c2 > c53 > c1\") !== \"c1\" ){\n    throw \"関数が想定通りの動作をしませんでした。\";\n  }\n  if( await pathToColumnId(\"c2 > c53 > c1 > main\") !== \"c2\" ){\n    throw \"関数が想定通りの動作をしませんでした。\";\n  }\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"カラムパスの長さを取得する","functionNameEN":"getPathLength","parametersName":["pathText"],"parametersDataType":["string"],"returnValue":"number","functionId":"01HMDAB2KZQ99JPH2ZX97DTVWA","beforeCode":"\n\n\n\n// パスの例\n// main.c12\n// main.c45 > c88 > c66\n// main.c2 > c53 > c1\n// main.c2 > c53 > c67\n// c89 > main\n\n\n","innerCode":"\n  // （例）  main.c2 > c53 > c1   長さ3\n  // （例）  c2 > c53 > c1 > main   長さ4\n  const pathArray = String(pathText).split(\">\");\n  return pathArray.length;\n","afterCode":""},{"functionNameJP":"パスを途中まで切り取る関数","functionNameEN":"slicePath","parametersName":["pathText","length"],"parametersDataType":["string","number"],"returnValue":"string","functionId":"01HMDAKMGWZ02YPQPA5G8ECTJX","beforeCode":"\n\n\n","innerCode":"\n  let pathArray = String(pathText).split(\">\");\n  pathArray = pathArray.map( text => text.trim() );\n  if( pathArray[0].startsWith(\"main.\") ){\n    // 先頭がメインテーブルの場合、先頭から途中まで切り取る。\n    return pathArray.slice(0, length).join(\" > \");\n  }\n  else if( pathArray[pathArray.length-1] === \"main\" ){\n    // 末尾がメインテーブルの場合、途中から末尾まで切り取る。\n    const startIndex = pathArray.length - length;\n    return pathArray.slice(startIndex).join(\" > \");\n  }\n  else{\n    throw \"カラムパスの文法が不正です。先頭か末尾に「main」を書く必要があります。\";\n  }\n","afterCode":""},{"functionNameJP":"パスの文法をチェックする関数","functionNameEN":"checkPath","parametersName":["pathText"],"parametersDataType":["string"],"returnValue":"void","functionId":"01HMDB7MCHN3KHS4GX0X2KAXGS","beforeCode":"\n\n\n","innerCode":"\n  let pathArray = String(pathText).split(\">\");\n  pathArray = pathArray.map( text => text.trim() );\n  if(pathArray.length===0){\n    throw `カラムパスの長さが足りません\\npathText = ${pathText}`;\n  }\n  if( pathArray[0].startsWith(\"main.\") ){\n    // 先頭がメインテーブルの場合\n    pathArray[0] = pathArray[0].replace( \"main.\", \"\" );\n  }\n  else if( pathArray.pop() === \"main\" ){\n    // 末尾がメインテーブルの場合\n  }\n  else{\n    throw `カラムパスの文法が不正です。先頭か末尾に「main」を書く必要があります。\\npathText = ${pathText}`;\n  }\n  if(pathArray.length===0){\n    throw `カラムパスの長さが足りません\\npathText = ${pathText}`;\n  }\n  // この時点で、pathArrayの中身は全てカラムIDの形式（例：c55）になっているはず。\n  for( let columnId of pathArray ){\n    if( !columnId.startsWith(\"c\") ){\n      throw `カラムパスの文法が不正です。カラムIDの先頭に「c」が見つかりません。\\npathText = ${pathText}`;\n    }\n    columnId = columnId.replace(\"c\",\"\");\n    if(isNaN(columnId)){\n      throw `カラムパスの文法が不正です。カラムIDを数値に変換できません。\\npathText = ${pathText}`;\n    }\n  }\n","afterCode":""},{"functionNameJP":"パスをカラムIDに変換","functionNameEN":"pathToColumnId","parametersName":["pathText"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HMDHV73ZEYEJ5QE2AGGWZD4E","beforeCode":"\n\n","innerCode":"\n  let pathArray = String(pathText).split(\">\");\n  pathArray = pathArray.map( text => text.trim() );\n  if( pathArray[0].startsWith(\"main.\") ){\n    // 先頭がメインテーブルの場合\n    return pathArray.pop().replace( \"main.\", \"\" );\n  }\n  else if( pathArray[pathArray.length-1] === \"main\" ){\n    // 末尾がメインテーブルの場合\n    return pathArray[0];\n  }\n  else{\n    throw \"カラムパスの文法が不正です。先頭か末尾に「main」を書く必要があります。\";\n  }\n","afterCode":"\n"}]