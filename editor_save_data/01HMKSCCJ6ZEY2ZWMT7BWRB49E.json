[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n    await startUp(\"http://localhost:3000/\", true);\n    await listEndpoints();\n    await getEndpointInfo( \"/default/tables\", true, true );\n    await getEndpointInfo( \"/default/page_editor\", true, true );\n    await runApi(\"GET\",\"/default/tables\",{},{},true,true);\n    await runApi(\"GET\",\"/default/page_editor\",{\"page_id\":1 },{},true,true);\n    await close();\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"APIを実行する関数","functionNameEN":"runApi","parametersName":["httpMethod","endpointPath","queryParameters","requestBody","isRequestFormData","isResponseFormData"],"parametersDataType":["string","string",{"string":"any"},{"string":"any"},"boolean","boolean"],"returnValue":{"string":"any"},"functionId":"01HMKSHRWKBBCRT9N0FFHP2ETZ","beforeCode":"\n\n\n\n","innerCode":"\n    //\n    // エンドポイントの情報を取得する\n    const endpointInfo = await getEndpointInfo( endpointPath, isRequestFormData, isResponseFormData );\n    //\n    let requestBody2 = structuredClone(requestBody);\n    if (isRequestFormData) {\n        // リクエストボディを、FormDataから配列に変換する\n        requestBody2 = _convertRequestBody({ endpointPath, endpointInfo, requestBody });\n    }\n    //\n    // APIのメイン処理を実行する\n    let response = await runApi( httpMethod, endpointPath, queryParameters, requestBody2, isRequestFormData, isResponseFormData );\n    //\n    if (isResponseFormData) {\n        // レスポンスデータを、配列からFormDataに変換する\n        response = _convertResponseData({ endpointPath, endpointInfo, response });\n    }\n    //\n    return response;\n","afterCode":""},{"functionNameJP":"エンドポイントの情報を取得","functionNameEN":"getEndpointInfo","parametersName":["endpointPath","isRequestFormData","isResponseFormData"],"parametersDataType":["string","boolean","boolean"],"returnValue":{"httpMethod":"string","description":"string","queryParameters":{"string":{"dataType":"string","description":"string","isRequired":"boolean","example":"any"}},"requestBody":{},"response":{"string":{"title":"string_nullable","isArray":"boolean_nullable","onePageMaxSize":"number_nullable","children":"any","dataType":"string_nullable","description":"string_nullable","example":"any"}}},"endpointPath":"string","functionId":"01HMKSVR61ZEP9EYQHFZ72F8GC","beforeCode":"\n\n\n\n//【サブ関数】リクエストボディを、FormDataから配列に変換する関数\nfunction _convertRequestBody({ endpointPath, endpointInfo, requestBody }) {\n    // requestBody を requestBody2 に変換する\n    const requestBody2 = {};\n    for (const parentKey in endpointInfo.requestBody) {\n        const parentInfo = endpointInfo.requestBody[parentKey];\n        if (!parentInfo || typeof parentInfo !== 'object') {\n            throw `リクエストボディの仕様が未定義です。endpointPath=\"${endpointPath}\", key=\"${parentKey}\"`;\n        }\n        if (!parentInfo.isArray) {\n            // 配列ではない場合\n            requestBody2[parentKey] = requestBody[parentKey];\n            continue;\n        }\n        // 配列の場合\n        if (!parentInfo.children || typeof parentInfo.children !== 'object') {\n            throw `リクエストボディの仕様が未定義です。endpointPath=\"${endpointPath}\", key=\"${parentKey}.children\"`;\n        }\n        requestBody2[parentKey] = [];\n        let noHitCount = 0;\n        for (let i = 0; noHitCount < 100; i++) {\n            const flagKey = String(parentKey) + String(i) + \"_flag\";\n            if (!requestBody[flagKey]) {\n                noHitCount++;\n                continue;\n            }\n            noHitCount = 0;\n            requestBody2[parentKey][i] = {};\n            for (const childKey in parentInfo.children) {\n                const newKey = String(parentKey) + String(i) + \"_\" + String(childKey);\n                requestBody2[parentKey][i][childKey] = requestBody[newKey];\n            }\n        }\n    }\n    return requestBody2;\n}\n\n//【サブ関数】レスポンスデータを、配列からFormDataに変換する関数\nfunction _convertResponseData({ endpointPath, endpointInfo, response }) {\n    // response を response2 に変換する\n    const response2 = {};\n    for (const parentKey in endpointInfo.response) {\n        const parentInfo = endpointInfo.response[parentKey];\n        if (!parentInfo || typeof parentInfo !== 'object') {\n            throw `レスポンスの仕様が未定義です。endpointPath=\"${endpointPath}\", key=\"${parentKey}\"`;\n        }\n        //\n        const parentValue = response[parentKey];\n        //\n        if( parentKey.endsWith(\"_option\") ){\n            // 予測変換の候補の場合\n            response2[parentKey] = parentValue;\n            continue;\n        }\n        if (!parentInfo.isArray) {\n            // 配列ではない場合\n            response2[parentKey] = parentValue;\n            continue;\n        }\n        // 配列の場合\n        if (!parentValue) {\n            throw `空のレスポンスデータを返そうとしました。本来は配列です。endpointPath=${endpointPath} key=${parentKey}`;\n        }\n        if (!Array.isArray(parentValue)) {\n            throw `想定外のレスポンスデータを返そうとしました。本来は配列です。endpointPath=${endpointPath} key=${parentKey}`;\n        }\n        if (!Number.isInteger(parentInfo.onePageMaxSize)) {\n            throw `１ページあたりの最大表示件数が未定義です。endpointPath=\"${endpointPath}\", key=\"${parentKey}.onePageMaxSize\"`;\n        }\n        if (parentInfo.onePageMaxSize < parentValue.length) {\n            throw `配列がサイズオーバーです。endpointPath=${endpointPath} key=${parentKey} 現在の長さ=${parentValue.length} 上限=${rule.onePageMaxSize}`;\n        }\n        if (!parentInfo.children || typeof parentInfo.children !== 'object') {\n            throw `レスポンスデータの仕様が未定義です。endpointPath=\"${endpointPath}\", key=\"${parentKey}.children\"`;\n        }\n        for (let i = 0; i < parentValue.length; i++) {\n            if (typeof parentValue[i] !== 'object') {\n                // 配列の要素がオブジェクトではない場合\n                throw `想定外のレスポンスデータを返そうとしました。配列の要素はオブジェクトにしてください。endpointPath=${endpointPath} key=${parentKey}`;\n            }\n            const flagKey = String(parentKey) + String(i) + \"_flag\";\n            response2[flagKey] = true;\n            for (const childKey in parentInfo.children) {\n                if (childKey === \"flag\") {\n                    throw `レスポンスデータのKeyには、文字列「flag」を使用できません。endpointPath=${endpointPath} key=${parentKey}`;\n                }\n                const childValue = parentValue[i][childKey];\n                const newKey = String(parentKey) + String(i) + \"_\" + String(childKey);\n                if( childKey.endsWith(\"_option\") ){\n                    // 予測変換の候補の場合\n                    response2[newKey] = childValue;\n                    continue;\n                }\n                response2[newKey] = childValue;\n            }\n        }\n        for (let i = parentValue.length; i < parentInfo.onePageMaxSize; i++) {\n            const flagKey = String(parentKey) + String(i) + \"_flag\";\n            response2[flagKey] = false;\n            if (!parentInfo.children || typeof parentInfo.children !== 'object') {\n                throw `レスポンスデータの仕様が未定義です。endpointPath=\"${endpointPath}\", key=\"${parentKey}.children\"`;\n            }\n            for (const childKey in parentInfo.children) {\n                const newKey = String(parentKey) + String(i) + \"_\" + String(childKey);\n                const childInfo = parentInfo.children[childKey];\n                if (!childInfo || typeof childInfo !== 'object') {\n                    throw `レスポンスデータの仕様が未定義です。endpointPath=\"${endpointPath}\", key=\"${parentKey}.children.${childKey}\"`;\n                }\n                if( childKey.endsWith(\"_option\") ){\n                    // 予測変換の候補の場合\n                    response2[newKey] = [];\n                    continue;\n                }\n                switch (childInfo.dataType) {\n                    case \"INTEGER\":\n                        response2[newKey] = 0;\n                        break;\n                    case \"REAL\":\n                        response2[newKey] = 0;\n                        break;\n                    case \"TEXT\":\n                        response2[newKey] = \"\";\n                        break;\n                    case \"BOOL\":\n                        response2[newKey] = false;\n                        break;\n                    default:\n                        throw `API通信で使用できないデータ型です。detaType=${childInfo.dataType}, endpointPath=\"${endpointPath}\", key=\"${parentKey}.children.${childKey}\"`;\n                }\n            }\n        }\n    }\n    for (const parentKey in response) {\n        const rule = endpointInfo.response[parentKey];\n        if (!rule) {\n            // もしレスポンスの規格が未定義だったら\n            throw `未定義のレスポンスデータを返そうとしました。endpointPath=\"${endpointPath}\", key=\"${parentKey}\"`;\n        }\n    }\n    return response2;\n}\n\n\n\n","innerCode":"\n    const endpointInfo1 = await getEndpointInfo( endpointPath, isRequestFormData, isResponseFormData );\n    const endpointInfo2 = structuredClone(endpointInfo1);\n    if (isRequestFormData) {\n        // リクエストデータをFormDataの形式から変換する必要がある場合\n        endpointInfo2.requestBody = _convertRequestInfo({\n            endpointPath: endpointPath,\n            oldRequestInfo: endpointInfo1.requestBody,\n        })\n    }\n    if (isResponseFormData) {\n        // レスポンスデータをFormDataの形式に変換する必要がある場合\n        endpointInfo2.response = _convertResponseInfo({\n            endpointPath: endpointPath,\n            oldResponseInfo: endpointInfo1.response,\n        })\n    }\n    return endpointInfo2;\n","afterCode":"\n\n\n\nfunction _convertRequestInfo({ endpointPath, oldRequestInfo }) {\n    const newRequestInfo = {};\n    for (const parentKey in oldRequestInfo) {\n        const parentInfo = oldRequestInfo[parentKey];\n        if (!parentInfo || typeof parentInfo !== 'object') {\n            throw `リクエストの仕様が未定義です。endpointPath=\"${endpointPath}\", key=\"${parentKey}\"`;\n        }\n        if (!parentInfo.isArray) {\n            // 配列ではない場合\n            newRequestInfo[parentKey] = parentInfo;\n            continue;\n        }\n        if (!Number.isInteger(parentInfo.onePageMaxSize)) {\n            throw `１ページあたりの最大表示件数が未定義です。endpointPath=\"${endpointPath}\", key=\"${parentKey}.onePageMaxSize\"`;\n        }\n        if (!parentInfo.title) {\n            throw `配列のタイトル（日本語）が未定義です。endpointPath=\"${endpointPath}\", key=\"${parentKey}.title\"`;\n        }\n        // 配列の場合\n        for (let i = 0; i < parentInfo.onePageMaxSize; i++) {\n            const flagKey = String(parentKey) + String(i) + \"_flag\";\n            newRequestInfo[flagKey] = {\n                \"dataType\": \"BOOL\",\n                \"isRequired\": false,\n                \"example\": (i === 0) ? true : false,\n                \"description\": `${parentInfo.title}の${i}番目の項目を、サーバー側で入力データとして採用するか否か。（true...採用する。false...無視する。）`\n                    + `ここでの「${i}番目」の数え方は、画面上に \"実際に\" 表示されている項目の先頭から数えます。`\n                    + `データの件数が増えた場合は複数のページに分割されますので、「データベースの先頭から${i}番目」として解釈するわけではありません。`,\n            };\n            if (!parentInfo.children || typeof parentInfo.children !== 'object') {\n                throw `リクエストデータの仕様が未定義です。endpointPath=\"${endpointPath}\", key=\"${parentKey}.children\"`;\n            }\n            for (const childKey in parentInfo.children) {\n                const newKey = String(parentKey) + String(i) + \"_\" + String(childKey);\n                const childInfo = parentInfo.children[childKey];\n                newRequestInfo[newKey] = {\n                    ...childInfo,\n                    \"isRequired\": false,\n                    \"description\": `${parentInfo.title}の${i}番目の項目の` + childInfo.description\n                        + `。ただし項目「${flagKey}」がtrueの場合のみ、有効なデータとして採用します。`,\n                };\n            }\n        }\n    }\n    return newRequestInfo;\n}\n\nfunction _convertResponseInfo({ endpointPath, oldResponseInfo }) {\n    const newResponseInfo = {};\n    for (const parentKey in oldResponseInfo) {\n        const parentInfo = oldResponseInfo[parentKey];\n        if (!parentInfo || typeof parentInfo !== 'object') {\n            throw `レスポンスの仕様が未定義です。endpointPath=\"${endpointPath}\", key=\"${parentKey}\"`;\n        }\n        if (!parentInfo.isArray) {\n            // 配列ではない場合\n            newResponseInfo[parentKey] = parentInfo;\n            continue;\n        }\n        if (!Number.isInteger(parentInfo.onePageMaxSize)) {\n            throw `１ページあたりの最大表示件数が未定義です。endpointPath=\"${endpointPath}\", key=\"${parentKey}.onePageMaxSize\"`;\n        }\n        if (!parentInfo.title) {\n            throw `配列のタイトル（日本語）が未定義です。endpointPath=\"${endpointPath}\", key=\"${parentKey}.title\"`;\n        }\n        // 配列の場合\n        for (let i = 0; i < parentInfo.onePageMaxSize; i++) {\n            const flagKey = String(parentKey) + String(i) + \"_flag\";\n            newResponseInfo[flagKey] = {\n                \"dataType\": \"BOOL\",\n                \"isRequired\": true,\n                \"example\": (i === 0) ? true : false,\n                \"description\": `「${parentInfo.title}」の${i}番目の項目を表示するべきか否か。（true...表示するべき。false...表示するべきではない。）`\n                    + `ここでの「${i}番目」の数え方は、画面上に \"実際に\" 表示されている項目の先頭から数えてください。`\n                    + `データの件数が増えた場合は複数のページに分割されますので、「データベースの先頭から${i}番目」とは限りません。`,\n            };\n            if (!parentInfo.children || typeof parentInfo.children !== 'object') {\n                throw `レスポンスデータの仕様が未定義です。endpointPath=\"${endpointPath}\", key=\"${parentKey}.children\"`;\n            }\n            for (const childKey in parentInfo.children) {\n                const newKey = String(parentKey) + String(i) + \"_\" + String(childKey);\n                const childInfo = parentInfo.children[childKey];\n                newResponseInfo[newKey] = {\n                    ...childInfo,\n                    \"isRequired\": false,\n                    \"description\": `「${parentInfo.title}」の${i}番目の項目の` + childInfo.description\n                        + `。ただし項目「${flagKey}」がtrueの場合のみ、有効なデータとして表示してください。`,\n                };\n            }\n        }\n    }\n    return newResponseInfo;\n}\n"}]