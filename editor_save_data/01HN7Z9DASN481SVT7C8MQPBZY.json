[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n    await startUp(\"http://localhost:3000/\", true);\n    await getDebugMode();\n    for( let i=0; i<100; i++ ){\n      if( Math.random()<0.5 ){\n        await startTransaction();\n      }\n      else{\n        await endTransaction();\n      }\n    }\n    await close();\n    //\n    await startUp(\"http://localhost:3000/\", true);\n    //\n    // わざと再接続\n    await startUp(\"localhost:3000\", true);\n    //\n    await close();\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"プログラム起動","functionNameEN":"startUp","parametersName":["localUrl","isDebug"],"parametersDataType":["string_nullable","boolean"],"returnValue":"void","functionId":"01HM2TE8CJ7CMTPVVNCZV4H3F6","beforeCode":"\n\n// 使用したnpmパッケージ「sqlite」\n//  https://github.com/kriasoft/node-sqlite#readme\n\n\n// 定数\nconst ON = 1;\nconst OFF = 2;\nconst BEGIN = 3;\nconst COMMIT = 4;\n\n//【グローバル変数】トランザクション処理中？\nlet transactionMode = OFF;\n\n\n","innerCode":"\n  let buf = transactionMode;\n  if( transactionMode===ON ){\n    await endTransaction_core();\n  }\n  await startUp( localUrl, isDebug );   // 下層の関数を呼び出す\n  transactionMode = OFF;\n  if (buf === ON) {\n    await startTransaction_core();\n  }\n","afterCode":""},{"functionNameJP":"トランザクション処理開始","functionNameEN":"startTransaction","parametersName":[],"parametersDataType":[],"returnValue":"void","functionId":"01HM2TW350TBX5QTGD3MBEWYK2","beforeCode":"\n\n\nconst sleep = msec => new Promise(resolve => setTimeout(resolve, msec));\n\n","innerCode":"\n  const db = await getDB();\n  if(!db){\n    throw \"データベースオブジェクト(db)がNULLです。\";\n  }\n  await new Promise( async (resolve, reject) => {\n    for( let i=0; (i<50) && (transactionMode===COMMIT); i++ ){\n      await sleep(100);\n    }\n    resolve();\n  });\n  if( transactionMode===ON || transactionMode===BEGIN )return;\n  if( transactionMode!==OFF ){\n    throw \"トランザクションモードが想定外です。\";\n  }\n  try{\n    transactionMode = BEGIN;\n    await db.run(\"BEGIN TRANSACTION;\");\n    transactionMode = ON;\n  }\n  catch(err){\n    console.error(err);\n    throw new Error(`トランザクション処理を開始しようとしましたが、エラーが発生しました。`);\n  }\n","afterCode":""},{"functionNameJP":"トランザクション処理終了","functionNameEN":"endTransaction","parametersName":[],"parametersDataType":[],"returnValue":"void","functionId":"01HM2TWJ3R5HVY1DGJCGW67CYD","beforeCode":"\n\n\n\n","innerCode":"\n  const db = await getDB();\n  if(!db){\n    throw \"データベースオブジェクト(db)がNULLです。\";\n  }\n  await new Promise(async (resolve, reject) => {\n    for( let i=0; (i<50) && (transactionMode===BEGIN); i++ ){\n      await sleep(100);\n    }\n    resolve();\n  });\n  if( transactionMode===OFF || transactionMode===COMMIT )return;\n  if( transactionMode!==ON ){\n    throw \"トランザクションモードが想定外です。\";\n  }\n  try{\n    transactionMode = COMMIT;\n    await db.run(\"COMMIT TRANSACTION;\");\n    transactionMode = OFF;\n  }\n  catch(err){\n    console.error(err);\n    throw new Error(`トランザクション処理を終了しようとしましたが、エラーが発生しました。`);\n  }\n","afterCode":""},{"functionNameJP":"バックエンドプログラム終了","functionNameEN":"close","parametersName":[],"parametersDataType":[],"returnValue":"void","functionId":"01HNBK3AZEHP7KB2J7VP9PGTRE","beforeCode":"\n\n\n\n","innerCode":"\n  transactionMode = OFF;\n  await close();\n  transactionMode = OFF;\n","afterCode":"\n"}]