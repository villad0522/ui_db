[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n    await startUp(\"http://localhost:3000/\", true);\n    await listEndpoints();\n    await getEndpointInfo( \"/default/tables\", true, true );\n    await getEndpointInfo( \"/default/page_editor\", true, true );\n    await runApi(\"GET\",\"/default/tables\",{},{},true,true);\n    await runApi(\"GET\",\"/default/page_editor\",{\"page_id\":1 },{},true,true);\n    await close();\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"APIを実行する関数","functionNameEN":"runApi","parametersName":["httpMethod","endpointPath","queryParameters","requestBody","isRequestFormData","isResponseFormData"],"parametersDataType":["string","string",{"string":"any"},{"string":"any"},"boolean","boolean"],"returnValue":{"string":"any"},"functionId":"01HMKT9VVT3BRJP6AMMJBVB03H","beforeCode":"\n\n\n\n","innerCode":"\n    //\n    // エンドポイントの情報を取得する\n    const endpointInfo = await getEndpointInfo( endpointPath, isRequestFormData, isResponseFormData );\n    //\n    if (!endpointInfo.httpMethod) {\n        throw `エンドポイント「${endpointPath}」のHTTPメソッドが未定義です。`;\n    }\n    if (endpointInfo.httpMethod !== httpMethod) {\n        console.log(\"\\n\\n\");\n        console.log(JSON.stringify(endpointInfo, null, 2));\n        console.log(\"\\n\\n\");\n        throw `HTTPメソッドが不正です。正：${endpointInfo.httpMethod}  誤：${httpMethod}`;\n    }\n    //\n    // リクエストボディをチェックする（可能なら変換も行う）\n    // requestBody を requestBody2 に変換する\n    const requestBody2 = {};\n    for (const parentKey in endpointInfo.requestBody) {\n        const parentInfo = endpointInfo.requestBody[parentKey];\n        let parentValue = requestBody[parentKey];\n        if (!parentInfo || typeof parentInfo !== 'object') {\n            throw `リクエストボディの仕様が未定義です。endpointPath=\"${endpointPath}\", key=\"${parentKey}\"`;\n        }\n        if (parentInfo.isArray) {\n            // 配列の場合\n            if (parentInfo.isRequired === false && !parentValue) {\n                continue; // 空欄かつ空欄OKの場合\n            }\n            requestBody2[parentKey] = _validatorArray({\n                array: parentValue,\n                parentKey,\n                arrayInfo: parentInfo,\n                allData: requestBody,\n                endpointPath,\n            });\n        }\n        else {\n            // 配列ではない場合\n            if (parentInfo.example === null || parentInfo.example === undefined) {\n                throw `仕様書にexampleが指定されていません。endpointPath=\"${endpointPath}\", key=\"${parentKey}\"`;\n            }\n            try {\n                parentValue = _validator({\n                    value: parentValue,\n                    dataType: parentInfo.dataType,\n                    isRequired: parentInfo.isRequired,\n                });\n                requestBody2[parentKey] = parentValue;\n            }\n            catch (err) {\n                // 記入漏れや書式エラーが発生した場合\n                if (!isRequestFormData) throw err;\n                // FormData形式の場合\n                console.error(`リクエストボディの項目「${parentKey}」が不正な書式です。${err}  endpointPath=\"${endpointPath}\"`);\n                return {\n                    ...requestBody,\n                    userMessage: String(err),\n                    [parentKey + \"_error\"]: String(err),\n                };\n            }\n        }\n    }\n    //\n    // APIのメイン処理を実行する\n    let response = await runApi( httpMethod, endpointPath, queryParameters, requestBody2, isRequestFormData, isResponseFormData );\n    //\n    // レスポンスデータをチェックする\n    response = _validateResponseData({ endpointPath, endpointInfo, response });\n    //\n    return response;\n","afterCode":"\n\n\n\n\nfunction _validatorArray({ array, parentKey, arrayInfo, allData, endpointPath }) {\n    // 配列の場合\n    if (!Array.isArray(array)) {\n        console.error(\"\\n\\n\");\n        console.error(JSON.stringify(allData, null, 2));\n        console.error(\"\\n\\n\");\n        throw `パラメータ「${parentKey}」を配列にしてください。`;\n    }\n    newArray = [];\n    for (let i = 0; i < array.length; i++) {\n        if (typeof array[i] !== 'object') {\n            // 配列の要素がオブジェクトではない場合\n            console.error(\"\\n\\n\");\n            console.error(JSON.stringify(allData, null, 2));\n            console.error(\"\\n\\n\");\n            throw `配列の要素（${parentKey}[${i}]）をオブジェクトにしてください。`;\n        }\n        if (!arrayInfo.children || typeof arrayInfo.children !== 'object') {\n            throw `仕様が未定義です。endpointPath=\"${endpointPath}\", key=\"${parentKey}.children\"`;\n        }\n        newArray[i] = {};\n        for (const childKey in arrayInfo.children) {\n            if (childKey === \"flag\") {\n                throw `Keyには文字列「flag」を使用できません。endpointPath=${endpointPath} key=${parentKey}`;\n            }\n            if( childKey.endsWith(\"_option\") ){\n                // 予測変換の候補の場合\n                const childValue = array[i][childKey];\n                newArray[i][childKey] = childValue;\n                continue;\n            }\n            const childInfo = arrayInfo.children[childKey];\n            if (!childInfo || typeof childInfo !== 'object') {\n                throw `仕様が未定義です。endpointPath=\"${endpointPath}\", key=\"${parentKey}.children.${childKey}\"`;\n            }\n            if (childInfo.example === null || childInfo.example === undefined) {\n                throw `仕様書にexampleが指定されていません。endpointPath=\"${endpointPath}\", key=\"${parentKey}.children.${childKey}\"`;\n            }\n            try {\n                let childValue = array[i][childKey];\n                childValue = _validator({\n                    value: childValue,\n                    dataType: childInfo.dataType,\n                    isRequired: childInfo.isRequired,\n                });\n                newArray[i][childKey] = childValue;\n            }\n            catch (err) {\n                console.error(\"\\n\\n\");\n                console.error(JSON.stringify(allData, null, 2));\n                console.error(\"\\n\\n\");\n                throw `配列の中身（${parentKey}[${i}]）が不正な書式です。${err}`;\n            }\n        }\n    }\n    return newArray;\n}\n\nfunction _validator({ value, dataType, isRequired }) {\n    switch (dataType) {\n        case \"INTEGER\":\n            if (!isNaN(value)) {\n                // 数値に変換できる場合\n                value = Number(value);\n                if (!Number.isInteger(value)) {\n                    throw \"小数は指定できません。指定できるのは整数のみです。\";\n                }\n                return value;\n            }\n            // 数値に変換できない場合\n            if (value) {\n                // 空欄ではない場合\n                throw \"指定できるのは整数のみです。\";\n            }\n            // 空欄の場合\n            if (isRequired === false) {\n                // 空欄OKの場合\n                return null;\n            }\n            // 空欄NGの場合\n            throw \"必須項目が空欄です。\";\n        case \"REAL\":\n            if (!isNaN(value)) {\n                // 数値に変換できる場合\n                return Number(value);\n            }\n            // 数値に変換できない場合\n            if (value) {\n                // 空欄ではない場合\n                throw \"指定できるのは整数のみです。\";\n            }\n            // 空欄の場合\n            if (isRequired === false) {\n                // 空欄OKの場合\n                return null;\n            }\n            // 空欄NGの場合\n            throw \"必須項目が空欄です。\";\n        case \"TEXT\":\n            if (value) {\n                // 空欄ではない場合\n                // 文字列に変換して、前後の空白を切り取って、よく確かめる。\n                if (String(value).trim()) {\n                    // やっぱり空欄ではない場合\n                    return String(value);\n                }\n            }\n            // 空欄の場合\n            if (isRequired === false) {\n                // 空欄OKの場合\n                return null;\n            }\n            throw \"必須項目が空欄です。\";\n        case \"BOOL\":\n            if (value === true) {\n                return true;\n            }\n            else if (value === false) {\n                return false;\n            }\n            if (String(value).toLowerCase() === \"true\") {\n                return true;\n            }\n            else if (String(value).toLowerCase() === \"false\") {\n                return false;\n            }\n            if (!isNaN(value)) {\n                // 数値に変換できる場合\n                return Number(value) !== 0;\n            }\n            // 数値に変換できない場合\n            if (value) {\n                // 空欄ではない場合\n                throw \"指定できるのはBOOL値のみです。\";\n            }\n            // 空欄の場合\n            if (isRequired === false) {\n                // 空欄OKの場合\n                return null;\n            }\n            // 空欄NGの場合\n            throw \"必須項目が空欄です。\";\n        default:\n            throw `サポートされていないデータ型です。detaType=\"${childInfo.dataType}\"`;\n    }\n}\n\n\n\n//【サブ関数】レスポンスデータをチェックする関数\nfunction _validateResponseData({ endpointPath, endpointInfo, response }) {\n    // response を response2 に変換する\n    const response2 = {};\n    for (const parentKey in endpointInfo.response) {\n        const parentInfo = endpointInfo.response[parentKey];\n        let parentValue = response[parentKey];\n        if (!parentInfo || typeof parentInfo !== 'object') {\n            throw `レスポンスデータの仕様が未定義です。endpointPath=\"${endpointPath}\", key=\"${parentKey}\"`;\n        }\n        if( parentKey.endsWith(\"_option\") ){\n            // 予測変換の候補の場合\n            response2[parentKey] = parentValue;\n            continue;\n        }\n        if (parentInfo.isArray) {\n            // 配列の場合\n            if (parentInfo.isRequired === false && !parentValue) {\n                continue; // 空欄の場合\n            }\n            response2[parentKey] = _validatorArray({\n                array: parentValue,\n                parentKey,\n                arrayInfo: parentInfo,\n                allData: response,\n                endpointPath,\n            });\n        }\n        else {\n            // 配列ではない場合\n            if (parentInfo.example === null || parentInfo.example === undefined) {\n                throw `仕様書にexampleが指定されていません。endpointPath=\"${endpointPath}\", key=\"${parentKey}\"`;\n            }\n            try {\n                parentValue = _validator({\n                    value: parentValue,\n                    dataType: parentInfo.dataType,\n                    isRequired: parentInfo.isRequired,\n                });\n                response2[parentKey] = parentValue;\n            }\n            catch (err) {\n                console.error(\"\\n\\n\");\n                console.error(JSON.stringify(response, null, 2));\n                console.error(\"\\n\\n\");\n                throw `レスポンスデータの項目「${parentKey}」が不正な書式です。${err}  endpointPath=\"${endpointPath}\"`;\n            }\n        }\n    }\n    for (const parentKey in response) {\n        const rule = endpointInfo.response[parentKey];\n        if (!rule) {\n            // もしレスポンスの規格が未定義だったら\n            throw `未定義のレスポンスデータを返そうとしました。endpointPath=\"${endpointPath}\", key=\"${parentKey}\"`;\n        }\n    }\n    return response2;\n}\n"}]