[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n  await startUp(\"http://localhost:3000/\", true);\n  //\n  const { tableId: tableId1 } = await createTable(\"学年\");\n  const { columnId: columnId1 } = await createColumn( tableId1, \"学年\", \"INTEGER\", null );\n  // 見出しの役割を果たすカラムを登録する\n  await setTitleColumn( columnId1 );\n  const { recordId: recordId } = await createRecord( tableId1, {\n    [columnId1]: 3,\n  });\n  //\n  const { tableId: tableId2 } = await createTable(\"名簿\");\n  const { columnId: columnId2  } = await createColumn( tableId2, \"学年\", \"POINTER\", tableId1 );\n  const { columnId: columnId3  } = await createColumn( tableId2, \"氏名\", \"TEXT\", null );\n  await createRecord( tableId2, {\n    [columnId2]: recordId,\n    [columnId3]: \"田中太郎\",\n  });\n  //\n  // ページを作成\n  const { pageId: pageId1 } = await createPage( 1, \"ページ１\" );\n  //\n  // ページに動的リストを追加\n  const { viewId: viewId1 } = await createView( pageId1, tableId2 );\n  //\n  const { sql, parameters } = await generateSQL(\n    viewId1,\n    {\n        [\"p5\"+columnId2]: recordId,\n    }\n  );\n  const matrix = await runSqlReadOnly(sql,parameters);\n  if( matrix.length !== 1 ){\n    throw \"テスト結果が想定とは異なります。\";\n  }\n  if( matrix[0]['学年'] !== 3 ){\n    throw \"テスト結果が想定とは異なります。\";\n  }\n  if( matrix[0]['氏名'] !== \"田中太郎\" ){\n    throw \"テスト結果が想定とは異なります。\";\n  }\n  await close();\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"プログラム起動","functionNameEN":"startUp","parametersName":["localUrl","isDebug"],"parametersDataType":["string_nullable","boolean"],"returnValue":"void","functionId":"01HM3F8XKW1HFKGW5H7RFMYD0C","beforeCode":"\n\n\n","innerCode":"\n    await startUp( localUrl, isDebug );   // 下層の関数を呼び出す\n    //\n    await reserveWord(\"view_columns\"); // 予約語に登録\n    await runSqlWriteOnly(\n        `CREATE TABLE IF NOT EXISTS view_columns (\n            \"view_column_id\" INTEGER PRIMARY KEY AUTOINCREMENT,\n            \"view_id\" INTEGER NOT NULL,\n            \"view_column_type\" TEXT NOT NULL,\n            \"column_path\" TEXT NOT NULL,\n            \"view_column_name\" TEXT NOT NULL,\n            \"excel_column_index\" INTEGER NOT NULL,\n            FOREIGN KEY (view_id) REFERENCES views(view_id),\n            UNIQUE (view_id, excel_column_index)\n        );`,\n        {},\n    );\n    //\n    await reserveWord(\"conditions\"); // 予約語に登録\n    await runSqlWriteOnly(\n        `CREATE TABLE IF NOT EXISTS conditions (\n            \"condition_id\" INTEGER PRIMARY KEY AUTOINCREMENT,\n            \"view_column_id\" INTEGER NOT NULL,\n            \"conditional_expression\" TEXT NOT NULL,\n            \"conditional_value\" TEXT NOT NULL,\n            FOREIGN KEY (view_column_id) REFERENCES view_columns(view_column_id)\n        );`,\n        {},\n    );\n    //\n    await reserveWord(\"sort_orders\"); // 予約語に登録\n    await runSqlWriteOnly(\n        `CREATE TABLE IF NOT EXISTS sort_orders (\n            \"view_column_id\" INTEGER PRIMARY KEY,\n            \"is_ascending\" INTEGER NOT NULL DEFAULT 1,\n            FOREIGN KEY (view_column_id) REFERENCES view_columns(view_column_id)\n        );`,\n        {},\n    );\n","afterCode":""},{"functionNameJP":"ビューを作成","functionNameEN":"createView","parametersName":["pageId","tableName"],"parametersDataType":["number","string"],"returnValue":"void","functionId":"01HM3FA7KYR69753F0SEZNV80C","beforeCode":"\n\n\n\n","innerCode":"\n    const tableId = await getTableIdFromName(tableName);\n    const result = await createView( pageId, tableId );  // 下層の関数を実行する\n    //\n    // 自動的に列を表示設定にしてあげる\n    await _deleteViewColumns( result.viewId );\n    const columns = await listColumnsAll( tableId );\n    for( const { id, name, dataType, parentTableId } of columns ){\n        // 文字列からアンダーバー（_）以降を切り取る\n        const columnName = _cutStringAfterUnderscore(name);\n        if( dataType !== \"POINTER\" ){\n            // 列を表示設定にする\n            await addViewColumn_core(\n                result.viewId,\n                \"RAW\",\n                `main.${id}`,\n                columnName,\n            );\n            continue;\n        }\n        if( !parentTableId ){\n            throw `親テーブルが不明です。\\nテーブルID=${tableId}\\nカラムID=${id}`;\n        }\n        const parentColumnId = await getTitleColumnId( parentTableId );\n        if(!parentColumnId){\n            console.error(`createView > タイトル列が設定されていません。${parentTableId}`);\n            continue;\n        }\n        // 列を表示設定にする\n        await addViewColumn_core(\n            result.viewId,\n            \"RAW\",\n            `main.${id} > ${parentColumnId}`,\n            columnName,\n        );\n    }\n    return result;\n","afterCode":""},{"functionNameJP":"ビューを削除","functionNameEN":"deleteView","parametersName":["viewId"],"parametersDataType":["number"],"returnValue":"void","functionId":"01HM3FBB33TCXTHW0Y5B2A3T0H","beforeCode":"\n\n// 文字列からアンダーバー（_）以降を切り取る関数\nfunction _cutStringAfterUnderscore(inputString) {\n    // アンダーバーのインデックスを検索\n    const underscoreIndex = inputString.indexOf('_');\n    // アンダーバーが見つかった場合\n    if (underscoreIndex !== -1) {\n        // アンダーバー以降の部分を取得して出力\n        const resultString = inputString.substring(underscoreIndex + 1);\n        return resultString;\n    } else {\n        // アンダーバーが見つからなかった場合はそのまま出力\n        return inputString;\n    }\n}\n\n\n","innerCode":"\n    await _deleteViewColumns( viewId );\n    return await deleteView( viewId );  // 下層の関数を実行する\n","afterCode":""},{"functionNameJP":"SQLクエリを生成","functionNameEN":"generateSQL","parametersName":["viewId","queryParameters"],"parametersDataType":["number",{"string":"any"}],"returnValue":{"sql":"string"},"functionId":"01HMP67P1V3BXP3SZ21D3JHS4X","innerCode":"\n    const tableId = await getTableFromView( viewId );\n    if( !tableId ){\n        throw `指定されたページには、動的リストが登録されていません。\\nviewId = ${viewId}`;\n    }\n    let viewColumns = await runSqlReadOnly(\n        `SELECT\n            \"d\" || view_column_id AS viewColumnId,\n            view_column_type AS viewColumnType,\n            column_path AS columnPath,\n            view_column_name AS viewColumnName,\n            excel_column_index AS excelColumnIndex\n        FROM view_columns\n        WHERE view_id = :viewId\n        ORDER BY excel_column_index ASC;`,\n        {\n            \":viewId\": viewId,\n        },\n    );\n    for( let i=0; i<viewColumns.length; i++ ){\n        const columnPath = viewColumns[i].columnPath;\n        viewColumns[i].pathLength = await getPathLength(columnPath);\n        viewColumns[i].columnId = await pathToColumnId(columnPath);\n    }\n    viewColumns = viewColumns.sort((a,b)=>{\n        if( a.pathLength > b.pathLength ){\n            return 1;\n        }\n        else{\n            return -1;\n        }\n    });\n    const buf = {\n        //  \"c78\": [ \"d45\", \"d99\" ],\n        //  \"c6\": [ \"d12\" ],\n    };\n    for( const { viewColumnId, columnId } of viewColumns ){\n        if( !buf[columnId] ){\n            buf[columnId] = [];\n        }\n        buf[columnId].push(viewColumnId);\n    }\n    console.log(buf);\n    const parameters = {};\n    for( const key in queryParameters ){\n        // クエリパラメータ―のキーは「p4c8」などの形式。\n        if (!/^p(\\d+)c(\\d+)$/.test(key)) continue;\n        const match = key.match(/\\d+/g);\n        if (!match || match.length!==2)continue;\n        const pageNumber = parseInt(match[0], 10);\n        const columnNumber = parseInt(match[1], 10);\n        const columnId = \"c\" + columnNumber;\n        if( !buf[columnId] ) continue;\n        if( !Array.isArray(buf[columnId]) ) continue;\n        const viewColumnId = buf[columnId][0];\n        buf[columnId].shift();  // 先頭を削除\n        const inputText = queryParameters[key];\n        const value = await formatField( inputText, columnId, false );\n        parameters[viewColumnId] = value;\n        conditionInfoList.push({\n            \"viewColumnId\" : viewColumnId,\n            \"conditionalExpression\": \"=\",\n        });\n    }\n    const conditionInfoList = await runSqlReadOnly(\n        `SELECT\n            \"d\" || conditions.view_column_id AS viewColumnId,\n            conditions.conditional_expression AS conditionalExpression,\n            conditions.conditional_value AS conditionalValue,\n            view_columns.view_column_type AS viewColumnType,\n            view_columns.column_path AS columnPath\n        FROM conditions\n        INNER JOIN view_columns\n            ON conditions.view_column_id = view_columns.view_column_id\n        WHERE view_columns.view_id = :viewId;`,\n        {\n            \":viewId\": viewId,\n        },\n    );\n    for( const { viewColumnId, conditionalValue, viewColumnType, columnPath } of conditionInfoList ){\n        if( viewColumnType===\"RAW\" ){\n            const columnId = await pathToColumnId(columnPath);\n            const value = await formatField( conditionalValue, columnId, false );\n            parameters[viewColumnId] = value;\n        }\n        else{\n            // MAX や SUM などの集合関数の場合\n            if(isNaN(conditionalValue))continue;\n            parameters[viewColumnId] = Number(conditionalValue);\n        }\n    }\n    const sortOrders = await runSqlReadOnly(\n        `SELECT\n            \"d\" || sort_orders.view_column_id AS viewColumnId,\n            sort_orders.is_ascending AS isAscending\n        FROM sort_orders\n        INNER JOIN view_columns\n            ON sort_orders.view_column_id = view_columns.view_column_id\n        WHERE view_columns.view_id = :viewId;`,\n        {\n            \":viewId\": viewId,\n        },\n    );\n    const sql = await generateSQL(\n        tableId,\n        viewColumns,\n        conditionInfoList,\n        sortOrders\n    );\n    return { sql, parameters };\n","beforeCode":"\n\n\n\n// ビューを削除\nasync function _deleteViewColumns( viewId ){\n    // 外部キー制約があるため、消す順番に注意！\n    await runSqlWriteOnly(\n        `DELETE FROM sort_orders\n            WHERE sort_orders.view_column_id IN\n            (\n                SELECT view_columns.view_column_id\n                FROM view_columns\n                WHERE view_columns.view_id = :viewId\n            );`,\n        {\n            \":viewId\": viewId,\n        },\n    );\n    await runSqlWriteOnly(\n        `DELETE FROM conditions\n            WHERE view_column_id IN\n            (\n                SELECT view_column_id\n                FROM view_columns\n                WHERE view_id = :viewId\n            );`,\n        {\n            \":viewId\": viewId,\n        },\n    );\n    await runSqlWriteOnly(\n        `DELETE FROM view_columns\n            WHERE view_id = :viewId;`,\n        {\n            \":viewId\": viewId,\n        },\n    );\n}\n\n\n\n\n\n","afterCode":""},{"functionNameJP":"カラムを作成","functionNameEN":"createColumn","parametersName":["tableId","columnName","dataType","parentTableId"],"parametersDataType":["string","string","string","string_nullable"],"returnValue":{"message":"string","columnId":"string"},"functionId":"01HMTKZQT8DD7R8S03Q0EV0F0D","beforeCode":"\n\n\n","innerCode":"\n    const result = await createColumn( tableId, columnName, dataType, parentTableId );    // 下層の関数を呼び出す\n    //\n    const viewIdList = await listViewsFromTableId( tableId );\n    if( dataType !== \"POINTER\" ){\n        // 列を表示設定にする\n        for( const viewId of viewIdList ){\n            await addViewColumn_core({ \n                viewId: viewId,\n                viewColumnType: \"RAW\",\n                columnPath: `main.${result.columnId}`,\n                viewColumnName: columnName,\n            });\n        }\n        return result;\n    }\n    const parentColumnId = await getTitleColumnId( parentTableId );\n    if(!parentColumnId){\n        console.error(`タイトル列が設定されていません。${parentTableId}`);\n        return result;\n    }\n    // 列を表示設定にする\n    for( const viewId of viewIdList ){\n        await addViewColumn_core({ \n            viewId: viewId,\n            viewColumnType: \"RAW\",\n            columnPath: `main.${result.columnId} > ${parentColumnId}`,\n            viewColumnName: columnName,\n        });\n    }\n    return result;\n","afterCode":""},{"functionNameJP":"結合済み列を作成","functionNameEN":"addViewColumn","parametersName":["viewId","viewColumnType","columnPath","viewColumnName"],"parametersDataType":["number","string","string","string"],"returnValue":"void","functionId":"01HMTMFZVWWVC9Q4WW0WFKRN1Q","beforeCode":"\n\n\n\n","innerCode":"\n    if( typeof viewId !== \"number\" || isNaN(viewId) ){\n        throw `ページIDが数値ではありません`;\n    }\n    //\n    // excelの空いている列を見つける\n    const matrix = await runSqlReadOnly(\n        `SELECT excel_column_index AS excelColumnIndex\n            FROM view_columns\n            WHERE view_id = :viewId\n            ORDER BY excel_column_index ASC;`,\n        {\n            \":viewId\": viewId,\n        },\n    );\n    const numbers = new Set();\n    for( const { excelColumnIndex } of matrix ){\n        numbers.add( excelColumnIndex );\n    }\n    let excelColumnIndex;\n    for( let i=0; i<=numbers.size; i++ ){\n        if(!numbers.has(i)){\n            excelColumnIndex = i;\n            break;\n        }\n    }\n    // 列を表示設定にする\n    await runSqlWriteOnly(\n        `INSERT INTO view_columns(\n            view_id,\n            view_column_type,\n            column_path,\n            view_column_name,\n            excel_column_index\n        ) VALUES (\n            :viewId,\n            :viewColumnType,\n            :columnPath,\n            :viewColumnName,\n            :excelColumnIndex\n        );`,\n        {\n            \":viewId\": viewId,\n            \":viewColumnType\": viewColumnType,\n            \":columnPath\": columnPath,\n            \":viewColumnName\": viewColumnName,\n            \":excelColumnIndex\": excelColumnIndex,\n        },\n    );\n","afterCode":""}]