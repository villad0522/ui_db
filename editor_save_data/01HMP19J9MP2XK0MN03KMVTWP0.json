[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n    await startUp(\"http://localhost:3000/\", true);\n    //\n    const { tableId: tableId1 } = await createTable(\"学年テーブル\");\n    const { columnId: columnId1 } = await createColumn( tableId1, \"学年\", \"INTEGER\", null );\n    // 見出しの役割を果たすカラムを登録する\n    await setTitleColumn( columnId1 );\n    const { recordId: recordId } = await createRecord( tableId1, {\n        [columnId1]: 3,\n    });\n    //\n    const { tableId: tableId2 } = await createTable(\"名簿テーブル\");\n    const { columnId: columnId2  } = await createColumn( tableId2, \"学年\", \"POINTER\", tableId1 );\n    const { columnId: columnId3  } = await createColumn( tableId2, \"氏名\", \"TEXT\", null );\n    await createRecord( tableId2, {\n        [columnId2]: recordId,\n        [columnId3]: \"田中太郎\",\n    });\n    //\n    // ページを作成（親ページのIDを指定する。この場合はトップページ。）\n    const { pageId: pageId1 } = await createPage( 1 );\n    //\n    // ページにビューを追加\n    const { viewId: viewId1 } = await createView( pageId1, \"名簿テーブル\" );\n    //\n    const { normalSQL, parameters } = await generateSQL(\n        viewId1,\n        {\n            [\"p5\"+columnId2]: recordId,\n        }\n    );\n    const matrix = await runSqlReadOnly( normalSQL, parameters );\n    await close();\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"プログラム起動","functionNameEN":"startUp","parametersName":["localUrl","isDebug"],"parametersDataType":["string_nullable","boolean"],"returnValue":"void","functionId":"01HM3F8XKW1HFKGW5H7RFMYD0C","beforeCode":"\n\n\n","innerCode":"\n    await startUp( localUrl, isDebug );   // 下層の関数を呼び出す\n    //\n    await reserveWord(\"conditions\"); // 予約語に登録\n    await runSqlWriteOnly(\n        `CREATE TABLE IF NOT EXISTS conditions (\n            \"saved_condition_id\" INTEGER PRIMARY KEY AUTOINCREMENT,\n            \"view_column_id\" INTEGER NOT NULL,\n            \"conditional_expression\" TEXT NOT NULL,\n            \"conditional_value\" TEXT NOT NULL,\n            FOREIGN KEY (view_column_id) REFERENCES view_columns(view_column_id)\n        );`,\n        {},\n    );\n    //\n    await reserveWord(\"sort_orders\"); // 予約語に登録\n    await runSqlWriteOnly(\n        `CREATE TABLE IF NOT EXISTS sort_orders (\n            \"view_column_id\" INTEGER PRIMARY KEY,\n            \"is_ascending\" INTEGER NOT NULL DEFAULT 1,\n            FOREIGN KEY (view_column_id) REFERENCES view_columns(view_column_id)\n        );`,\n        {},\n    );\n","afterCode":""},{"functionNameJP":"ビューを削除","functionNameEN":"deleteView","parametersName":["viewId"],"parametersDataType":["number"],"returnValue":"void","functionId":"01HM3FBB33TCXTHW0Y5B2A3T0H","beforeCode":"\n\n\n\n","innerCode":"\n    // 外部キー制約があるため、消す順番に注意！\n    await runSqlWriteOnly(\n        `DELETE FROM sort_orders\n            WHERE sort_orders.view_column_id IN\n            (\n                SELECT view_columns.view_column_id\n                FROM view_columns\n                WHERE view_columns.view_id = :viewId\n            );`,\n        {\n            \":viewId\": viewId,\n        },\n    );\n    await runSqlWriteOnly(\n        `DELETE FROM conditions\n            WHERE view_column_id IN\n            (\n                SELECT view_column_id\n                FROM view_columns\n                WHERE view_id = :viewId\n            );`,\n        {\n            \":viewId\": viewId,\n        },\n    );\n    return await deleteView( viewId );  // 下層の関数を実行する\n","afterCode":""},{"functionNameJP":"SQLクエリを生成","functionNameEN":"generateSQL","parametersName":["viewId","queryParameters","isExcel"],"parametersDataType":["number",{"string":"any"},"boolean"],"returnValue":{"normalSQL":"string","countSQL":"string","normalParameters":{"string":"any"},"countParameters":{"string":"any"}},"functionId":"01HMP67P1V3BXP3SZ21D3JHS4X","innerCode":"\n    const  {\n        childPageId,\n        tableId,\n        onePageMaxSize,\n        viewType\n    } = await getViewInfo( viewId );\n    if( !tableId ){\n        throw `指定されたページには、動的リストが登録されていません。\\nviewId = ${viewId}`;\n    }\n    const conditionInfoList = await _getConditions_core( viewId, queryParameters );\n    const parameters = {};\n    for( const { conditionId, conditionalValue } of conditionInfoList ){\n        parameters[\":\"+conditionId] = conditionalValue;\n    }\n    const sortOrders = await runSqlReadOnly(\n        `SELECT\n            \"d\" || sort_orders.view_column_id AS viewColumnId,\n            sort_orders.is_ascending AS isAscending\n        FROM sort_orders\n        INNER JOIN view_columns\n            ON sort_orders.view_column_id = view_columns.view_column_id\n        WHERE view_columns.view_id = :viewId;`,\n        {\n            \":viewId\": viewId,\n        },\n    );\n    const viewColumns = await listViewColumns(viewId);\n    const { normalSQL, countSQL } = await generateSQL(\n        tableId,\n        viewColumns,\n        conditionInfoList,\n        sortOrders,\n        isExcel ? null : onePageMaxSize,\n    );\n    let pageNumber = Number(queryParameters[`page_view${viewId}_`] ?? 1);\n    if(isNaN(pageNumber)){\n        pageNumber = 1;\n    }\n    if(pageNumber<=0){\n        pageNumber = 1;\n    }\n    const normalParameters = {\n        ...parameters,\n        \":offset\": onePageMaxSize * (pageNumber - 1),\n    };\n    const countParameters = parameters;\n    return {  normalSQL, countSQL, normalParameters, countParameters };\n","beforeCode":"\n\n\n\n","afterCode":""},{"functionNameJP":"不可逆的にテーブルを削除","functionNameEN":"deleteTable","parametersName":["tableId"],"parametersDataType":["string"],"returnValue":"string","functionId":"01HP3HXW0Q8R44YR9G5G3W1XX2","beforeCode":"\n\n\n\n","innerCode":"\n    const views = await listViewsFromTableId( tableId );\n    for( const viewId of views ){\n        // 外部キー制約があるため、消す順番に注意！\n        await runSqlWriteOnly(\n            `DELETE FROM sort_orders\n                WHERE sort_orders.view_column_id IN\n                (\n                    SELECT view_columns.view_column_id\n                    FROM view_columns\n                    WHERE view_columns.view_id = :viewId\n                );`,\n            {\n                \":viewId\": viewId,\n            },\n        );\n        await runSqlWriteOnly(\n            `DELETE FROM conditions\n                WHERE view_column_id IN\n                (\n                    SELECT view_column_id\n                    FROM view_columns\n                    WHERE view_id = :viewId\n                );`,\n            {\n                \":viewId\": viewId,\n            },\n        );\n    }\n    return await deleteTable( tableId );    // 下層の関数を呼び出す\n","afterCode":""},{"functionNameJP":"抽出条件を日本語で取得","functionNameEN":"getExtractionsAsJP","parametersName":["viewId","queryParameters"],"parametersDataType":["number",{"string":"any"}],"returnValue":[{"conditionId":"string","text":"string"}],"functionId":"01HQ2JPYA78YD279QMFKATZ75V","beforeCode":"\n\n\n\n\n\n","innerCode":"\n    const extractions = [];\n    const conditionInfoList = await _getConditions_core( viewId, queryParameters );\n    for( const { conditionId, viewColumnId, conditionalExpression, conditionalValue } of conditionInfoList ){\n        const viewColumnName = await getViewColumnName( viewId, viewColumnId );\n        let text = \"\";\n        switch( conditionalExpression ){\n            case \"LIKE\":\n                text = `${viewColumnName}が${conditionalValue}を含む`;\n                break;\n            case \"=\":\n                text = `${viewColumnName}が${conditionalValue}と等しい`;\n                break;\n            case \"!=\":\n                text = `${viewColumnName}が${conditionalValue}以外`;\n                break;\n            case \"<\":\n                text = `${viewColumnName}が${conditionalValue}より小さい`;\n                break;\n            case \">\":\n                text = `${viewColumnName}が${conditionalValue}より大きい`;\n                break;\n            case \"<=\":\n                text = `${viewColumnName}が${conditionalValue}以下`;\n                break;\n            case \">=\":\n                text = `${viewColumnName}が${conditionalValue}以上`;\n                break;\n            default:\n                throw `サポートされていない条件演算子です`;\n        }\n        extractions.push({\n            \"conditionId\" : conditionId,\n            \"text\": text,\n        });\n    }\n    return extractions;\n","afterCode":""},{"functionNameJP":"【サブ】抽出条件を取得","functionNameEN":"_getConditions","parametersName":["viewId","queryParameters"],"parametersDataType":["number",{"string":"any"}],"returnValue":[{"conditionId":"string","savedConditionId":"number_nullable","queryParameterKey":"string_nullable","viewColumnType":"string","columnId":"string","viewColumnId":"string","conditionalExpression":"string","conditionalValue":"any"}],"functionId":"01HQ2KACQJ3TQ1QH6N489R2YE7","beforeCode":"\n\n\n\n","innerCode":"\n    const conditionInfoList = [];\n    //\n    //############################################################\n    // 予めデータベースに保存されている抽出条件を取り出す\n    const matrix = await runSqlReadOnly(\n        `SELECT\n            conditions.saved_condition_id AS savedConditionId,\n            \"d\" || conditions.view_column_id AS viewColumnId,\n            conditions.conditional_expression AS conditionalExpression,\n            conditions.conditional_value AS conditionalValue,\n            view_columns.view_column_type AS viewColumnType,\n            view_columns.column_path AS columnPath\n        FROM conditions\n        INNER JOIN view_columns\n            ON conditions.view_column_id = view_columns.view_column_id\n        WHERE view_columns.view_id = :viewId;`,\n        {\n            \":viewId\": viewId,\n        },\n    );\n    for( const { savedConditionId, viewColumnId, conditionalValue, viewColumnType, columnPath, conditionalExpression } of matrix ){\n        let value;\n        if( viewColumnType===\"RAW\" ){\n            const columnId = await pathToColumnId(columnPath);\n            value = await formatField( conditionalValue, columnId, false );\n        }\n        else{\n            // MAX や SUM などの集合関数の場合\n            if(isNaN(conditionalValue))continue;\n            value = Number(conditionalValue);\n        }\n        conditionInfoList.push({\n            \"conditionId\": \"e\" + savedConditionId,\n            \"savedConditionId\": savedConditionId,\n            \"queryParameterKey\": null,\n            \"viewColumnType\": viewColumnType,\n            \"columnId\": columnId,\n            \"viewColumnId\": viewColumnId,\n            \"conditionalExpression\": conditionalExpression,\n            \"conditionalValue\": value,\n        });\n    }\n    //\n    //############################################################\n    // その場で指定されたクエリパラメータ―から、抽出条件を求める\n    let viewColumns = await listViewColumns(viewId);\n    for( let i=0; i<viewColumns.length; i++ ){\n        const columnPath = viewColumns[i].columnPath;\n        viewColumns[i].pathLength = await getPathLength(columnPath);\n        viewColumns[i].columnId = await pathToColumnId(columnPath);\n    }\n    viewColumns = viewColumns.sort((a,b)=>{\n        if( a.pathLength > b.pathLength ){\n            return 1;\n        }\n        else{\n            return -1;\n        }\n    });\n    const buf = {\n        //  \"c78\": [ \"d45\", \"d99\" ],\n        //  \"c6\": [ \"d12\" ],\n    };\n    for( const { viewColumnId, columnId } of viewColumns ){\n        if( !buf[columnId] ){\n            buf[columnId] = [];\n        }\n        buf[columnId].push(viewColumnId);\n    }\n    for( const key in queryParameters ){\n        // クエリパラメータ―のキーは「p4c8」などの形式。\n        if (!/^p(\\d+)c(\\d+)$/.test(key)) continue;\n        const match = key.match(/\\d+/g);\n        if (!match || match.length!==2)continue;\n        const pageNumber = parseInt(match[0], 10);\n        const columnNumber = parseInt(match[1], 10);\n        const columnId = \"c\" + columnNumber;\n        if( !buf[columnId] ) continue;\n        if( !Array.isArray(buf[columnId]) ) continue;\n        const viewColumnId = buf[columnId][0];\n        const inputText = queryParameters[key];\n        buf[columnId].shift();  // 先頭を削除\n        conditionInfoList.push({\n            \"conditionId\": key,\n            \"savedConditionId\": null,\n            \"queryParameterKey\": key,\n            \"viewColumnType\": \"RAW\",\n            \"columnId\": columnId,\n            \"viewColumnId\": viewColumnId,\n            \"conditionalExpression\": \"=\",\n            \"conditionalValue\": await formatField( inputText, columnId, false ),\n        });\n    }\n    return conditionInfoList;\n","afterCode":""},{"functionNameJP":"条件値の候補を取得する","functionNameEN":"autoCorrectConditionalValue","parametersName":["viewColumnName","inputText"],"parametersDataType":["string","string"],"returnValue":["string"],"functionId":"01HQ38B7J2S6ATHKY11RZDAQ7C","beforeCode":"\n\n\n","innerCode":"\n    const viewColumnInfo = await getViewColumnFromName( viewColumnName );\n    const columnId = await pathToColumnId(viewColumnInfo.columnPath);\n    const tableId = await getTableId(columnId);\n    return await autoCorrect( tableId, columnId, inputText, {} );\n","afterCode":""},{"functionNameJP":"抽出条件を削除する","functionNameEN":"deleteCondition","parametersName":["targetConditionId","oldQueryParameters"],"parametersDataType":["string",{"string":"any"}],"returnValue":{"string":"any"},"functionId":"01HQ3E2B785ZFNW9NZ18R0CWHY","beforeCode":"\n\n\n\n","innerCode":"\n    const conditionInfoList = await _getConditions_core( viewId, oldQueryParameters );\n    const newQueryParameters = {};\n    for( const { conditionId, savedConditionId, queryParameterKey } of conditionInfoList ){\n        if(targetConditionId!==conditionId){\n            // 削除対象の「条件」ではない場合\n            if(oldQueryParameters[queryParameterKey]){\n                newQueryParameters[queryParameterKey] = oldQueryParameters[queryParameterKey];\n            }\n            continue;\n        }\n        // 削除対象の「条件」の場合\n        //\n        if(!savedConditionId){\n            // データベースに保存されていない場合（クエリパラメータ―で指定されていた場合）\n            continue;\n        }\n        // 抽出条件がデータベースに保存されている場合\n        await runSqlWriteOnly(\n            `DELETE FROM conditions\n                WHERE saved_condition_id = :savedConditionId;`,\n            {\n                \":savedConditionId\": savedConditionId,\n            },\n        );\n    }\n    return newQueryParameters;\n","afterCode":""},{"functionNameJP":"抽出条件を追加する","functionNameEN":"addCondition","parametersName":["viewColumnName","conditionalExpression","conditionalValue"],"parametersDataType":["string","string","string"],"returnValue":"void","functionId":"01HQ3ENGFHFKAZEVCDKRANH6RA","beforeCode":"\n\n\n\n","innerCode":"\n    switch( conditionalExpression ){\n        case \"LIKE\":\n            break;\n        case \"=\":\n            break;\n        case \"!=\":\n            break;\n        case \"<\":\n            break;\n        case \">\":\n            break;\n        case \"<=\":\n            break;\n        case \">=\":\n            break;\n        default:\n            throw `サポートされていない条件演算子です`;\n    }\n    const viewColumnInfo = await getViewColumnFromName( viewColumnName );\n    await runSqlWriteOnly(\n        `INSERT INTO conditions ( \"view_column_id\", \"conditional_expression\", \"conditional_value\" )\n            VALUES ( :viewColumnId, :conditionalExpression, :conditionalValue );`,\n        {\n            \":viewColumnId\": viewColumnInfo.viewColumnId,\n            \":conditionalExpression\": conditionalExpression,\n            \":conditionalValue\": conditionalValue,\n        },\n    );\n","afterCode":"\n"}]