[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n    await startUp(\"http://localhost:3000/\", true);\n    await close();\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"プログラム起動","functionNameEN":"startUp","parametersName":["localUrl","isDebug"],"parametersDataType":["string_nullable","boolean"],"returnValue":"void","functionId":"01HM3F8XKW1HFKGW5H7RFMYD0C","beforeCode":"\n\n\n  // displayColumns の例\n  //   [\n  //     {\n  //       displayColumnId: \"d28\",\n  //       type: \"RAW\",\n  //       path: \"main.c2 > c53 > c1\",\n  //       as: \"○○\",\n  //     },\n  //     {\n  //       displayColumnId: \"d66\",\n  //       type: \"COUNT\",           // 集合関数。RAW, SUM、MAX、MIN、AVG、COUNT のいずれか。関数を使用しない場合はRAWを代入する。\n  //       path: \"c89 > c67 > main\",\n  //       as: \"○○の件数\",\n  //     },\n  //     {\n  //       displayColumnId: \"d43\",\n  //       type: \"MAX\",\n  //       path: \"c45 > c56 > main\",\n  //       as: \"○○の最大値\",\n  //     }\n  //   ]\n  //\n  // conditions の例\n  //   [\n  //     {\n  //       displayColumnId: \"d66\",\n  //       type: \"=\",       // !=, =, >, <, <=, >= のいずれか\n  //       value: 0,\n  //     }\n  //   ]\n  //\n  // sortOrder の例\n  //   [\n  //     {\n  //       displayColumnId: \"d78\",\n  //       isAscending: true,\n  //     }\n  //   ]\n\n","innerCode":"\n    await startUp( localUrl, isDebug );   // 下層の関数を呼び出す\n    //\n    await reserveWord(\"display_columns\"); // 予約語に登録\n    await runSqlWriteOnly(\n        `CREATE TABLE IF NOT EXISTS display_columns (\n            \"display_column_id\" INTEGER PRIMARY KEY AUTOINCREMENT,\n            \"page_id\" INTEGER NOT NULL,\n            \"type\" TEXT NOT NULL,\n            \"path\" TEXT NOT NULL,\n            \"as\" TEXT NOT NULL,\n            \"excel_column_index\" INTEGER NOT NULL,\n            FOREIGN KEY (page_id) REFERENCES dynamic_lists(page_id),\n            UNIQUE (page_id, excel_column_index)\n        );`,\n        {},\n    );\n    //\n    await reserveWord(\"conditions\"); // 予約語に登録\n    await runSqlWriteOnly(\n        `CREATE TABLE IF NOT EXISTS conditions (\n            \"condition_id\" INTEGER PRIMARY KEY AUTOINCREMENT,\n            \"display_column_id\" INTEGER NOT NULL,\n            \"type\" TEXT NOT NULL,\n            FOREIGN KEY (display_column_id) REFERENCES display_columns(display_column_id)\n        );`,\n        {},\n    );\n    //\n    await reserveWord(\"sort_orders\"); // 予約語に登録\n    await runSqlWriteOnly(\n        `CREATE TABLE IF NOT EXISTS sort_orders (\n            \"display_column_id\" INTEGER PRIMARY KEY,\n            \"is_ascending\" INTEGER NOT NULL DEFAULT 1,\n            FOREIGN KEY (display_column_id) REFERENCES display_columns(display_column_id)\n        );`,\n        {},\n    );\n","afterCode":""},{"functionNameJP":"動的リストを作成","functionNameEN":"createDynamicList","parametersName":["pageId","tableId"],"parametersDataType":["number","string"],"returnValue":"void","functionId":"01HM3FA7KYR69753F0SEZNV80C","beforeCode":"\n\n\n\n","innerCode":"\n    const result = await createDynamicList( pageId );  // 下層の関数を実行する\n    await _deleteDisplayColumns( pageId );\n    //\n    // 自動的にカラムを表示設定にしてあげる\n    const columns = await listColumnsAll( tableId );\n    for( const { id, name, dataType, parentTableId } of columns ){\n        if( dataType !== \"POINTER\" ){\n            await _addDisplayColumn({ \n                pageId: pageId,\n                type: \"RAW\",\n                path: `main.${id}`,\n                as: name,\n            });\n            continue;\n        }\n        if( !parentTableId ){\n            throw `親テーブルが不明です。\\nテーブルID=${tableId}\\nカラムID=${id}`;\n        }\n        const parentColumnId = await getTitleColumnId( parentTableId );\n        if(!parentColumnId){\n            console.error(`タイトル列が設定されていません。${parentTableId}`);\n            continue;\n        }\n        await _addDisplayColumn({ \n            pageId: pageId,\n            type: \"RAW\",\n            path: `main.${id} > ${parentColumnId}`,\n            as: name,\n        });\n    }\n    return result;\n","afterCode":""},{"functionNameJP":"動的リストを削除","functionNameEN":"deleteDynamicList","parametersName":["pageId"],"parametersDataType":["number"],"returnValue":"void","functionId":"01HM3FBB33TCXTHW0Y5B2A3T0H","beforeCode":"\n\n\n\nasync function _addDisplayColumn({ pageId, type, path, as }){\n    // excelの空いている列を見つける\n    const matrix = await runSqlReadOnly(\n        `SELECT excel_column_index AS index\n            FROM display_columns\n            WHERE page_id = :pageId\n            ORDER BY excel_column_index ASC;`,\n        {\n            \":pageId\": pageId,\n        },\n    );\n    const numbers = new Set();\n    for( const {index} of matrix ){\n        numbers.add(index);\n    }\n    let excelColumnIndex;\n    for( let i=0; i<=numbers.size; i++ ){\n        if(!numbers.has(i)){\n            excelColumnIndex = i;\n            break;\n        }\n    }\n    //\n    await runSqlWriteOnly(\n      `INSERT INTO display_columns( page_id, type, path, as, excel_column_index )\n          VALUES ( :pageId, :type, :path, :as, :excelColumnIndex );`,\n        {\n            \":pageId\": pageId,\n            \":type\": type,\n            \":path\": path,\n            \":as\": as,\n            \":excelColumnIndex\": excelColumnIndex,\n        },\n    );\n}\n\n\n","innerCode":"\n    await _deleteDisplayColumns( pageId );\n    return await deleteDynamicList( pageId );  // 下層の関数を実行する\n","afterCode":"\n\n\n// 動的リストを削除\nasync function _deleteDisplayColumns( pageId ){\n    await runSqlWriteOnly(\n        `DELETE FROM sort_orders\n            WHERE display_column_id IN\n            (\n                SELECT display_column_id\n                FROM display_columns\n                WHERE page_id = :pageId\n            );`,\n        {\n            \":pageId\": pageId,\n        },\n    );\n    await runSqlWriteOnly(\n        `DELETE FROM conditions\n            WHERE display_column_id IN\n            (\n                SELECT display_column_id\n                FROM display_columns\n                WHERE page_id = :pageId\n            );`,\n        {\n            \":pageId\": pageId,\n        },\n    );\n    await runSqlWriteOnly(\n        `DELETE FROM display_columns\n            WHERE page_id = :pageId;`,\n        {\n            \":pageId\": pageId,\n        },\n    );\n}"},{"functionNameJP":"SQLクエリを生成","functionNameEN":"generateSQL","parametersName":["pageId","conditions"],"parametersDataType":["number",{}],"returnValue":{"sql":"string"},"functionId":"01HMP67P1V3BXP3SZ21D3JHS4X","beforeCode":"\n","innerCode":"\n  throw \"この関数は未実装です。\";\n","afterCode":"\n"}]