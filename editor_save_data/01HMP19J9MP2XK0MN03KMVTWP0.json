[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n    await startUp(\"http://localhost:3000/\", true);\n    await close();\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"プログラム起動","functionNameEN":"startUp","parametersName":["localUrl","isDebug"],"parametersDataType":["string_nullable","boolean"],"returnValue":"void","functionId":"01HM3F8XKW1HFKGW5H7RFMYD0C","beforeCode":"\n\n\n","innerCode":"\n    await startUp( localUrl, isDebug );   // 下層の関数を呼び出す\n    //\n    await reserveWord(\"joined_columns\"); // 予約語に登録\n    await runSqlWriteOnly(\n        `CREATE TABLE IF NOT EXISTS joined_columns (\n            \"joined_column_id\" INTEGER PRIMARY KEY AUTOINCREMENT,\n            \"page_id\" INTEGER NOT NULL,\n            \"joined_column_type\" TEXT NOT NULL,\n            \"column_path\" TEXT NOT NULL,\n            \"joined_column_name\" TEXT NOT NULL,\n            \"excel_column_index\" INTEGER NOT NULL,\n            FOREIGN KEY (page_id) REFERENCES joined_tables(page_id),\n            UNIQUE (page_id, excel_column_index)\n        );`,\n        {},\n    );\n    //\n    await reserveWord(\"conditions\"); // 予約語に登録\n    await runSqlWriteOnly(\n        `CREATE TABLE IF NOT EXISTS conditions (\n            \"condition_id\" INTEGER PRIMARY KEY AUTOINCREMENT,\n            \"joined_column_id\" INTEGER NOT NULL,\n            \"type\" TEXT NOT NULL,\n            FOREIGN KEY (joined_column_id) REFERENCES joined_columns(joined_column_id)\n        );`,\n        {},\n    );\n    //\n    await reserveWord(\"sort_orders\"); // 予約語に登録\n    await runSqlWriteOnly(\n        `CREATE TABLE IF NOT EXISTS sort_orders (\n            \"joined_column_id\" INTEGER PRIMARY KEY,\n            \"is_ascending\" INTEGER NOT NULL DEFAULT 1,\n            FOREIGN KEY (joined_column_id) REFERENCES joined_columns(joined_column_id)\n        );`,\n        {},\n    );\n","afterCode":""},{"functionNameJP":"結合済みテーブルを作成","functionNameEN":"createJoinedTable","parametersName":["pageId","tableId"],"parametersDataType":["number","string"],"returnValue":"void","functionId":"01HM3FA7KYR69753F0SEZNV80C","beforeCode":"\n\n\n\n","innerCode":"\n    const result = await createJoinedTable( pageId );  // 下層の関数を実行する\n    await _deleteJoinedColumns( pageId );\n    //\n    // 自動的に列を表示設定にしてあげる\n    const columns = await listColumnsAll( tableId );\n    for( const { id, name, dataType, parentTableId } of columns ){\n        if( dataType !== \"POINTER\" ){\n            // 列を表示設定にする\n            await _addJoinedColumn({ \n                pageId: pageId,\n                joinedColumnType: \"RAW\",\n                columnPath: `main.${id}`,\n                joinedColumnName: name,\n            });\n            continue;\n        }\n        if( !parentTableId ){\n            throw `親テーブルが不明です。\\nテーブルID=${tableId}\\nカラムID=${id}`;\n        }\n        const parentColumnId = await getTitleColumnId( parentTableId );\n        if(!parentColumnId){\n            console.error(`タイトル列が設定されていません。${parentTableId}`);\n            continue;\n        }\n        // 列を表示設定にする\n        await _addJoinedColumn({ \n            pageId: pageId,\n            joinedColumnType: \"RAW\",\n            columnPath: `main.${id} > ${parentColumnId}`,\n            joinedColumnName: name,\n        });\n    }\n    return result;\n","afterCode":""},{"functionNameJP":"結合済みテーブルを削除","functionNameEN":"deleteJoinedTable","parametersName":["pageId"],"parametersDataType":["number"],"returnValue":"void","functionId":"01HM3FBB33TCXTHW0Y5B2A3T0H","beforeCode":"\n\n\n// 列を表示設定にする\nasync function _addJoinedColumn({ pageId, joinedColumnType, columnPath, joinedColumnName }){\n    // excelの空いている列を見つける\n    const matrix = await runSqlReadOnly(\n        `SELECT excel_column_index AS index\n            FROM joined_columns\n            WHERE page_id = :pageId\n            ORDER BY excel_column_index ASC;`,\n        {\n            \":pageId\": pageId,\n        },\n    );\n    const numbers = new Set();\n    for( const {index} of matrix ){\n        numbers.add(index);\n    }\n    let excelColumnIndex;\n    for( let i=0; i<=numbers.size; i++ ){\n        if(!numbers.has(i)){\n            excelColumnIndex = i;\n            break;\n        }\n    }\n    // 列を表示設定にする\n    await runSqlWriteOnly(\n      `INSERT INTO joined_columns(\n            page_id,\n            joined_column_type,\n            column_path,\n            joined_column_name,\n            excel_column_index\n        )\n        VALUES (\n            :pageId,\n            :joinedColumnType,\n            :columnPath,\n            :joinedColumnName,\n            :excelColumnIndex\n        );`,\n        {\n            \":pageId\": pageId,\n            \":joinedColumnType\": joinedColumnType,\n            \":columnPath\": columnPath,\n            \":joinedColumnName\": joinedColumnName,\n            \":excelColumnIndex\": excelColumnIndex,\n        },\n    );\n}\n\n\n","innerCode":"\n    await _deleteJoinedColumns( pageId );\n    return await deleteJoinedTable( pageId );  // 下層の関数を実行する\n","afterCode":""},{"functionNameJP":"SQLクエリを生成","functionNameEN":"generateSQL","parametersName":["pageId"],"parametersDataType":["number"],"returnValue":{"sql":"string"},"functionId":"01HMP67P1V3BXP3SZ21D3JHS4X","beforeCode":"\n\n\n// 結合済みテーブルを削除\nasync function _deleteJoinedColumns( pageId ){\n    // 外部キー制約があるため、消す順番に注意！\n    await runSqlWriteOnly(\n        `DELETE FROM sort_orders\n            WHERE joined_column_id IN\n            (\n                SELECT joined_column_id\n                FROM joined_columns\n                WHERE page_id = :pageId\n            );`,\n        {\n            \":pageId\": pageId,\n        },\n    );\n    await runSqlWriteOnly(\n        `DELETE FROM conditions\n            WHERE joined_column_id IN\n            (\n                SELECT joined_column_id\n                FROM joined_columns\n                WHERE page_id = :pageId\n            );`,\n        {\n            \":pageId\": pageId,\n        },\n    );\n    await runSqlWriteOnly(\n        `DELETE FROM joined_columns\n            WHERE page_id = :pageId;`,\n        {\n            \":pageId\": pageId,\n        },\n    );\n}\n\n\n\n","innerCode":"\n    const joinedColumns = await runSqlReadOnly(\n        `SELECT\n            joined_column_id AS joinedColumnId,\n            joined_column_type AS joinedColumnType,\n            column_path AS columnPath,\n            joined_column_name AS joinedColumnName,\n            excel_column_index AS excelColumnIndex\n        FROM joined_columns\n        WHERE page_id = :pageId\n        ORDER BY excel_column_index ASC;`,\n        {\n            \":pageId\": pageId,\n        },\n    );\n    const matrix = await runSqlReadOnly(\n        `SELECT\n            joined_column_id AS joinedColumnId,\n            joined_column_type AS joinedColumnType,\n            column_path AS columnPath,\n            joined_column_name AS joinedColumnName,\n            excel_column_index AS excelColumnIndex\n        FROM joined_columns\n        WHERE page_id = :pageId\n        ORDER BY excel_column_index ASC;`,\n        {\n            \":pageId\": pageId,\n        },\n    );\n","afterCode":"\n\n\n// joinedColumns の例\n//   [\n//     {\n//       joinedColumnId: \"d28\",\n//       joinedColumnType: \"RAW\",\n//       columnPath: \"main.c2 > c53 > c1\",\n//       joinedColumnName: \"○○\",\n//     },\n//     {\n//       joinedColumnId: \"d66\",\n//       joinedColumnType: \"COUNT\",           // 集合関数。RAW, SUM、MAX、MIN、AVG、COUNT のいずれか。関数を使用しない場合はRAWを代入する。\n//       columnPath: \"c89 > c67 > main\",\n//       joinedColumnName: \"○○の件数\",\n//     },\n//     {\n//       joinedColumnId: \"d43\",\n//       joinedColumnType: \"MAX\",\n//       columnPath: \"c45 > c56 > main\",\n//       joinedColumnName: \"○○の最大値\",\n//     }\n//   ]\n//\n// conditions の例\n//   [\n//     {\n//       joinedColumnId: \"d66\",\n//       conditionalExpression: \"=\",       // !=, =, >, <, <=, >= のいずれか\n//       conditionValue: 0,\n//     }\n//   ]\n//\n// sortOrder の例\n//   [\n//     {\n//       joinedColumnId: \"d78\",\n//       isAscending: true,\n//     }\n//   ]"}]