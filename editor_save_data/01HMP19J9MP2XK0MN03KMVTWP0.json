[
    {
        "functionId": "test",
        "functionNameJP": "テストコード",
        "functionNameEN": "test",
        "beforeCode": "",
        "innerCode": "\n  await startUp(\"http://localhost:3000/\", true);\n  //\n  const { tableId: tableId1 } = await createTable(\"学年\");\n  const { columnId: columnId1 } = await createColumn( tableId1, \"学年\", \"INTEGER\", null );\n  // 見出しの役割を果たすカラムを登録する\n  await setTitleColumn( columnId1 );\n  const { recordId: recordId } = await createRecord( tableId1, {\n    [columnId1]: 3,\n  });\n  //\n  const { tableId: tableId2 } = await createTable(\"名簿\");\n  const { columnId: columnId2  } = await createColumn( tableId2, \"学年\", \"POINTER\", tableId1 );\n  const { columnId: columnId3  } = await createColumn( tableId2, \"氏名\", \"TEXT\", null );\n  await createRecord( tableId2, {\n    [columnId2]: recordId,\n    [columnId3]: \"田中太郎\",\n  });\n  //\n  // ページを作成\n  const { pageId: pageId1 } = await createPage( 1, \"ページ１\" );\n  //\n  // ページに動的リストを追加\n  const { viewId: viewId1 } = await createView( pageId1, tableId2 );\n  //\n  const { sql, parameters } = await generateSQL( viewId1 );\n  const matrix = await runSqlReadOnly(sql,parameters);\n  console.log( matrix );\n  if( matrix.length !== 1 ){\n    throw \"テスト結果が想定とは異なります。\";\n  }\n  if( matrix[0]['学年'] !== 3 ){\n    throw \"テスト結果が想定とは異なります。\";\n  }\n  if( matrix[0]['氏名'] !== \"田中太郎\" ){\n    throw \"テスト結果が想定とは異なります。\";\n  }\n  await close();\n",
        "afterCode": "",
        "parametersName": [],
        "parametersDataType": [],
        "returnValue": "void"
    },
    {
        "functionNameJP": "プログラム起動",
        "functionNameEN": "startUp",
        "parametersName": [
            "localUrl",
            "isDebug"
        ],
        "parametersDataType": [
            "string_nullable",
            "boolean"
        ],
        "returnValue": "void",
        "functionId": "01HM3F8XKW1HFKGW5H7RFMYD0C",
        "beforeCode": "\n\n\n",
        "innerCode": "\n    await startUp( localUrl, isDebug );   // 下層の関数を呼び出す\n    //\n    await reserveWord(\"view_columns\"); // 予約語に登録\n    await runSqlWriteOnly(\n        `CREATE TABLE IF NOT EXISTS view_columns (\n            \"view_column_id\" INTEGER PRIMARY KEY AUTOINCREMENT,\n            \"view_id\" INTEGER NOT NULL,\n            \"view_column_type\" TEXT NOT NULL,\n            \"column_path\" TEXT NOT NULL,\n            \"view_column_name\" TEXT NOT NULL,\n            \"excel_column_index\" INTEGER NOT NULL,\n            FOREIGN KEY (view_id) REFERENCES views(view_id),\n            UNIQUE (view_id, excel_column_index)\n        );`,\n        {},\n    );\n    //\n    await reserveWord(\"conditions\"); // 予約語に登録\n    await runSqlWriteOnly(\n        `CREATE TABLE IF NOT EXISTS conditions (\n            \"condition_id\" INTEGER PRIMARY KEY AUTOINCREMENT,\n            \"view_column_id\" INTEGER NOT NULL,\n            \"conditional_expression\" TEXT NOT NULL,\n            FOREIGN KEY (view_column_id) REFERENCES view_columns(view_column_id)\n        );`,\n        {},\n    );\n    //\n    await reserveWord(\"sort_orders\"); // 予約語に登録\n    await runSqlWriteOnly(\n        `CREATE TABLE IF NOT EXISTS sort_orders (\n            \"view_column_id\" INTEGER PRIMARY KEY,\n            \"is_ascending\" INTEGER NOT NULL DEFAULT 1,\n            FOREIGN KEY (view_column_id) REFERENCES view_columns(view_column_id)\n        );`,\n        {},\n    );\n",
        "afterCode": ""
    },
    {
        "functionNameJP": "ビューを作成",
        "functionNameEN": "createView",
        "parametersName": [
            "pageId",
            "tableId"
        ],
        "parametersDataType": [
            "number",
            "string"
        ],
        "returnValue": "void",
        "functionId": "01HM3FA7KYR69753F0SEZNV80C",
        "beforeCode": "\n\n\n\n",
        "innerCode": "\n    const sqlQuery = await getSimpleSQL_core( tableId );\n    const result = await createView( pageId, tableId, sqlQuery );  // 下層の関数を実行する\n    //\n    // 自動的に列を表示設定にしてあげる\n    await _deleteViewColumns( result.viewId );\n    const columns = await listColumnsAll( tableId );\n    for( const { id, name, dataType, parentTableId } of columns ){\n        // 文字列からアンダーバー（_）以降を切り取る\n        const columnName = _cutStringAfterUnderscore(name);\n        if( dataType !== \"POINTER\" ){\n            // 列を表示設定にする\n            await addViewColumn_core(\n                result.viewId,\n                \"RAW\",\n                `main.${id}`,\n                columnName,\n            );\n            continue;\n        }\n        if( !parentTableId ){\n            throw `親テーブルが不明です。\\nテーブルID=${tableId}\\nカラムID=${id}`;\n        }\n        const parentColumnId = await getTitleColumnId( parentTableId );\n        if(!parentColumnId){\n            console.error(`createView > タイトル列が設定されていません。${parentTableId}`);\n            continue;\n        }\n        // 列を表示設定にする\n        await addViewColumn_core(\n            result.viewId,\n            \"RAW\",\n            `main.${id} > ${parentColumnId}`,\n            columnName,\n        );\n    }\n    return result;\n",
        "afterCode": ""
    },
    {
        "functionNameJP": "ビューを削除",
        "functionNameEN": "deleteView",
        "parametersName": [
            "viewId"
        ],
        "parametersDataType": [
            "number"
        ],
        "returnValue": "void",
        "functionId": "01HM3FBB33TCXTHW0Y5B2A3T0H",
        "beforeCode": "\n\n// 文字列からアンダーバー（_）以降を切り取る関数\nfunction _cutStringAfterUnderscore(inputString) {\n    // アンダーバーのインデックスを検索\n    const underscoreIndex = inputString.indexOf('_');\n    // アンダーバーが見つかった場合\n    if (underscoreIndex !== -1) {\n        // アンダーバー以降の部分を取得して出力\n        const resultString = inputString.substring(underscoreIndex + 1);\n        return resultString;\n    } else {\n        // アンダーバーが見つからなかった場合はそのまま出力\n        return inputString;\n    }\n}\n\n\n",
        "innerCode": "\n    await _deleteViewColumns( viewId );\n    return await deleteView( viewId );  // 下層の関数を実行する\n",
        "afterCode": ""
    },
    {
        "functionNameJP": "SQLクエリを生成",
        "functionNameEN": "generateSQL",
        "parametersName": [
            "viewId"
        ],
        "parametersDataType": [
            "number"
        ],
        "returnValue": {
            "sql": "string"
        },
        "functionId": "01HMP67P1V3BXP3SZ21D3JHS4X",
        "beforeCode": "\n\n\n// ビューを削除\nasync function _deleteViewColumns( viewId ){\n    // 外部キー制約があるため、消す順番に注意！\n    await runSqlWriteOnly(\n        `DELETE FROM sort_orders\n            WHERE sort_orders.view_column_id IN\n            (\n                SELECT view_columns.view_column_id\n                FROM view_columns\n                WHERE view_columns.view_id = :viewId\n            );`,\n        {\n            \":viewId\": viewId,\n        },\n    );\n    await runSqlWriteOnly(\n        `DELETE FROM conditions\n            WHERE view_column_id IN\n            (\n                SELECT view_column_id\n                FROM view_columns\n                WHERE view_id = :viewId\n            );`,\n        {\n            \":viewId\": viewId,\n        },\n    );\n    await runSqlWriteOnly(\n        `DELETE FROM view_columns\n            WHERE view_id = :viewId;`,\n        {\n            \":viewId\": viewId,\n        },\n    );\n}\n\n\n\n",
        "innerCode": "\n    const tableId = await getTableFromView( viewId );\n    if( !tableId ){\n        throw `指定されたページには、動的リストが登録されていません。\\nviewId = ${viewId}`;\n    }\n    const viewColumns = await runSqlReadOnly(\n        `SELECT\n            \"d\" || view_column_id AS viewColumnId,\n            view_column_type AS viewColumnType,\n            column_path AS columnPath,\n            view_column_name AS viewColumnName,\n            excel_column_index AS excelColumnIndex\n        FROM view_columns\n        WHERE view_id = :viewId\n        ORDER BY excel_column_index ASC;`,\n        {\n            \":viewId\": viewId,\n        },\n    );\n    const conditionInfoList = await runSqlReadOnly(\n        `SELECT\n            \"d\" || conditions.view_column_id AS viewColumnId,\n            conditions.conditional_expression AS conditionalExpression\n        FROM conditions\n        INNER JOIN view_columns\n            ON conditions.view_column_id = view_columns.view_column_id\n        WHERE view_columns.view_id = :viewId;`,\n        {\n            \":viewId\": viewId,\n        },\n    );\n    const sortOrders = await runSqlReadOnly(\n        `SELECT\n            \"d\" || sort_orders.view_column_id AS viewColumnId,\n            sort_orders.is_ascending AS isAscending\n        FROM sort_orders\n        INNER JOIN view_columns\n            ON sort_orders.view_column_id = view_columns.view_column_id\n        WHERE view_columns.view_id = :viewId;`,\n        {\n            \":viewId\": viewId,\n        },\n    );\n    const { sql, parameters } = await generateSQL(\n        tableId,\n        viewColumns,\n        conditionInfoList,\n        sortOrders\n    );\n    return { sql, parameters };\n",
        "afterCode": ""
    },
    {
        "functionNameJP": "カラムを作成",
        "functionNameEN": "createColumn",
        "parametersName": [
            "tableId",
            "columnName",
            "dataType",
            "parentTableId"
        ],
        "parametersDataType": [
            "string",
            "string",
            "string",
            "string_nullable"
        ],
        "returnValue": {
            "message": "string",
            "columnId": "string"
        },
        "functionId": "01HMTKZQT8DD7R8S03Q0EV0F0D",
        "beforeCode": "\n\n\n",
        "innerCode": "\n    const result = await createColumn( tableId, columnName, dataType, parentTableId );    // 下層の関数を呼び出す\n    //\n    const viewIdList = await listViewsFromTableId( tableId );\n    if( dataType !== \"POINTER\" ){\n        // 列を表示設定にする\n        for( const viewId of viewIdList ){\n            await addViewColumn_core({ \n                viewId: viewId,\n                viewColumnType: \"RAW\",\n                columnPath: `main.${result.columnId}`,\n                viewColumnName: columnName,\n            });\n        }\n        return result;\n    }\n    const parentColumnId = await getTitleColumnId( parentTableId );\n    if(!parentColumnId){\n        console.error(`タイトル列が設定されていません。${parentTableId}`);\n        return result;\n    }\n    // 列を表示設定にする\n    for( const viewId of viewIdList ){\n        await addViewColumn_core({ \n            viewId: viewId,\n            viewColumnType: \"RAW\",\n            columnPath: `main.${result.columnId} > ${parentColumnId}`,\n            viewColumnName: columnName,\n        });\n    }\n    return result;\n",
        "afterCode": ""
    },
    {
        "functionNameJP": "結合済み列を作成",
        "functionNameEN": "addViewColumn",
        "parametersName": [
            "viewId",
            "viewColumnType",
            "columnPath",
            "viewColumnName"
        ],
        "parametersDataType": [
            "number",
            "string",
            "string",
            "string"
        ],
        "returnValue": "void",
        "functionId": "01HMTMFZVWWVC9Q4WW0WFKRN1Q",
        "beforeCode": "\n\n\n\n",
        "innerCode": "\n    if( typeof viewId !== \"number\" || isNaN(viewId) ){\n        throw `ページIDが数値ではありません`;\n    }\n    //\n    // excelの空いている列を見つける\n    const matrix = await runSqlReadOnly(\n        `SELECT excel_column_index AS excelColumnIndex\n            FROM view_columns\n            WHERE view_id = :viewId\n            ORDER BY excel_column_index ASC;`,\n        {\n            \":viewId\": viewId,\n        },\n    );\n    const numbers = new Set();\n    for( const { excelColumnIndex } of matrix ){\n        numbers.add( excelColumnIndex );\n    }\n    let excelColumnIndex;\n    for( let i=0; i<=numbers.size; i++ ){\n        if(!numbers.has(i)){\n            excelColumnIndex = i;\n            break;\n        }\n    }\n    // 列を表示設定にする\n    await runSqlWriteOnly(\n        `INSERT INTO view_columns(\n            view_id,\n            view_column_type,\n            column_path,\n            view_column_name,\n            excel_column_index\n        ) VALUES (\n            :viewId,\n            :viewColumnType,\n            :columnPath,\n            :viewColumnName,\n            :excelColumnIndex\n        );`,\n        {\n            \":viewId\": viewId,\n            \":viewColumnType\": viewColumnType,\n            \":columnPath\": columnPath,\n            \":viewColumnName\": viewColumnName,\n            \":excelColumnIndex\": excelColumnIndex,\n        },\n    );\n",
        "afterCode": ""
    },
    {
        "functionNameJP": "最低限のSQLクエリを生成する",
        "functionNameEN": "getSimpleSQL",
        "parametersName": [
            "tableId"
        ],
        "parametersDataType": [
            "string"
        ],
        "returnValue": "string",
        "functionId": "01HMX9F22NM272B747E3WQ06T8",
        "beforeCode": "\n\n\n\n",
        "innerCode": "\n    // SQLクエリを生成する\n    const viewColumns = [];\n    const columns = await listColumnsAll( tableId );\n    for( let i=0; i<columns.length; i++ ){\n        const { id, name, dataType, parentTableId } = columns[i];\n        //\n        // 文字列からアンダーバー（_）以降を切り取る\n        const columnName = _cutStringAfterUnderscore(name);\n        if( dataType !== \"POINTER\" ){\n            // 列を表示設定にする\n            viewColumns.push({\n                viewColumnId: \"d\"+i,\n                viewColumnType: \"RAW\",\n                columnPath: `main.${id}`,\n                viewColumnName: columnName,\n            });\n            continue;\n        }\n        if( !parentTableId ){\n            throw `親テーブルが不明です。\\nテーブルID=${tableId}\\nカラムID=${id}`;\n        }\n        const parentColumnId = await getTitleColumnId( parentTableId );\n        if(!parentColumnId){\n            console.error(`createView > タイトル列が設定されていません。${parentTableId}`);\n            continue;\n        }\n        // 列を表示設定にする\n        viewColumns.push({\n            viewColumnId: \"d\"+i,\n            viewColumnType: \"RAW\",\n            columnPath: `main.${id} > ${parentColumnId}`,\n            viewColumnName: columnName,\n        });\n    }\n    const { sql: sqlQuery } = await generateSQL( tableId, viewColumns, [], [] );\n    return sqlQuery;\n",
        "afterCode": "\n"
    }
]