[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n    await startUp(\"http://localhost:3000/\", true);\n    await openExcel( \"172.0.0.1\", 1, {} );\n    await close();\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"Excelを開く","functionNameEN":"openExcel","parametersName":["clientIpAddress","pageId","queryParameters"],"parametersDataType":["string","number",{"string":"any"}],"returnValue":{"fileContents":"any","fileName":"string"},"functionId":"01HPPGK7K8XK2B1158A2JBHSXE","beforeCode":"\n\n\n\nimport fs from 'fs';\nimport path from 'path';\nimport chokidar from 'chokidar';\nimport childProcess from 'child_process';\nimport iconv from 'iconv-lite';\n\nconst watchers = {};\n\n","innerCode":"\n    const { pageName } = await getPageInfo( pageId );\n    //\n    // テンプレートを取得する\n    const templateData = await getExcelTemplate( pageId );\n    //\n    // データを取得する\n    const dataList = await getPageDataForExcel( pageId, queryParameters );\n    //\n    // Excelファイルに情報を追記する\n    const fileData = await updateExcel( templateData, dataList );\n    //\n    const serverIpAddress = await getLocalIp();\n    if( clientIpAddress !== serverIpAddress && clientIpAddress!==\"127.0.0.1\" ){\n        // 子機からシステムにアクセスしている場合、Excelをダウンロードさせる\n        const fileName = pageName + \"(閲覧専用).xlsm\";\n        return {\n            \"fileContents\": fileData,\n            \"fileName\": fileName,\n        };\n    }\n    // 親機からシステムにアクセスしている場合、Excelアプリを起動する\n    //\n    const fileName = pageName + \"(編集可).xlsm\";\n    if( watchers[fileName] ){\n        // ファイルの監視を停止する\n        await watchers[fileName].close();\n    }\n    //\n    // Excelデータをファイルとして保存する\n    const cacheDirPath = await getPath(\"CACHE\");\n    const filePath = path.join( cacheDirPath, fileName );\n    try{\n        await fs.promises.writeFile( filePath, fileData );\n    }\n    catch (error) {\n        console.error(`既にファイルを開いています。Excelファイル「${fileName}」を閉じて再試行してください。`);\n        throw `既にファイルを開いています。Excelファイル「${fileName}」を閉じて再試行してください。`;\n    }\n    //\n    // ファイルの監視をスタートする\n    const watcher = chokidar.watch(filePath, {\n        persistent: true,\n    });\n    watchers[fileName] = watcher;\n    await new Promise((resolve, reject) => watcher.on('ready', resolve ));\n    watcher.on('change', function (filePath, stats) {\n        console.log(`\\nExcelファイルが編集されました。\\n${filePath}`);\n        _handleEditExcelFile_core( filePath, pageId );\n    });\n    watcher.on('error', function (path) {\n        //console.error(`\\nExcelファイルの監視中にエラーが発生しました。\\n${path}`);\n    });\n    await _launchExcelApp_core( filePath );\n    return {\n        \"fileContents\": null,\n        \"fileName\": fileName,\n    };\n","afterCode":""},{"functionNameJP":"プログラム起動","functionNameEN":"startUp","parametersName":["localUrl","isDebug"],"parametersDataType":["string_nullable","boolean"],"returnValue":"void","functionId":"01HPTB2ABR1MC6W49BJQRV09SS","beforeCode":"\n\n\n\n\n","innerCode":"\n  await startUp( localUrl, isDebug ); // 下層の関数を呼び出す\n","afterCode":""},{"functionNameJP":"バックエンドプログラム終了","functionNameEN":"close","parametersName":[],"parametersDataType":[],"returnValue":"void","functionId":"01HPTBKX1WWC08BEJWC5F68H9H","beforeCode":"\n\n\n\n","innerCode":"\n  for(const fileName in watchers){\n    await watchers[fileName].close();\n  }\n  await close(); // 下層の関数を呼び出す\n","afterCode":""},{"functionNameJP":"【サブ】Excelアプリを起動","functionNameEN":"_launchExcelApp","parametersName":["filePath"],"parametersDataType":["string"],"returnValue":"void","functionId":"01HPTBP0CE62FVJQ5HDGD6G454","beforeCode":"\n\n\n\n","innerCode":"\n    if(!fs.existsSync(filePath)){\n        throw `ファイルが存在しません`;\n    }\n    const command = `\"C:\\\\Program Files\\\\Microsoft Office\\\\root\\\\Office16\\\\EXCEL.EXE\" \"${filePath}\"`;\n    childProcess.exec(\n        command,\n        {encoding:\"Shift_JIS\"},\n        (err, stdout, stderr) => {\n            if (err) {\n                console.error(`stderr:${iconv.decode(stderr,\"Shift_JIS\")}`);\n                console.error(command);\n                return;\n            }\n            // console.log(`stdout:${iconv.decode(stdout,\"Shift_JIS\")}`);\n        }\n    );\n","afterCode":""},{"functionNameJP":"【サブ】ファイルが編集されたとき","functionNameEN":"_handleEditExcelFile","parametersName":["filePath","pageId"],"parametersDataType":["string","number"],"returnValue":"void","functionId":"01HPTBXJWDWMY1DZJFRSQQ0303","beforeCode":"\n\n","innerCode":"\n  \n","afterCode":"\n"}]