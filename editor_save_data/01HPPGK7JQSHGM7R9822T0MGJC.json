[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n    await startUp(\"http://localhost:3000/\", true);\n    await openExcel( 1, {} );\n    await close();\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"Excelを開く","functionNameEN":"openExcel","parametersName":["clientIpAddress","pageId","queryParameters"],"parametersDataType":["string","number",{"string":"any"}],"returnValue":{"fileContents":"any","fileName":"string"},"functionId":"01HPPGK7K8XK2B1158A2JBHSXE","beforeCode":"\n\n\nimport fs from 'fs';\nimport path from 'path';\n\n","innerCode":"\n    const templateData = await getExcelTemplate( pageId );\n    const { pageName } = await getPageInfo( pageId );\n    const serverIpAddress = await getLocalIp();\n    if( clientIpAddress !== serverIpAddress && clientIpAddress!==\"127.0.0.1\" ){\n        // 子機からシステムにアクセスしている場合、Excelをダウンロードさせる\n        const fileName = pageName + \"(閲覧専用).xlsm\";\n        return {\n            \"fileContents\": templateData,\n            \"fileName\": fileName,\n        };\n    }\n    // 親機からシステムにアクセスしている場合、Excelアプリを起動する\n    const fileName = pageName + \"(書き換えた内容が反映されます).xlsm\";\n    const cacheDirPath = await getPath(\"CACHE\");\n    const filePath = path.join( cacheDirPath, fileName );\n    try{\n        await fs.promises.writeFile( filePath, templateData );\n    }\n    catch (error) {\n        console.error(`\\nExcelファイルの書き出し中にエラーが発生しました`);\n        throw error;\n    }\n    await openExcel( filePath );\n    return {\n        \"fileContents\": null,\n        \"fileName\": fileName,\n    };\n","afterCode":"\n"}]