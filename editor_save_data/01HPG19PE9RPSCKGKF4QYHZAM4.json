[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"テーブル名を入力させる","functionNameEN":"autoCorrectTableName","parametersName":["inputText"],"parametersDataType":["string"],"returnValue":["string"],"functionId":"01HPG1DDVAGZ8HYSVRGW2CPF84","beforeCode":"\n\nlet cacheTableNames = {};\n\n","innerCode":"\n  // もしキャッシュデータが残っていたら、計算せずにそのデータを返す。\n  if(cacheTableNames[inputText] ){\n    return cacheTableNames[inputText];\n  }\n  //\n  // テーブル名を全て取得する\n  const tableNames1 = await listTableNamesAll();\n  //\n  // 入力された文字と部分一致するテーブル名だけに絞り込む\n  const tableNames2 = await autoCorrectFromArray( inputText, tableNames1 );\n  //\n  // 配列の長さを最大20件に制限する\n  const tableNames3 = [];\n  for( let i=0; (i<20)&&(i<tableNames2.length); i++){\n    tableNames3[i] = tableNames2[i];\n  }\n  //\n  // 次回の処理を高速化するために、キャッシュデータを残す\n  cacheTableNames[inputText] = tableNames3;\n  return tableNames3;\n","afterCode":""},{"functionNameJP":"カラム名を入力させる","functionNameEN":"autoCorrectColumnName","parametersName":["inputText","tableName"],"parametersDataType":["string","string"],"returnValue":["string"],"functionId":"01HPG1H449Y6V23EMVFKRRC5TN","beforeCode":"\n\n","innerCode":"\n  const columns = await listColumnsAll( tableId );\n  const columnNames = columns.map( ({name})=>name );\n  return columnNames;\n","afterCode":""},{"functionNameJP":"インメモリキャッシュを削除する","functionNameEN":"clearCache","parametersName":[],"parametersDataType":[],"returnValue":"void","functionId":"01HPGBHBR0DB5M2N8718KGJ1ED","beforeCode":"\n\n","innerCode":"\n    await _reload();    // メモリに再読み込み\n    return await clearCache();   // 下層の関数を呼び出す\n","afterCode":"\n\n\n// 【サブ】メモリに再読み込み\nasync function _reload(  ){\n  cacheTableNames = {};\n}\n"}]