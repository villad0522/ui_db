[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n  const queryString = await convertQuery({\n    \"a\":32\n  });\n  if(queryString!==\"a=32\"){\n    throw `クエリパラメータ―に変換する関数が、想定とは異なる動作をしています。`;\n  }\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"APIを実行する関数","functionNameEN":"runApi","parametersName":["httpMethod","endpointPath","queryParameters","requestBody","isRequestFormData","isResponseFormData"],"parametersDataType":["string","string",{"string":"any"},{"string":"any"},"boolean","boolean"],"returnValue":{"string":"any"},"functionId":"01HMKRGBMXV1SASJ6C69H67T46","beforeCode":"\n\n\n\n","innerCode":"\n  const apiInfo = await getEndpointInfo( endpointPath );\n  switch(apiInfo.commandName){\n    //======================================================================\n    case \"START_UP\":{\n      await startUp( null, false );\n      return {\n        \"userMessage\": \"再接続しました。\"\n      };\n    }\n    //======================================================================\n    case \"CLEAR_CACHE\":{\n      await clearCache();\n      return {\n        \"userMessage\": \"キャッシュデータを削除しました。\"\n      };\n    }\n    //======================================================================\n    case \"LIST_TABLES\":{\n      const { tables, total } = await listTables(\n        queryParameters[\"page_tables\"],\n        35,\n        false, //isTrash\n      );\n      return {\n        \"tables\": tables,\n        \"tables_total\": total,\n      };\n    }\n    //======================================================================\n    case \"LIST_COLUMNS\":{\n      const { columns, total } = await listColumnsForGUI(\n        queryParameters[\"table\"],\n        queryParameters[\"page_columns\"],\n        35,\n        false, //isTrash\n      );\n      return {\n        \"columns\": columns,\n        \"columns_total\": total,\n      };\n    }\n    //======================================================================\n    case \"CREATE_TABLE\":{\n      const { tableId, message } = await createTable( requestBody[\"tableName\"] );\n      return {\n        \"tableId\": tableId,\n        \"userMessage\": message,\n        \"nextUrl\": \"../\",\n      };\n    }\n    //======================================================================\n    case \"CREATE_PRIMITIVE_COLUMN\":{\n      const { columnId, message } = await createColumn(\n        queryParameters[\"table\"],\n        requestBody[\"columnName\"],\n        requestBody[\"dataType\"],\n        null\n      );\n      return {\n        \"columnId\": columnId,\n        \"userMessage\": message,\n        \"nextUrl\": `../?table=${queryParameters[\"table\"]}`,\n      };\n    }\n    //======================================================================\n    case \"CREATE_POINTER_COLUMN\":{\n      const { columnId, message } = await createColumn(\n        queryParameters[\"table\"],\n        requestBody[\"columnName\"],\n        \"POINTER\",\n        requestBody[\"parentTableId\"]\n      );\n      return {\n        \"columnId\": columnId,\n        \"userMessage\": message,\n        \"nextUrl\": `../?table=${queryParameters[\"table\"]}`,\n      };\n    }\n    //======================================================================\n    case \"UPDATE_TABLE_NAME\":{\n      const message = await updateTableName(\n        requestBody[\"tables\"],\n      );\n      return {\n        \"userMessage\": message,\n        \"nextUrl\": \"../\",\n      };\n    }\n    //======================================================================\n    case \"UPDATE_COLUMN_NAME\":{\n      const message = await updateColumnName(\n        requestBody[\"columns\"],\n      );\n      return {\n        \"userMessage\": message,\n        \"nextUrl\": `../?table=${queryParameters[\"table\"]}`,\n      };\n    }\n    //======================================================================\n    case \"REGENERATE_PAGE\":{\n      const pageId = Number(queryParameters[\"page_id\"]);\n      await regeneratePage( pageId );\n      return {\n        \"nextUrl\": `/custom/${pageId}/index.html?` + await convertQuery_core(queryParameters),\n      };\n    }\n    //======================================================================\n    case \"CREATE_PAGE\":{\n      const parentId = Number(queryParameters[\"page_id\"]);\n      await createPage( parentId );\n      return {\n        \"nextUrl\": \"./?\" + await convertQuery_core(queryParameters),\n      };\n    }\n    //======================================================================\n    case \"RENAME_PAGE\":{\n      const pageId = Number(queryParameters[\"page_id\"]);\n      const pageName = requestBody[\"pageName\"];\n      const memo = requestBody[\"memo\"] ?? \"\";\n      await updatePageName( pageId, pageName, memo );\n      return {\n        \"nextUrl\": `/custom/${pageId}/index.html?` + await convertQuery_core(queryParameters),\n      };\n    }\n    //======================================================================\n    case \"DELETE_PAGE\":{\n      const pageId = Number(queryParameters[\"page_id\"]);\n      await deletePage( pageId );\n      return {\n        \"nextUrl\": \"./?\" + await convertQuery_core(queryParameters),\n      };\n    }\n    //======================================================================\n    case \"COPY_PAGE\":{\n      const pageId = Number(queryParameters[\"page_id\"]);\n      await copyPage( pageId );\n      return {};\n    }\n    //======================================================================\n    case \"CUT_PAGE\":{\n      const pageId = Number(queryParameters[\"page_id\"]);\n      await cutPage( pageId );\n      return {};\n    }\n    //======================================================================\n    case \"PASTE_PAGE\":{\n      const parentPageId = Number(queryParameters[\"page_id\"]);\n      const afterPageId = Number(queryParameters[\"after_id\"]);\n      await pastePage( parentPageId, afterPageId );\n      return {\n        \"nextUrl\": \"./?\" + await convertQuery_core(queryParameters),\n      };\n    }\n    //======================================================================\n    case \"GET_PAGE_INFO\":{\n      const pageId = Number(queryParameters[\"page_id\"]);\n      const { pageName, memo } = await getPageInfo( pageId );\n      const staticChildren = await listStaticChildren( pageId );\n      const views = await listChildrenView( pageId );\n      const breadcrumbs = await getBreadcrumbs( pageId );\n      return {\n        \"pageName\": pageName,\n        \"memo\": memo ?? \"\",\n        \"breadcrumbs\": breadcrumbs,\n        \"breadcrumbs_total\": breadcrumbs.length,\n        \"staticChildren\": staticChildren,\n        \"staticChildren_total\": staticChildren.length,\n        \"views\": views,\n        \"views_total\": views.length,\n        \"copyingPageId\": await getCopyingPage(),\n        \"cuttingPageId\": await getCuttingPage()\n      };\n    }\n    //======================================================================\n    default:\n      throw `サポートされていないAPIコマンドです。\\ncommandName = ${apiInfo.commandName}`;\n  }\n","afterCode":""},{"functionNameJP":"連想配列をクエリパラメータに変換","functionNameEN":"convertQuery","parametersName":["obj"],"parametersDataType":[{"string":"any"}],"returnValue":"string","functionId":"01HMZVAKBSB00KYFS7PDFKEB1P","beforeCode":"\n\n\n\n","innerCode":"\n  return Object.keys(obj)\n    .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(obj[key])}`)\n    .join('&');\n","afterCode":"\n"}]