[{"functionId":"test","functionNameJP":"テストコード","functionNameEN":"test","beforeCode":"","innerCode":"\n  const queryString = await convertQuery({\n    \"a\":32\n  });\n  if(queryString!==\"a=32\"){\n    throw `クエリパラメータ―に変換する関数が、想定とは異なる動作をしています。`;\n  }\n","afterCode":"","parametersName":[],"parametersDataType":[],"returnValue":"void"},{"functionNameJP":"APIを実行する関数","functionNameEN":"runApi","parametersName":["httpMethod","endpointPath","queryParameters","requestBody","isRequestFormData","isResponseFormData"],"parametersDataType":["string","string",{"string":"any"},{"string":"any"},"boolean","boolean"],"returnValue":{"string":"any"},"functionId":"01HMKRGBMXV1SASJ6C69H67T46","beforeCode":"\n\n\n\n","innerCode":"\n  const apiInfo = await getEndpointInfo( endpointPath );\n  switch(apiInfo.commandName){\n    //======================================================================\n    case \"START_UP\":{\n      await startUp( null, false );\n      return {\n        \"userMessage\": \"再接続しました。\"\n      };\n    }\n    //======================================================================\n    case \"REORDER_VIEW_COLUMN_LEFT\":{\n      const viewColumnId = queryParameters[\"view_column\"];\n      await reorderViewColumnToRight(viewColumnId);\n      return {};\n    }\n    //======================================================================\n    case \"REORDER_VIEW_COLUMN_RIGHT\":{\n      const viewColumnId = queryParameters[\"view_column\"];\n      await reorderViewColumnToRight(viewColumnId);\n      return {};\n    }\n    //======================================================================\n    case \"DELETE_VIEW_COLUMN\":{\n      const viewColumnId = queryParameters[\"view_column\"];\n      return {\n        \"userMessage\": await deleteViewColumn(viewColumnId),\n      };\n    }\n    //======================================================================\n    case \"DELETE_VIEW\":{\n      const viewId = Number(queryParameters[\"view\"]);\n      return {\n        \"userMessage\": await deleteView(viewId),\n      };\n    }\n    //======================================================================\n    case \"UPDATE_VIEW\":{\n      const viewId = Number(queryParameters[\"view\"]);\n      const viewIndex = Number(queryParameters[\"view_index\"]);\n      return {\n        \"userMessage\": await updateView({\n          ...requestBody,\n          viewId: viewId,\n        }),\n        \"nextUrl\": `./?view=${viewId}&view_index=${viewIndex}`,\n      };\n    }\n    //======================================================================\n    case \"GET_VIEW_INFO\":{\n      const viewId = Number(queryParameters[\"view\"]);\n      const viewInfo = await getViewInfo( viewId );\n      const viewColumns = await listViewColumns( viewId );\n      const { isExcel } = await getPageInfo( viewInfo.pageId );\n      return {\n        \"viewId\": viewId,\n        \"isExcel_flag\": isExcel,\n        \"isTableHeader\":  viewInfo.isTableHeader,\n        \"sheetName\":  viewInfo.sheetName,\n        \"childPageId\": viewInfo.childPageId,\n        \"viewType\":  viewInfo.viewType,\n        \"onePageMaxSize\": viewInfo.onePageMaxSize,\n        \"viewName\": viewInfo.name,\n        \"excelStartRow\": viewInfo.excelStartRow,\n        \"excelStartColumn\": viewInfo.excelStartColumn,\n        \"viewColumns\": viewColumns,\n        \"viewColumns_total\": viewColumns.length,\n        \"columns\": [],\n        \"columns_total\": 0,\n        \"records\": [],\n        \"records_total\": 0\n      };\n    }\n    //======================================================================\n    case \"GET_PAGE_INFO\":{\n      const pageId = Number(queryParameters[\"page_id\"]);\n      const { pageName, memo, isExcel } = await getPageInfo( pageId );\n      const staticChildren = await listStaticChildren( pageId );\n      const views = await listChildrenView( pageId );\n      const breadcrumbs = await getBreadcrumbs( pageId );\n      return {\n        \"pageName\": pageName,\n        \"memo\": memo ?? \"\",\n        \"isExcel\": isExcel,\n        \"breadcrumbs\": breadcrumbs,\n        \"breadcrumbs_total\": breadcrumbs.length,\n        \"staticChildren\": staticChildren,\n        \"staticChildren_total\": staticChildren.length,\n        \"tableName_option\": await autoCorrectTableName(\"\"),\n        \"views\": views,\n        \"views_total\": views.length,\n        \"copyingPageId\": await getCopyingPage(),\n        \"cuttingPageId\": await getCuttingPage()\n      };\n    }\n    //======================================================================\n    case \"SET_TITLE_COLUMNS\":{\n      await setTitleColumnsFromUI( requestBody.columns );\n      return {\n        \"nextUrl\": `./?` + await convertQuery_core(queryParameters),\n      };\n    }\n    //======================================================================\n    case \"DELETE_TABLE\":{\n      return {\n        \"userMessage\": await deleteTable( queryParameters.table ),\n        \"nextUrl\": `/default/tables/index.html`,\n      };\n    }\n    //======================================================================\n    case \"TRANSFER_DATA\":{\n      return {\n        \"userMessage\": await transferData( requestBody.processName ),\n        \"nextUrl\": `/default/tables/index.html`,\n      };\n    }\n    //======================================================================\n    case \"GET_CSV_PROGRESS\":{\n      return await getCsvProgress();\n    }\n    //======================================================================\n    case \"DESTROY_CSV_PROGRESS\":{\n      return {\n        \"userMessage\": await destroyCSV(),\n      };\n    }\n    //======================================================================\n    case \"CLEAR_CACHE\":{\n      await clearCache();\n      return {\n        \"userMessage\": \"キャッシュデータを削除しました。\"\n      };\n    }\n    //======================================================================\n    case \"LIST_TABLES\":{\n      const { tables, total } = await listTables(\n        queryParameters[\"page_tables\"],\n        35,\n        false, //isTrash\n      );\n      return {\n        \"tables\": tables,\n        \"tables_total\": total,\n      };\n    }\n    //======================================================================\n    case \"CREATE_RECORD\":{\n      const tableId = queryParameters[\"table\"];\n      const columns = requestBody[\"columns\"];\n      const { recordId, userMessage } = await createRecordFromUI( tableId, columns );\n      return {\n        \"recordId\": recordId,\n        \"userMessage\": userMessage,\n        \"nextUrl\": `/default/records/index.html?table=${tableId}&record=${recordId}`,\n      };\n    }\n    //======================================================================\n    case \"LIST_RECORDS\":{\n      const focusRecordId = queryParameters[\"record\"];\n      const pasteRecordId = queryParameters[\"paste\"];\n      const oldPageNumber = queryParameters[\"page_records\"];\n      const onePageMaxSize = apiInfo?.response?.records?.onePageMaxSize;\n      const tableId = queryParameters[\"table\"];\n      const { columns, records, recordsTotal, pageNumber, recordOffset } = await listRecords( tableId, oldPageNumber, onePageMaxSize, focusRecordId, pasteRecordId );\n      // 親テーブルを選ぶときのセレクトボックスを構築する\n      const { tables, total:tablesTotal } = await listTables(\n        1,\n        1000,\n        false, //isTrash\n      );\n      return {\n        \"tableId\": tableId,\n        \"tableName\": await getTableName(tableId),\n        \"columns\": columns,\n        \"columns_total\": columns.length,\n        \"tables\": tables,\n        \"tables_total\": tablesTotal,\n        \"recordOffset\": recordOffset,\n        \"records\": records,\n        \"records_total\": recordsTotal,\n        \"page_records\": pageNumber,\n      };\n    }\n    //======================================================================\n    case \"COPY_RECORD\":{\n      const pageNumber = queryParameters[\"page_records\"];\n      const tableId = queryParameters[\"table\"];\n      const recordId = queryParameters[\"record_id\"];\n      await copyRecord( tableId, recordId );\n      return {\n        \"nextUrl\": `/default/records/index.html?table=${tableId}&page_records=${pageNumber ?? 1}`,\n      };\n    }\n    //======================================================================\n    case \"CUT_RECORD\":{\n      const pageNumber = queryParameters[\"page_records\"];\n      const tableId = queryParameters[\"table\"];\n      const recordId = queryParameters[\"record_id\"];\n      await cutRecord( tableId, recordId );\n      return {\n        \"nextUrl\": `/default/records/index.html?table=${tableId}&page_records=${pageNumber ?? 1}`,\n      };\n    }\n    //======================================================================\n    case \"PASTE_RECORD\":{\n      const tableId = queryParameters[\"table\"];\n      const pageNumber = queryParameters[\"page_records\"];\n      const beforeRecordId = queryParameters[\"before_id\"];\n      const afterRecordId = queryParameters[\"after_id\"];\n      const recordId = await pasteRecord( tableId, beforeRecordId, afterRecordId );\n      return {\n        \"nextUrl\": `./?table=${tableId}&paste=${recordId}&page_records=${pageNumber ?? 1}`,\n      };\n    }\n    //======================================================================\n    case \"CREATE_TABLE\":{\n      const { tableId, message } = await createTable( requestBody[\"tableName\"] );\n      return {\n        \"tableId\": tableId,\n        \"userMessage\": message,\n        \"nextUrl\": \"../\",\n      };\n    }\n    //======================================================================\n    case \"CREATE_COLUMN\":{\n      const columnType = requestBody[\"columnType\"];\n      const tables = requestBody[\"tables\"];\n      let dataType = \"\";\n      let parentTableId = null;\n      if( isNaN(columnType) ){\n        dataType = columnType;\n        parentTableId = null;\n      }\n      else{\n        dataType = \"POINTER\";\n        parentTableId = tables[Number(columnType)]?.id;\n      }\n      const { columnId, message } = await createColumn(\n        queryParameters[\"table\"],\n        requestBody[\"columnName\"],\n        dataType,\n        parentTableId\n      );\n      const result = {\n        \"columnId\": columnId,\n        \"userMessage\": message,\n        \"nextUrl\": `./?table=${queryParameters[\"table\"]}`,\n      };\n      return result;\n    }\n    //======================================================================\n    case \"UPDATE_TABLE_NAME\":{\n      const message = await updateTableName(\n        requestBody[\"tables\"],\n      );\n      return {\n        \"userMessage\": message,\n        \"nextUrl\": \"../\",\n      };\n    }\n    //======================================================================\n    case \"UPDATE_COLUMN_NAME\":{\n      const message = await updateColumnName(\n        requestBody[\"columns\"],\n      );\n      return {\n        \"userMessage\": message,\n        \"nextUrl\": `../?table=${queryParameters[\"table\"]??\"\"}`,\n      };\n    }\n    //======================================================================\n    case \"REGENERATE_PAGE\":{\n      const pageId = Number(queryParameters[\"page_id\"]);\n      await regeneratePage( pageId );\n      return {\n        \"nextUrl\": `/custom/${pageId}/index.html?` + await convertQuery_core(queryParameters),\n      };\n    }\n    //======================================================================\n    case \"CREATE_PAGE\":{\n      const parentId = Number(queryParameters[\"page_id\"]);\n      await createPage( parentId );\n      return {\n        \"nextUrl\": \"./?\" + await convertQuery_core(queryParameters),\n      };\n    }\n    //======================================================================\n    case \"RENAME_PAGE\":{\n      const pageId = Number(queryParameters[\"page_id\"]);\n      const pageName = requestBody[\"pageName\"];\n      const memo = requestBody[\"memo\"] ?? \"\";\n      const isExcel = requestBody[\"isExcel\"] ? true : false;\n      await updatePageName( pageId, pageName, memo, isExcel );\n      return {};\n    }\n    //======================================================================\n    case \"DELETE_PAGE\":{\n      const pageId = Number(queryParameters[\"page_id\"]);\n      const newQueryParameters = {\n        ...queryParameters,\n        \"page_id\": await getParentPage(pageId),\n      };\n      await deletePage( pageId );\n      return {\n        \"nextUrl\": `/default/page_editor/index.html?` + await convertQuery_core(newQueryParameters),\n      };\n    }\n    //======================================================================\n    case \"COPY_PAGE\":{\n      const pageId = Number(queryParameters[\"page_id\"]);\n      await copyPage( pageId );\n      return {};\n    }\n    //======================================================================\n    case \"CUT_PAGE\":{\n      const pageId = Number(queryParameters[\"page_id\"]);\n      await cutPage( pageId );\n      return {};\n    }\n    //======================================================================\n    case \"PASTE_PAGE\":{\n      const parentPageId = Number(queryParameters[\"page_id\"]);\n      const afterPageId = Number(queryParameters[\"after_id\"]);\n      await pastePage( parentPageId, afterPageId );\n      return {\n        \"nextUrl\": \"./?\" + await convertQuery_core(queryParameters),\n      };\n    }\n    //======================================================================\n    case \"AUTO_CORRECT_TABLE_NAME\":{\n      return {\n        \"tableName_option\": await autoCorrectTableName(requestBody[\"tableName\"]),\n      };\n    }\n    //======================================================================\n    case \"CREATE_RECORD_FROM_VIEW\":{\n      const result = await createRecordFromView( apiInfo.viewId, requestBody );\n      let nextUrl = null;\n      if(result.isSuccess){\n        nextUrl = \"./?\" + await convertQuery_core(queryParameters);\n      }\n      return {\n        ...result.outputTexts,\n        \"isSuccess\": result.isSuccess,\n        \"recordId\": result.recordId,\n        \"userMessage\": result.userMessage,\n        \"nextUrl\": nextUrl,\n      };\n    }\n    //======================================================================\n    case \"UPDATE_RECORDS\":{\n      const viewId = Number(apiInfo.viewId);\n      const result = await updateRecordsFromView( viewId, requestBody[\"view\" + viewId + \"_\"] );\n      let nextUrl = null;\n      if(result.isSuccess){\n        nextUrl = \"./?\" + await convertQuery_core(queryParameters);\n      }\n      return {\n        [\"view\" + viewId + \"_\"]: result.outputTexts,\n        [\"view\" + viewId + \"__total\"]: result.outputTexts.length,\n        \"isSuccess\": result.isSuccess,\n        \"userMessage\": result.userMessage,\n        \"nextUrl\": nextUrl,\n      };\n    }\n    //======================================================================\n    case \"DELETE_RECORD\":{\n      const tableId = apiInfo.tableId ?? queryParameters[\"table\"];\n      const recordId = Number(queryParameters[\"record_id\"]);\n      return {\n        \"userMessage\": await deleteRecords( tableId, [ recordId ] ),\n        \"nextUrl\": \"./?\" + await convertQuery_core(queryParameters),\n      };\n    }\n    //======================================================================\n    case \"GET_PAGE_DATA\":{\n      return await getPageDataForGUI( apiInfo.pageId, queryParameters );\n    }\n    //======================================================================\n    case \"AUTO_CORRECT\":{\n      const isClick = queryParameters[\"is_click\"] ? true : false;\n      return await autoFill(\n        apiInfo.viewId,\n        {\n          //  入力例\n          //  \"vc9\": \"田\",\n          //  \"vc10\": 3,\n          ...requestBody,\n        },\n        isClick\n      );\n    }\n    //======================================================================\n    case \"CREATE_VIEW\":{\n      const pageId = Number(queryParameters[\"page_id\"]);\n      const tableName = requestBody[\"tableName\"];\n      await  createView( pageId, tableName );\n      return {\n        \"nextUrl\": \"./?\" + await convertQuery_core(queryParameters),\n      };\n    }\n    //======================================================================\n    default:\n      throw `サポートされていないAPIコマンドです。\\ncommandName = ${apiInfo.commandName}`;\n  }\n","afterCode":""},{"functionNameJP":"連想配列をクエリパラメータに変換","functionNameEN":"convertQuery","parametersName":["obj"],"parametersDataType":[{"string":"any"}],"returnValue":"string","functionId":"01HMZVAKBSB00KYFS7PDFKEB1P","beforeCode":"\n\n\n\n","innerCode":"\n  return Object.keys(obj)\n    .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(obj[key])}`)\n    .join('&');\n","afterCode":"\n"}]